[
  {
    "codeTitle": "Select Multiple Values with v-model in Vue",
    "codeDescription": "This snippet shows how to create a multiple select dropdown, allowing the user to select multiple options. The selected values are bound to an array using `v-model`.",
    "codeLanguage": "vue-html",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_12",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>"
      }
    ],
    "relevance": 0.975,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide value with provide() in Vue.js",
    "codeDescription": "Demonstrates how to provide values using the `provide()` function in Vue.js Composition API. It shows providing static values, reactive values, and values with Symbol keys within a `<script setup>` block.",
    "codeLanguage": "vue",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_0",
    "pageTitle": "Vue.js Composition API: Dependency Injection",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>"
      }
    ],
    "relevance": 0.975,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Define Props and Emits Vue",
    "codeDescription": "Shows how to declare options like `props` and `emits` with full type inference support using the `defineProps` and `defineEmits` APIs inside `<script setup>`. These are compiler macros and do not need to be imported.",
    "codeLanguage": "vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_10",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps({\n  foo: String\n})\n\nconst emit = defineEmits(['change', 'delete'])\n// setup code\n</script>"
      }
    ],
    "relevance": 0.975,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Two-way data binding with defineModel() in Vue Component",
    "codeDescription": "This Vue component demonstrates two-way data binding using the `defineModel()` macro. The `model` ref is synced with the parent's v-model value, and updates to it emit an `update:modelValue` event.",
    "codeLanguage": "vue",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_0",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- Child.vue -->\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>"
      }
    ],
    "relevance": 0.97,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model on custom component",
    "codeDescription": "Demonstrates v-model on a custom component, showing how the v-model is equivalent to a `:model-value` prop and an `@update:model-value` event listener.",
    "codeLanguage": "vue-html",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_8",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<CustomInput\n  :model-value=\"searchText\"\n  @update:model-value=\"newValue => searchText = newValue\"\n/>"
      }
    ],
    "relevance": 0.97,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Provide/Inject with InjectionKey in Vue.js",
    "codeDescription": "This code snippet demonstrates how to use `InjectionKey` to properly type injected values in Vue.js. It defines a symbol-based injection key and uses it with `provide` and `inject` to ensure type safety between the provider and consumer. Providing a non-string value to `provide` will result in an error due to the type constraint on the `InjectionKey`.",
    "codeLanguage": "typescript",
    "codeTokens": 153,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_25",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined"
      }
    ],
    "relevance": 0.968,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Checkbox Value Bindings in Vue",
    "codeDescription": "This snippet demonstrates how to bind the `true` and `false` values of a checkbox to specific strings using `true-value` and `false-value`. This allows you to control the value of the bound variable based on the checkbox's state.",
    "codeLanguage": "vue-html",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_16",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  true-value=\"yes\"\n  false-value=\"no\" />"
      }
    ],
    "relevance": 0.965,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Simplified Mouse Tracking Composable JavaScript",
    "codeDescription": "This updated `useMouse` composable utilizes the `useEventListener` composable to manage the mousemove event listener. It imports both `ref` from Vue and `useEventListener` from './event'. It encapsulates the reactive state (x and y coordinates) and uses the `useEventListener` composable to handle the event listener lifecycle.  This showcases how composables can be nested for complex logic reuse.",
    "codeLanguage": "javascript",
    "codeTokens": 184,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_4",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// mouse.js\nimport { ref } from 'vue'\nimport { useEventListener } from './event'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  useEventListener(window, 'mousemove', (event) => {\n    x.value = event.pageX\n    y.value = event.pageY\n  })\n\n  return { x, y }\n}"
      }
    ],
    "relevance": 0.965,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model Modifier Handling (Composition API)",
    "codeDescription": "Shows how to access and handle custom modifiers on a `v-model` binding within a Vue.js component using the Composition API and `defineModel`. It demonstrates how to use the `set` option to implement a `capitalize` modifier.",
    "codeLanguage": "vue",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_21",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst [model, modifiers] = defineModel({\n  set(value) {\n    if (modifiers.capitalize) {\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n    return value\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>"
      }
    ],
    "relevance": 0.965,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Exposing ref to Template - Composition API - JavaScript",
    "codeDescription": "Shows how to expose a `ref` to a component's template by declaring it within the `setup()` function and returning it. When using refs in templates, the `.value` property is automatically unwrapped.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_4",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ref } from 'vue'\n\nexport default {\n  // `setup` is a special hook dedicated for the Composition API.\n  setup() {\n    const count = ref(0)\n\n    // expose the ref to the template\n    return {\n      count\n    }\n  }\n}"
      }
    ],
    "relevance": 0.965,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Props Definition Using an Interface in Vue",
    "codeDescription": "This code shows defining props using an interface for better organization and reusability. An interface `Props` is defined with `foo` as a required string and `bar` as an optional number. This interface is then used as the generic type for `defineProps`.",
    "codeLanguage": "vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_2",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>"
      }
    ],
    "relevance": 0.962,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Two-way data binding with native input element",
    "codeDescription": "This shows how to bind the `defineModel` ref to a native input element using v-model to wrap native input elements and provide the same `v-model` usage.",
    "codeLanguage": "vue",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_2",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst model = defineModel()\n</script>\n\n<template>\n  <input v-model=\"model\" />\n</template>"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Boolean Prop (Options API)",
    "codeDescription": "This snippet demonstrates how to define a boolean prop named 'disabled' using the Options API in Vue.js.  When the 'disabled' attribute is present on the component, it's equivalent to passing `:disabled=\"true\"`. When it's absent, it's equivalent to `:disabled=\"false\"`.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_25",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    disabled: Boolean\n  }\n}"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Event Listener Composable JavaScript",
    "codeDescription": "This JavaScript code defines a `useEventListener` composable that simplifies adding and removing event listeners on a specified target. It takes the target element, event type, and callback function as arguments. It uses `onMounted` and `onUnmounted` to manage the event listener's lifecycle, ensuring it's added when the component is mounted and removed when unmounted.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_3",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// event.js\nimport { onMounted, onUnmounted } from 'vue'\n\nexport function useEventListener(target, event, callback) {\n  // if you want, you can also make this\n  // support selector strings as target\n  onMounted(() => target.addEventListener(event, callback))\n  onUnmounted(() => target.removeEventListener(event, callback))\n}"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Reactive Object with reactive() in Vue.js",
    "codeDescription": "Creates a reactive proxy of the object using the `reactive()` function. The conversion is deep, affecting all nested properties and unwrapping refs while maintaining reactivity. It's recommended to work exclusively with the reactive proxy.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_4",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = reactive({ count: 0 })\nobj.count++"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "defineModel with Arguments and Options",
    "codeDescription": "Shows how to pass both the model name and prop options to `defineModel` when using arguments with v-model.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_13",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const title = defineModel('title', { required: true })"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Two-Way Binding Prop with defineModel in Vue",
    "codeDescription": "This code snippet shows how to use `defineModel` to declare a two-way binding prop in Vue. The `defineModel` macro automatically declares a model prop and a corresponding value update event, enabling the use of `v-model` from the parent component. The code also shows how to declare the prop with options.",
    "codeLanguage": "javascript",
    "codeTokens": 215,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_16",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// declares \"modelValue\" prop, consumed by parent via v-model\nconst model = defineModel()\n// OR: declares \"modelValue\" prop with options\nconst model = defineModel({ type: String })\n\n// emits \"update:modelValue\" when mutated\nmodel.value = 'hello'\n\n// declares \"count\" prop, consumed by parent via v-model:count\nconst count = defineModel('count')\n// OR: declares \"count\" prop with options\nconst count = defineModel('count', { type: Number, default: 0 })\n\nfunction inc() {\n  // emits \"update:count\" when mutated\n  count.value++\n}"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Single-File Component (Composition API)",
    "codeDescription": "This snippet demonstrates a Vue Single-File Component (SFC) using the Composition API and `<script setup>`. It defines a reactive `count` ref, a template with a button to increment the count, and scoped CSS to style the button.\n\nDependencies: vue\nInput: None\nOutput: A complete Vue component definition.",
    "codeLanguage": "Vue.js",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_4",
    "pageTitle": "Vue.js Introduction",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue SFC Example",
    "codeDescription": "This snippet illustrates the basic structure of a Vue Single-File Component (SFC) with template, script, and style blocks. It shows how to define a simple component with data and styling using HTML-like syntax.",
    "codeLanguage": "vue",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_0",
    "pageTitle": "Vue SFC Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Reactive State with ref() - Composition API - JavaScript",
    "codeDescription": "Shows how to declare reactive state using the `ref()` function in the Composition API.  `ref()` wraps the argument in a ref object with a `.value` property, which must be accessed to get or set the value. The ref needs to be declared and returned from the component's `setup()` function to be accessed in the template.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_2",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ref } from 'vue'\n\nconst count = ref(0)"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Concise Typing for Component Emits in Vue 3.3+",
    "codeDescription": "This code snippet shows the more succinct syntax available from Vue 3.3+ for typing component emits using a type literal where values are array/tuple types representing accepted event parameters. Named tuples provide explicit naming for each argument.",
    "codeLanguage": "vue",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_13",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{  change: [id: number]\n  update: [value: string]\n}>()\n</script>"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Augmenting Global Properties in Vue.js with TypeScript",
    "codeDescription": "This snippet explains how to augment global properties added to component instances via `app.config.globalProperties` in Vue.js using TypeScript module augmentation. It shows how to declare a module 'vue' and extend the `ComponentCustomProperties` interface to include the types of globally available properties, enabling type-safe access to these properties within components.",
    "codeLanguage": "typescript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_6",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.96,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-for on Component",
    "codeDescription": "Illustrates how to use the `v-for` directive directly on a Vue component. This example shows how to iterate over an array of items and render a component for each item, ensuring each component has a unique key.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_21",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-for=\"item in items\" :key=\"item.id\" />"
      }
    ],
    "relevance": 0.955,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type-Only Props/Emit Declarations TypeScript",
    "codeDescription": "Illustrates how to declare props and emits using pure-type syntax by passing a literal type argument to `defineProps` or `defineEmits`.  This allows for type safety and automatic runtime declaration generation.",
    "codeLanguage": "typescript",
    "codeTokens": 156,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_11",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number] // named tuple syntax\n  update: [value: string]\n}>()"
      }
    ],
    "relevance": 0.955,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining prop options for defineModel",
    "codeDescription": "Shows how to pass prop options to `defineModel` to specify if the `v-model` is required or provide a default value.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_5",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// making the v-model required\nconst model = defineModel({ required: true })\n\n// providing a default value\nconst model = defineModel({ default: 0 })"
      }
    ],
    "relevance": 0.955,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Nullable Type Prop (Options API)",
    "codeDescription": "This snippet demonstrates how to define a prop that is required but can also accept a null value using Options API. The `id` prop is defined to be either a string or null, and it is marked as required.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_23",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    id: {\n      type: [String, null],\n      required: true\n    }\n  }\n}"
      }
    ],
    "relevance": 0.955,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Data Fetching Component Vue",
    "codeDescription": "This Vue component demonstrates basic asynchronous data fetching using `fetch`. It utilizes `ref` to manage the data and error states. The template conditionally renders a loading message, the fetched data, or an error message based on the current state.  This is a basic pattern for fetching data within a Vue component.",
    "codeLanguage": "vue",
    "codeTokens": 210,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_5",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>"
      }
    ],
    "relevance": 0.952,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Definition (Options API)",
    "codeDescription": "This snippet demonstrates defining a computed property called `publishedBooksMessage` within the Options API. The computed property's getter function checks if the `author.books` array has any books and returns 'Yes' or 'No' accordingly. The `this` keyword refers to the component instance, allowing access to the component's data.",
    "codeLanguage": "javascript",
    "codeTokens": 191,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_3",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Component with Slots Vue.js",
    "codeDescription": "This code snippet demonstrates how to use the `<FancyButton>` component, passing \"Click me!\" as slot content. The content is rendered within the `<slot>` element defined in the `<FancyButton>` component's template.  The slot content is rendered where the `<slot>` element is placed.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_1",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Preventing Style Tag Rendering in Vue.js Templates",
    "codeDescription": "This example shows that Vue prevents rendering of style tags inside templates to avoid potential vulnerabilities related to styling the entire page by malicious users.",
    "codeLanguage": "HTML",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_12",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<style>{{ userProvidedStyles }}</style>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Sync Watcher (Options API) - JavaScript",
    "codeDescription": "This code snippet creates a synchronous watcher using the Options API. The `flush: 'sync'` option makes the callback execute immediately after the reactive state changes, before any Vue-managed updates occur.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_20",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'sync'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model with Arguments Options API",
    "codeDescription": "Options API implementation of `v-model` with arguments: the child component should expect a `title` prop and emit an `update:title` event to update the parent value.",
    "codeLanguage": "vue",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_15",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- MyComponent.vue -->\n<script>\nexport default {\n  props: ['title'],\n  emits: ['update:title']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Pseudo-code for Vue Reactivity with Proxy and Getter/Setter",
    "codeDescription": "Illustrates the core concepts of Vue's reactivity system using pseudo-code.  It showcases how `reactive()` uses Proxies to intercept property access and trigger dependency tracking (`track()`) and updates (`trigger()`).  Similarly, `ref()` uses getter/setters for reactive primitive values. This snippet highlights the key mechanisms behind Vue's reactivity.",
    "codeLanguage": "javascript",
    "codeTokens": 206,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_2",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "function reactive(obj) {\n  return new Proxy(obj, {\n    get(target, key) {\n      track(target, key)\n      return target[key]\n    },\n    set(target, key, value) {\n      target[key] = value\n      trigger(target, key)\n    }\n  })\n}\n\nfunction ref(value) {\n  const refObject = {\n    get value() {\n      track(refObject, 'value')\n      return value\n    },\n    set value(newValue) {\n      value = newValue\n      trigger(refObject, 'value')\n    }\n  }\n  return refObject\n}"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Props with defineComponent in Vue.js",
    "codeDescription": "This snippet demonstrates how to enable type inference for component props in Vue.js Options API using `defineComponent()`. It shows how Vue infers types based on the `props` option, including `required: true` and `default` settings. It covers basic types like String, Number, and String, as well as the `null` type.",
    "codeLanguage": "typescript",
    "codeTokens": 191,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_0",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    id: [Number, String],\n    msg: { type: String, required: true },\n    metadata: null\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.id // type: number | string | undefined\n    this.msg // type: string\n    this.metadata // type: any\n  }\n})"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Props with defineProps in Vue",
    "codeDescription": "This code snippet shows how to define component props with TypeScript using the `defineProps` macro in `<script setup>`. It uses runtime declaration, inferring the props types based on the argument provided to `defineProps()`. The example defines `foo` as a required string and `bar` as an optional number.",
    "codeLanguage": "vue",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_0",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding a v-model to a Vue Component",
    "codeDescription": "This shows how a parent component can bind a value to a child component using `v-model`.  Any changes made to the `countModel` in the child will automatically update the `countModel` in the parent.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_1",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Parent.vue -->\n<Child v-model=\"countModel\" />"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Text Input Binding with v-model (Vue HTML)",
    "codeDescription": "Demonstrates basic text input binding using v-model. The input's value is bound to the 'text' variable. When the input value changes, the 'text' variable is updated automatically.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_0",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">\n"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Text Interpolation in Vue Template",
    "codeDescription": "This code snippet demonstrates text interpolation in a Vue template using the mustache syntax (double curly braces). The `msg` property from the component instance is dynamically rendered within the `<span>` element. The content will update whenever the `msg` property changes in the Vue component.",
    "codeLanguage": "vue-html",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_0",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>Message: {{ msg }}</span>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Deep Reactivity with Composition API in Vue",
    "codeDescription": "This example illustrates deep reactivity using the Composition API in Vue. The `ref` function is used to create a reactive object `obj`. The `mutateDeeply` function modifies nested properties within `obj`, and Vue automatically detects these changes.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_14",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nconst obj = ref({\n  nested: { count: 0 },\n  arr: ['foo', 'bar']\n})\n\nfunction mutateDeeply() {\n  // these will work as expected.\n  obj.value.nested.count++\n  obj.value.arr.push('baz')\n}"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using reactive state in Vue templates",
    "codeDescription": "This example shows how to use the state created with `reactive()` in a Vue template. The `state.count` property is accessed and mutated directly within the template using data binding and event handling.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_18",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"state.count++\">\n  {{ state.count }}\n</button>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Input Component",
    "codeDescription": "Implementation of a custom input component to work with `v-model`. It accepts a `modelValue` prop and emits an `update:modelValue` event when the input changes.",
    "codeLanguage": "vue",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_9",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>\n\n<template>\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Form with aria-labelledby",
    "codeDescription": "This Vue.js code demonstrates using aria-labelledby to associate instructions with an input field.  The aria-labelledby attribute allows linking multiple IDs to provide comprehensive context and instructions for the input, enhancing accessibility.",
    "codeLanguage": "vue-html",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_12",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<fieldset>\n  <legend>Using aria-labelledby</legend>\n  <label id=\"date-label\" for=\"date\">Current Date: </label>\n  <input\n    type=\"date\"\n    name=\"date\"\n    id=\"date\"\n    aria-labelledby=\"date-label date-instructions\"\n  />\n  <p id=\"date-instructions\">MM/DD/YYYY</p>\n</fieldset>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple v-model Bindings (Composition API)",
    "codeDescription": "Shows how to define multiple `v-model` bindings within a Vue.js component using Composition API and `defineModel`. It defines two refs, `firstName` and `lastName`, which are bound to input fields.",
    "codeLanguage": "vue",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_17",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst firstName = defineModel('firstName')\nconst lastName = defineModel('lastName')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"firstName\" />\n  <input type=\"text\" v-model=\"lastName\" />\n</template>"
      }
    ],
    "relevance": 0.95,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch with Side Effect Cleanup (Vue 3.5+) - JavaScript",
    "codeDescription": "Shows how to use `onWatcherCleanup` to register a cleanup function in Vue 3.5+. This function is called when the watcher is about to re-run, allowing for cleanup of previous side effects.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_25",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { onWatcherCleanup } from 'vue'\n\nwatch(id, async (newId) => {\n  const { response, cancel } = doAsyncWork(newId)\n  onWatcherCleanup(cancel)\n  data.value = await response\n})"
      }
    ],
    "relevance": 0.948,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template Ref in Options API in Vue",
    "codeDescription": "This code demonstrates how to use the `ref` attribute in the Options API in Vue.js to create a template reference. The `ref` attribute is bound to a DOM element, making it accessible via `this.$refs` within the component instance. The `ref` will be registered under the component's `this.$refs` object.",
    "codeLanguage": "Vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_2",
    "pageTitle": "Vue.js Built-in Special Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- stored as this.$refs.p -->\n<p ref=\"p\">hello</p>"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Emitted Events using defineEmits Vue",
    "codeDescription": "This snippet shows how to declare emitted events using `defineEmits()` macro in the Composition API. The component declares that it will emit `inFocus` and `submit` events.",
    "codeLanguage": "Vue",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_10",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\ndefineEmits(['inFocus', 'submit'])\n</script>"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple Checkboxes with v-model (Vue HTML)",
    "codeDescription": "Demonstrates binding multiple checkboxes to the same 'checkedNames' array. When a checkbox is checked or unchecked, its value is added to or removed from the 'checkedNames' array.",
    "codeLanguage": "vue-html",
    "codeTokens": 157,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_9",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>\n"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing with Symbol Key (Composition API)",
    "codeDescription": "This snippet shows how to provide data using a Symbol injection key in Vue.js Composition API. It imports the Symbol key and provides an object associated with it.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_19",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in provider component\nimport { provide } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nprovide(myInjectionKey, {\n  /* data to provide */\n})"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Exposing Properties in Script Setup with defineExpose in Vue",
    "codeDescription": "This code snippet demonstrates how to explicitly expose properties in a `<script setup>` component using the `defineExpose` compiler macro. This allows parent components to access these properties via template refs or `$parent` chains.",
    "codeLanguage": "vue",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_22",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\ndefineExpose({\n  a,\n  b\n})\n</script>"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Unit Test for Vue Composable (useCounter)",
    "codeDescription": "This snippet shows how to unit test a composable function like `useCounter`. It imports the composable, invokes it, and then asserts that the state and methods behave as expected. It leverages Vitest's `expect` function.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_14",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// counter.test.js\nimport { useCounter } from './counter.js'\n\ntest('useCounter', () => {\n  const { count, increment } = useCounter()\n  expect(count.value).toBe(0)\n\n  increment()\n  expect(count.value).toBe(1)\n})"
      }
    ],
    "relevance": 0.945,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamically Render Select Options in Vue",
    "codeDescription": "This snippet shows how to dynamically render select options using `v-for`.  The options are created from an array of objects, where each object has a `text` and `value` property. The selected value is bound to a data property with `v-model`.",
    "codeLanguage": "vue-html",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_13",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Count Initialization (Options API)",
    "codeDescription": "Defines a reactive data property `count` within a Vue component using the Options API. This property is initialized to 0 and bound to an event handler. The Options API allows defining component logic through the `data` property and other options.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_1",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    count: 0\n  }\n}"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Exposed Method as Event Handler - Composition API - HTML",
    "codeDescription": "Example of how to use the method exposed above in a Vue HTML template. This displays the usage of the increment function within the template.\nDependencies: Vue.js",
    "codeLanguage": "Vue",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_8",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "Vue",
        "code": "<button @click=\"increment\">\n  {{ count }}\n</button>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting events with defineEmits in Composition API Vue",
    "codeDescription": "This snippet shows how to declare and use `defineEmits` within `<script setup>` to create an emit function, which can then be used to emit events.  This is an alternate method that is used for emitting events within the setup script.",
    "codeLanguage": "Vue",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_11",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nconst emit = defineEmits(['inFocus', 'submit'])\n\nfunction buttonClick() {\n  emit('submit')\n}\n</script>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Component (Options API) Vue",
    "codeDescription": "Demonstrates how to import and register a child component (ButtonCounter.vue) within a parent component using the Options API. The `components` option registers the imported `ButtonCounter` making it available for use in the template.",
    "codeLanguage": "vue",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_4",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Emitted Events with Type Annotations (Composition API) TypeScript",
    "codeDescription": "This snippet demonstrates using type annotations with `defineEmits` in `<script setup>` to declare emitted events with TypeScript. It specifies the event names and their argument types.",
    "codeLanguage": "TypeScript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_16",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "<script setup lang=\"ts\">\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component A - Composition API - Vue",
    "codeDescription": "This Vue component (ComponentA.vue) imports the shared `store` and displays the `count` property. It utilizes the Composition API and assumes the `store` module exports a reactive object.",
    "codeLanguage": "Vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_3",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<!-- ComponentA.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From A: {{ store.count }}</template>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watching Reactive Object Property (Vue.js)",
    "codeDescription": "This snippet demonstrates the correct way to watch a property of a reactive object using a getter function in Vue.js Composition API. It highlights that directly watching obj.count won't work and provides the correct approach using a getter.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_5",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// instead, use a getter:\nwatch(\n  () => obj.count,\n  (count) => {\n    console.log(`Count is: ${count}`)\n  }\n)"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Typescript with defineModel in Vue",
    "codeDescription": "This snippet demonstrates how to use TypeScript with `defineModel` to specify the types of the model value and the modifiers. It shows how to define the type of the model value and how to specify the available modifiers.",
    "codeLanguage": "typescript",
    "codeTokens": 147,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_21",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const modelValue = defineModel<string>()\n//    ^? Ref<string | undefined>\n\n// default model with options, required removes possible undefined values\nconst modelValue = defineModel<string>({ required: true })\n//    ^? Ref<string>\n\nconst [modelValue, modifiers] = defineModel<string, 'trim' | 'uppercase'>()\n//                 ^? Record<'trim' | 'uppercase', true | undefined>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "defineModel with Arguments",
    "codeDescription": "Demonstrates using `defineModel()` with an argument to create a two-way binding to a specific prop in the child component.",
    "codeLanguage": "vue",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_12",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- MyComponent.vue -->\n<script setup>\nconst title = defineModel('title')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"title\" />\n</template>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component (Options API) JavaScript",
    "codeDescription": "Defines a Vue component as a plain JavaScript object using the Options API. The `data` option initializes the `count` property. The `template` option provides an inlined HTML string that displays a button which, when clicked, increments the value of count.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_2",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n}"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component (Composition API) Vue",
    "codeDescription": "Defines a Vue component using the Composition API within a Single-File Component (SFC).  It imports the `ref` function from Vue and uses it to create a reactive `count` variable initialized to 0.  The template displays the current value of `count` and increments it on button click.",
    "codeLanguage": "vue",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_1",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watching a Ref with Composition API in Vue.js",
    "codeDescription": "This code snippet demonstrates how to use the `watch` function from the Vue.js Composition API to watch a ref and execute a callback function whenever the ref's value changes. The `count` ref is initialized to 0, and the `watch` function is used to log the new count value to the console whenever it changes. This approach allows for reactive side effects based on changes in reactive data.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-10/description.md#_snippet_0",
    "pageTitle": "Vue.js Watchers: Reactively Performing Side Effects",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, watch } from 'vue'\n\nconst count = ref(0)\n\nwatch(count, (newCount) => {\n  // yes, console.log() is a side effect\n  console.log(`new count is: ${newCount}`)\n})"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Props in Options API setup function",
    "codeDescription": "This snippet shows how to access props within the `setup` function of a Vue component using the Options API. The `props` object is passed as the first argument to the `setup` function.",
    "codeLanguage": "js",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_11",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  props: ['title'],\n  setup(props) {\n    console.log(props.title)\n  }\n}"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Data Fetching with useFetch Composable in Vue.js",
    "codeDescription": "This `useFetch` composable function demonstrates fetching data using a URL that can be a static string, a ref, or a getter function. It leverages `watchEffect` to react to changes in the URL, and `toValue` to normalize the URL argument. The composable returns reactive `data` and `error` refs.",
    "codeLanguage": "javascript",
    "codeTokens": 218,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_10",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// fetch.js\nimport { ref, watchEffect, toValue } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  const fetchData = () => {\n    // reset state before fetching..\n    data.value = null\n    error.value = null\n\n    fetch(toValue(url))\n      .then((res) => res.json())\n      .then((json) => (data.value = json))\n      .catch((err) => (error.value = err))\n  }\n\n  watchEffect(() => {\n    fetchData()\n  })\n\n  return { data, error }\n}"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Directive SSR Implementation JavaScript",
    "codeDescription": "This JavaScript code defines a custom directive with client-side (`mounted`) and server-side (`getSSRProps`) implementations. The `getSSRProps` hook allows specifying attributes to be added to the rendered element during SSR, enabling custom directive behavior on the server. It receives the directive binding as an argument.",
    "codeLanguage": "JavaScript",
    "codeTokens": 168,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_9",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const myDirective = {\n  mounted(el, binding) {\n    // client-side implementation:\n    // directly update the DOM\n    el.id = binding.value\n  },\n  getSSRProps(binding) {\n    // server-side implementation:\n    // return the props to be rendered.\n    // getSSRProps only receives the directive binding.\n    return {\n      id: binding.value\n    }\n  }\n}"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component with Composition API and render function",
    "codeDescription": "This code snippet demonstrates the usage of `defineComponent` with a function signature (Composition API and render function).  It defines a component that uses the Composition API to manage state (`count`) and returns a render function (using `h`) to create the component's virtual DOM.  The props are manually declared.",
    "codeLanguage": "javascript",
    "codeTokens": 176,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_3",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, h } from 'vue'\n\nconst Comp = defineComponent(\n  (props) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return h('div', count.value)\n    }\n  },\n  // extra options, e.g. declare props and emits\n  {\n    props: {\n      /* ... */\n    }\n  }\n)"
      }
    ],
    "relevance": 0.94,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Computed Properties in Vue.js",
    "codeDescription": "This snippet demonstrates how a computed property infers its type based on its return value in Vue.js. It shows a basic example where the `greeting` computed property's type is inferred from its return value, a string. It also shows how to explicitly annotate the return type of a computed property and how to annotate a writable computed property.",
    "codeLanguage": "typescript",
    "codeTokens": 154,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_4",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    greeting() {\n      return this.message + '!'\n    }\n  },\n  mounted() {\n    this.greeting // type: string\n  }\n})"
      },
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Prop Validation (Options API)",
    "codeDescription": "This snippet demonstrates prop validation using the `props` option in Options API. It showcases specifying different types, required props, default values, and custom validators for props.",
    "codeLanguage": "javascript",
    "codeTokens": 375,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_19",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    // Basic type check\n    //  (`null` and `undefined` values will allow any type)\n    propA: Number,\n    // Multiple possible types\n    propB: [String, Number],\n    // Required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // Required but nullable string\n    propD: {\n      type: [String, null],\n      required: true\n    },\n    // Number with a default value\n    propE: {\n      type: Number,\n      default: 100\n    },\n    // Object with a default value\n    propF: {\n      type: Object,\n      // Object or array defaults must be returned from\n      // a factory function. The function receives the raw\n      // props received by the component as the argument.\n      default(rawProps) {\n        return { message: 'hello' }\n      }\n    },\n    // Custom validator function\n    // full props passed as 2nd argument in 3.4+\n    propG: {\n      validator(value, props) {\n        // The value must match one of these strings\n        return ['success', 'warning', 'danger'].includes(value)\n      }\n    },\n    // Function with a default value\n    propH: {\n      type: Function,\n      // Unlike object or array default, this is not a factory\n      // function - this is a function to serve as a default value\n      default() {\n        return 'Default function'\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Prop Use in SFC (kebab-case or camelCase)",
    "codeDescription": "Shows proper usage of props in Single-File Components (SFC) using either kebab-case or camelCase but emphasizing consistency within the project.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_27",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "// for SFC - please make sure your casing is consistent throughout the project\n// you can use either convention but we don't recommend mixing two different casing styles\n<WelcomeMessage greeting-text=\"hi\"/>\n// or\n<WelcomeMessage greetingText=\"hi\"/>"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Overriding Type Inference with ref() in Vue",
    "codeDescription": "This example demonstrates how to override the default type inference of `ref()` by passing a generic argument when calling the function. Here, `year` is explicitly defined as `Ref<string | number>`, allowing it to accept both string and number values.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_17",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "// resulting type: Ref<string | number>\nconst year = ref<string | number>('2020')\n\nyear.value = 2020 // ok!"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Imported Helpers Vue",
    "codeDescription": "Demonstrates how imported helper functions can be directly used in template expressions without needing to expose them via the `methods` option. The example uses a `capitalize` function imported from a local file.",
    "codeLanguage": "vue",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_2",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { capitalize } from './helpers'\n</script>\n\n<template>\n  <div>{{ capitalize('hello') }}</div>\n</template>"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method Handler Definition (Options API)",
    "codeDescription": "Defines a `greet` method within a Vue component using the Options API. It accesses the component's `name` data property to construct a greeting message. `this` refers to the current Vue instance. The method also handles the native DOM event object.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_4",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Props and Emits Declaration for v-model with Modifiers (Options API)",
    "codeDescription": "This JavaScript code defines the `props` and `emits` options for a Vue component that uses `v-model` with a modifier. It shows how to access the modifiers within the component's `created` lifecycle hook. It relies on the Vue Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_26",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['title', 'titleModifiers'],\n  emits: ['update:title'],\n  created() {\n    console.log(this.titleModifiers) // { capitalize: true }\n  }\n}"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "MyModal Component (Composition API)",
    "codeDescription": "This snippet shows the implementation of the <MyModal> component using the Composition API. It uses a ref to manage the open/close state of the modal and includes the modal's template and styles.  The modal is styled with fixed positioning and a z-index.",
    "codeLanguage": "vue",
    "codeTokens": 200,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_1",
    "pageTitle": "Vue.js Teleport Component Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>"
      }
    ],
    "relevance": 0.935,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Author Data (Composition API)",
    "codeDescription": "This snippet initializes author data using the Composition API with `reactive`. It imports `reactive` from 'vue' and creates a reactive object called `author` containing the author's name and books array. The `reactive` function makes the object's properties reactive, meaning changes to these properties will trigger updates in the component.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_1",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "const author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})"
      }
    ],
    "relevance": 0.932,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiline Text Input - Correct v-model Binding (Vue HTML)",
    "codeDescription": "Shows the correct way to bind a textarea to a reactive variable 'text' using v-model for proper two-way data binding.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_5",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- good -->\n<textarea v-model=\"text\"></textarea>\n"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Component Data with Data Function in Vue.js",
    "codeDescription": "This code demonstrates how to define the `data` option in a Vue.js component.  The `data` option is a function that returns a plain JavaScript object, which Vue will make reactive.  The returned object becomes accessible via `this.$data` and individual properties are proxied to the component instance (e.g., `this.a`).",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_0",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return { a: 1 }\n  },\n  created() {\n    console.log(this.a) // 1\n    console.log(this.$data) // { a: 1 }\n  }\n}"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Native Input using v-model",
    "codeDescription": "Illustrates the basic usage of `v-model` on a native input element, which gets compiled into a `:value` binding and an `@input` event listener.",
    "codeLanguage": "vue-html",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_6",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model=\"searchText\" />"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Array with Composition API in Vue",
    "codeDescription": "This code snippet demonstrates how to initialize an array of objects using the Composition API in Vue. It uses the `ref` function to create a reactive reference to the array.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_0",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "const items = ref([{ message: 'Foo' }, { message: 'Bar' }])"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "BaseLayout Template with Named Slots (Vue)",
    "codeDescription": "This example demonstrates a BaseLayout component with named slots for the header, main content, and footer. The `name` attribute on the `<slot>` element defines the slot's name, allowing the parent component to target specific sections of the layout.",
    "codeLanguage": "vue-html",
    "codeTokens": 123,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_10",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using TypeScript in Single-File Components",
    "codeDescription": "Shows how to use TypeScript within Vue Single-File Components (SFCs) by adding the `lang=\"ts\"` attribute to the `<script>` tag. This enables type checking and auto-completion in the template.  The example defines a component with a data property and displays it in the template.",
    "codeLanguage": "vue",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_2",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "vue",
        "code": "<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 1\n    }\n  }\n})\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Disable attribute inheritance (Composition API)",
    "codeDescription": "This code demonstrates disabling attribute inheritance for a Vue component using the Composition API within `<script setup>`. It uses `defineProps`, `defineEmits`, and `defineOptions` to achieve the same effect as the Options API example.",
    "codeLanguage": "vue",
    "codeTokens": 148,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_3",
    "pageTitle": "Vue.js Component Options: Misc",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps(['label', 'value'])\ndefineEmits(['input'])\ndefineOptions({\n  inheritAttrs: false\n})\n</script>\n\n<template>\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    />\n  </label>\n</template>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject values with inject() in Vue.js",
    "codeDescription": "Illustrates how to inject provided values using the `inject()` function in Vue.js Composition API. It demonstrates injecting static values, reactive values, values with Symbol keys, values with default values, and values with default value factories within a `<script setup>` block.",
    "codeLanguage": "vue",
    "codeTokens": 195,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_1",
    "pageTitle": "Vue.js Composition API: Dependency Injection",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Symbol Injection Key (JavaScript)",
    "codeDescription": "This snippet demonstrates how to define a Symbol injection key in JavaScript. This is used to avoid potential naming conflicts when providing and injecting dependencies in large applications. It exports the Symbol for use in both provider and injector components.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_18",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "// keys.js\nexport const myInjectionKey = Symbol()"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed classObject (Options API)",
    "codeDescription": "Defines a computed property within Vue's Options API that returns a class object. The class object is dynamically constructed based on the component's data properties, allowing for complex class binding logic.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_8",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template with v-if Directive - HTML",
    "codeDescription": "This HTML snippet demonstrates how the `v-if` directive creates a new block node. The outer `div` is the root block, and the `div` with the `v-if` directive creates a child block. This nested structure allows Vue to efficiently update the DOM when the condition of the `v-if` directive changes.",
    "codeLanguage": "HTML",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_7",
    "pageTitle": "Vue Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div> <!-- root block -->\n  <div>\n    <div v-if> <!-- if block -->\n      ...\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Destructuring Refs from Composables in Vue.js",
    "codeDescription": "This example shows how to correctly destructure refs returned from a composable while maintaining reactivity. Composables should return plain objects containing refs to allow destructuring without losing the reactivity connection to the internal state of the composable.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_12",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// x and y are refs\nconst { x, y } = useMouse()"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props with Type Validation (Options API)",
    "codeDescription": "This snippet illustrates how to declare props with type validation in a Vue component using the Options API. The component defines 'title' as a String type and 'likes' as a Number type. This provides runtime warnings in the console if incorrect types are passed as props.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_3",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use Custom Element in Vue SFC without Type Definitions",
    "codeDescription": "Demonstrates how to use a custom element in a Vue SFC when the custom element library does not provide type definitions.  It shows how to define types locally and integrate those types with Vue's `GlobalComponents` type. It imports the custom element and the type helper and manually defines the property and event types.",
    "codeLanguage": "vue",
    "codeTokens": 271,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_19",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// Suppose that `some-lib` is plain JS without type definitions, and TypeScript\n// cannot infer the types:\nimport { SomeElement } from 'some-lib'\n\n// We'll use the same type helper as before.\nimport { DefineCustomElement } from './DefineCustomElement'\n\ntype SomeElementProps = { foo?: number; bar?: string }\ntype SomeElementEvents = { 'apple-fell': AppleFellEvent }\ninterface AppleFellEvent extends Event {\n  /* ... */\n}\n\n// Add the new element type to Vue's GlobalComponents type.\ndeclare module 'vue' {\n  interface GlobalComponents {\n    'some-element': DefineCustomElement<\n      SomeElementProps,\n      SomeElementEvents\n    >\n  }\n}\n\n// ... same as before, use a reference to the element ...\n</script>\n\n<template>\n  <!-- ... same as before, use the element in the template ... -->\n</template>"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Define Component with TypeScript",
    "codeDescription": "Demonstrates how to use `defineComponent()` to enable type inference for component options in Vue.js. This includes defining props with their respective types and accessing them within the component's `data` and `mounted` hooks. It showcases type checking for props, data properties, and the component instance (`this`).",
    "codeLanguage": "typescript",
    "codeTokens": 171,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_0",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    name: String,\n    msg: { type: String, required: true }\n  },\n  data() {\n    return {\n      count: 1\n    }\n  },\n  mounted() {\n    this.name // type: string | undefined\n    this.msg // type: string\n    this.count // type: number\n  }\n})"
      }
    ],
    "relevance": 0.93,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Dynamic Import",
    "codeDescription": "This snippet shows how to use `defineAsyncComponent` with ES module dynamic import. Bundlers like Vite and webpack support this syntax and will use it as bundle split points.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_1",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)"
      }
    ],
    "relevance": 0.928,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide Reactive Value in Vue.js",
    "codeDescription": "This code snippet demonstrates providing a reactive value using `ref` and `provide` from Vue.js. It creates a reactive `count` using `ref` and provides it under the key 'key'. This allows descendant components to reactively connect to the provided value. Import both `ref` and `provide` from 'vue'.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_2",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)"
      }
    ],
    "relevance": 0.928,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Inference with ref() in Vue",
    "codeDescription": "This code demonstrates how `ref()` infers its type from the initial value.  `year` is inferred to be `Ref<number>`. Subsequent attempts to assign a string value will result in a TypeScript error.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_15",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// => TS Error: Type 'string' is not assignable to type 'number'.\nyear.value = '2020'"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using onUnmounted to clear interval",
    "codeDescription": "This example demonstrates the usage of the `onUnmounted` lifecycle hook to clear an interval. This is important for cleaning up side effects and preventing memory leaks. It imports `onMounted` and `onUnmounted` from 'vue', sets up an interval in `onMounted`, and clears the interval in `onUnmounted`.",
    "codeLanguage": "vue",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_2",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n  intervalId = setInterval(() => {\n    // ...\n  })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Content to Named Slots (Vue)",
    "codeDescription": "This snippet shows how to pass content to named slots in a parent component using the `<template v-slot:header>` syntax (or the shorthand `<template #header>`). Each `<template>` targets a specific slot in the `BaseLayout` component.",
    "codeLanguage": "vue-html",
    "codeTokens": 154,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_11",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<BaseLayout>\n  <template #header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template #default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-slot Usage Examples in Vue.js",
    "codeDescription": "Illustrates the use of v-slot for defining named slots and scoped slots in Vue.js components.  Examples show how to pass data to slots using props and destructuring. v-slot facilitates flexible content distribution and customization within components.",
    "codeLanguage": "vue-html",
    "codeTokens": 208,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_7",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Named slots -->\n<BaseLayout>\n  <template v-slot:header>\n    Header content\n  </template>\n\n  <template v-slot:default>\n    Default slot content\n  </template>\n\n  <template v-slot:footer>\n    Footer content\n  </template>\n</BaseLayout>\n\n<!-- Named slot that receives props -->\n<InfiniteScroll>\n  <template v-slot:item=\"slotProps\">\n    <div class=\"item\">\n      {{ slotProps.item.text }}\n    </div>\n  </template>\n</InfiniteScroll>\n\n<!-- Default slot that receive props, with destructuring -->\n<Mouse v-slot=\"{ x, y }\">\n  Mouse position: {{ x }}, {{ y }}\n</Mouse>"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using `aria-describedby` for Input Description",
    "codeDescription": "This code demonstrates how to use the `aria-describedby` attribute to provide a description for an input field. The `aria-describedby` attribute references the `id` of another element (usually a paragraph) to use its content as the description of the input field. This description provides additional information or instructions to the user.",
    "codeLanguage": "HTML",
    "codeTokens": 215,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_9",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <h1 id=\"billing\">Billing</h1>\n  <div class=\"form-item\">\n    <label for=\"name\">Full Name: </label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id=\"name\"\n      v-model=\"name\"\n      aria-labelledby=\"billing name\"\n      aria-describedby=\"nameDescription\"\n    />\n    <p id=\"nameDescription\">Please provide first and last name.</p>\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Converting Reactive Object to Refs in Vue.js (toRefs)",
    "codeDescription": "The `toRefs` function converts a reactive object to a plain object where each property is a ref pointing to the corresponding property of the original reactive object. This enables destructuring without losing reactivity.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_4",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function toRefs<T extends object>(\n  object: T\n): {\n  [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>"
      },
      {
        "language": "javascript",
        "code": "const state = reactive({\n  foo: 1,\n  bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n  foo: Ref<number>,\n  bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3"
      },
      {
        "language": "javascript",
        "code": "function useFeatureX() {\n  const state = reactive({\n    foo: 1,\n    bar: 2\n  })\n\n  // ...logic operating on state\n\n  // convert to refs when returning\n  return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props with the `props` option (Composition API)",
    "codeDescription": "This JavaScript snippet shows how to declare props using the `props` option in a Vue component when not using `<script setup>`. The component defines a 'foo' prop and logs its value within the `setup` function. The `setup` function receives the props as its first argument.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_1",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Event Handler Definition (Options API)",
    "codeDescription": "Defines a `warn` method within the `methods` object of a Vue component. It receives a `message` and an `event` object, preventing the default behavior if an event object is passed. This showcases how to access and handle the native event object within a method handler using the Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_11",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "methods: {\n  warn(message, event) {\n    // now we have access to the native event\n    if (event) {\n      event.preventDefault()\n    }\n    alert(message)\n  }\n}"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Default Values for Type-Based Props TypeScript",
    "codeDescription": "Shows how to use JavaScript's native default value syntax to declare default values for props when using type-based props declaration with `defineProps`.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_14",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component setup with reactive and ref in Vue.js",
    "codeDescription": "This code snippet shows how to set up a Vue component using the `setup()` function. It declares reactive state with `reactive()` and `ref()`, and returns them as properties to be used in the template.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_2",
    "pageTitle": "Vue.js Declarative Rendering",
    "codeList": [
      {
        "language": "javascript",
        "code": "setup() {\n  const counter = reactive({ count: 0 })\n  const message = ref('Hello World!')\n  return {\n    counter,\n    message\n  }\n}"
      }
    ],
    "relevance": 0.925,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Complex Slot Content Vue.js",
    "codeDescription": "This code snippet demonstrates passing more complex slot content to the `<FancyButton>` component, including a `<span>` element with inline styling and an `AwesomeIcon` component.  The parent can provide arbitrary template code as slot content.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_4",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyButton>\n  <span style=\"color:red\">Click me!</span>\n  <AwesomeIcon name=\"plus\" />\n</FancyButton>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Handling Event Arguments in Composition API Vue JavaScript",
    "codeDescription": "This snippet demonstrates handling event arguments within the Composition API. The function `increaseCount` receives the event argument `n` and adds it to the reactive `count.value`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_9",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "function increaseCount(n) {\n  count.value += n\n}"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Tracking Runtime Errors with App-Level Error Handler in Vue.js",
    "codeDescription": "This code snippet demonstrates how to use the app-level error handler in Vue.js to report runtime errors to tracking services. It configures the `app.config.errorHandler` to catch errors, the instance where the error occurred, and additional information, enabling integration with services like Sentry or Bugsnag for error monitoring.",
    "codeLanguage": "JavaScript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/production-deployment.md#_snippet_0",
    "pageTitle": "Vue.js Production Deployment Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Data Fetching Composable Vue",
    "codeDescription": "This Vue component demonstrates how to use the `useFetch` composable to fetch and display data. It imports the `useFetch` composable, calls it with a URL, and destructures the returned `data` and `error` refs. The template then utilizes these reactive values to display the fetched data or an error message.",
    "codeLanguage": "vue",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_7",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Watcher with watchEffect() in Vue.js",
    "codeDescription": "Creates a watcher that immediately runs a function while reactively tracking its dependencies. It re-runs the function whenever the dependencies are changed, by default, watchers run just prior to component rendering.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_9",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\ncount.value++\n// -> logs 1"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Plugin - Vue.js",
    "codeDescription": "Illustrates how to define a Vue.js plugin as an object with an `install()` method. The `install()` method receives the application instance (`app`) and any options passed during installation, allowing the plugin to configure the application as needed. This provides a structured way to encapsulate plugin logic.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_1",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Semantic HTML Form Example",
    "codeDescription": "This code shows a basic HTML form structure using semantic elements. It leverages a `v-for` loop to dynamically generate form items based on the `formItems` data.  It also includes autocomplete functionality and a submit button.",
    "codeLanguage": "HTML",
    "codeTokens": 168,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_5",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      :type=\"item.type\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Ref from Value/Getter/Reactive Prop in Vue.js (toRef)",
    "codeDescription": "The `toRef` function creates a ref from a value, getter, or reactive object property. In the case of an object property, the created ref is synced with the original property, enabling two-way data binding.",
    "codeLanguage": "typescript",
    "codeTokens": 172,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_2",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// normalization signature (3.3+)\nfunction toRef<T>(\n  value: T\n): T extends () => infer R\n  ? Readonly<Ref<R>>\n  : T extends Ref\n  ? T\n  : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n  object: T,\n  key: K,\n  defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>"
      },
      {
        "language": "javascript",
        "code": "// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)"
      },
      {
        "language": "javascript",
        "code": "const state = reactive({\n  foo: 1,\n  bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3"
      },
      {
        "language": "javascript",
        "code": "const fooRef = ref(state.foo)"
      },
      {
        "language": "vue",
        "code": "<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactivity with Refs Vue",
    "codeDescription": "Shows how to create reactive state using the `ref` function from Vue's reactivity APIs.  Refs are automatically unwrapped when referenced in templates. This example creates a reactive `count` variable.",
    "codeLanguage": "vue",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_3",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing Reactive Data in Vue (Composition API)",
    "codeDescription": "This snippet demonstrates providing reactive data using the `provide` function in Vue.js Composition API.  It defines a `location` ref and a function `updateLocation` to mutate it, then provides both to the child component. The lines highlighted with {7-9,13} are the `updateLocation` function and the destructuring of the injected object.",
    "codeLanguage": "vue",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_14",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- inside provider component -->\n<script setup>\nimport { provide, ref } from 'vue'\n\nconst location = ref('North Pole')\n\nfunction updateLocation() {\n  location.value = 'South Pole'\n}\n\nprovide('location', {\n  location,\n  updateLocation\n})\n</script>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Reactive State with reactive() in Vue",
    "codeDescription": "This example shows how to use the `reactive()` API to create reactive state in Vue. The `reactive()` function takes an object and returns a reactive proxy of that object, allowing Vue to track changes to its properties.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_17",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { reactive } from 'vue'\n\nconst state = reactive({ count: 0 })"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Style Properties data properties (Options API)",
    "codeDescription": "Defines data properties within Vue's Options API to store style properties such as 'activeColor' and 'fontSize'. These properties can then be bound to the `style` attribute for dynamic styling.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_21",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template Ref Attribute Vue HTML",
    "codeDescription": "Demonstrates the basic usage of the `ref` attribute in a Vue template. The `ref` attribute allows obtaining a direct reference to a specific DOM element after it's mounted. The value of the `ref` attribute is a string that serves as the reference name.",
    "codeLanguage": "html",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_0",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "html",
        "code": "<input ref=\"input\">"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Writable Computed Ref in Vue.js",
    "codeDescription": "Shows how to create a writable computed ref using the `computed()` function with a `get` and `set` object. This allows modifying the computed value, which in turn updates the underlying reactive value.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_2",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Teleporting the Modal",
    "codeDescription": "This snippet demonstrates how to use the <Teleport> component to move the modal's content to the body tag. The to prop specifies the target element, which can be a CSS selector or a DOM node. This allows the modal to break out of the nested DOM structure and avoid potential styling and z-index issues.",
    "codeLanguage": "vue-html",
    "codeTokens": 147,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_3",
    "pageTitle": "Vue.js Teleport Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Default Props with Typescript in Vue",
    "codeDescription": "This code snippet demonstrates how to define default values for props when using TypeScript with Vue. It uses the `withDefaults` compiler macro to provide type checks for the default values and ensures that the returned `props` type has the optional flags removed for properties that do have default values declared.",
    "codeLanguage": "typescript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_15",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Radio Buttons with v-model (Vue HTML)",
    "codeDescription": "Example of binding radio buttons to a 'picked' ref. When a radio button is selected, its value is assigned to the 'picked' ref.",
    "codeLanguage": "vue-html",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_10",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Reactive Wrapper for Composables in Vue.js",
    "codeDescription": "This code demonstrates how to use `reactive()` to wrap the return value of a composable function, allowing access to the returned state as object properties while maintaining reactivity. This approach unwraps the refs so they can be accessed directly.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_13",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "const mouse = reactive(useMouse())\n// mouse.x is linked to original ref\nconsole.log(mouse.x)"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Input with Computed Property",
    "codeDescription": "Another way of implementing `v-model` within a custom input component is to use a writable `computed` property with both a getter and a setter.",
    "codeLanguage": "vue",
    "codeTokens": 134,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_10",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- CustomInput.vue -->\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  computed: {\n    value: {\n      get() {\n        return this.modelValue\n      },\n      set(value) {\n        this.$emit('update:modelValue', value)\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <input v-model=\"value\" />\n</template>"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Installing i18n Plugin with Translations - Vue.js",
    "codeDescription": "Shows how to install the i18n plugin and pass a configuration object containing the translations. The configuration object is passed as the second argument to `app.use()`, providing the translated values that the `$translate` method will use.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_5",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})"
      }
    ],
    "relevance": 0.92,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "List Rendering with v-for in Vue",
    "codeDescription": "This code snippet demonstrates how to use the `v-for` directive in Vue.js to render a list of `<li>` elements based on the `todos` array.  The `key` attribute is bound to a unique `id` for each todo object to improve rendering performance and handle list updates efficiently.",
    "codeLanguage": "vue-html",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_0",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"todo in todos\" :key=\"todo.id\">\n    {{ todo.text }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing created Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `created` lifecycle hook, which is called after a Vue.js component instance has finished processing all state-related options, such as reactive data, computed properties, methods, and watchers. The mounting phase has not yet started when this hook is called.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_1",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  created?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Listening to Events with .once Modifier Vue HTML",
    "codeDescription": "This snippet demonstrates how to use the `.once` modifier with `v-on` to ensure that a listener is only triggered once. The `callback` function is executed only the first time `MyComponent` emits `some-event`.",
    "codeLanguage": "Vue-HTML",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_4",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue-HTML",
        "code": "<MyComponent @some-event.once=\"callback\" />"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Emits with defineComponent in Vue",
    "codeDescription": "This example shows how to use `defineComponent()` to type the `emit` function when not using `<script setup>`. `defineComponent` infers the allowed events based on the `emits` option, enabling type checking and autocompletion.",
    "codeLanguage": "typescript",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_14",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: ['change'],\n  setup(props, { emit }) {\n    emit('change') // <-- type check / auto-completion\n  }\n})"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "CSS Modules with Composition API - JavaScript",
    "codeDescription": "Illustrates how to access CSS Modules classes within the `setup()` function using the `useCssModule` API. This allows for dynamic class binding based on component state. Accepts the module name as argument.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_9",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { useCssModule } from 'vue'\n\n// inside setup() scope...\n// default, returns classes for <style module>\nuseCssModule()\n\n// named, returns classes for <style module=\"classes\">\nuseCssModule('classes')"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mouse Tracking Component (Direct Implementation) Vue",
    "codeDescription": "This Vue component demonstrates mouse tracking functionality using the Composition API directly within the component. It uses `ref` to create reactive state for the x and y coordinates of the mouse, and `onMounted` and `onUnmounted` lifecycle hooks to add and remove the mousemove event listener. The template displays the current mouse position.",
    "codeLanguage": "vue",
    "codeTokens": 183,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_0",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Basic Usage",
    "codeDescription": "Illustrates how to wrap a dynamic component with `<KeepAlive>` to cache the component instance and persist its state when switching away from it. This prevents the component from being unmounted and recreated.",
    "codeLanguage": "vue-html",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_1",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Inactive components will be cached! -->\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Props with Validation and Options in Vue.js",
    "codeDescription": "This code demonstrates the object-based syntax for declaring props in Vue.js, allowing for type validation, default values, required status, and custom validators. Each prop is defined as a key-value pair, where the key is the prop name, and the value is an object containing options such as `type`, `default`, `required`, and `validator`.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_3",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    // type check\n    height: Number,\n    // type check plus other validations\n    age: {\n      type: Number,\n      default: 0,\n      required: true,\n      validator: (value) => {\n        return value >= 0\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Props Destructure Example with watchEffect",
    "codeDescription": "This example showcases reactive props destructuring in Vue 3.5+ within `<script setup>`. The `watchEffect` automatically re-runs when the destructured 'foo' prop changes due to compiler transformation. This snippet requires Vue 3.5 or higher for the reactive destructuring to work as expected.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_6",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Basic Usage - Vue HTML",
    "codeDescription": "This example demonstrates the basic usage of the `<KeepAlive>` component. It wraps a dynamic component (`<component :is=\"view\">`), caching the component instance when it's not active.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_6",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<KeepAlive>\n  <component :is=\"view\"></component>\n</KeepAlive>"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Component with Fallback Content Vue.js",
    "codeDescription": "This code snippet shows how to use the `<SubmitButton>` component without providing any slot content. In this case, the fallback content defined in the component will be rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_6",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<SubmitButton />"
      }
    ],
    "relevance": 0.915,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use component-scoped styling - Good Example 1 - HTML/CSS (Scoped Attribute)",
    "codeDescription": "Demonstrates the correct way of styling components using the `scoped` attribute in Single-File Components. This ensures that the styles only apply to the current component, preventing style conflicts.",
    "codeLanguage": "vue-html",
    "codeTokens": 114,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_16",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"button button-close\">×</button>\n</template>\n\n<!-- Using the `scoped` attribute -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.912,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-on Directive for Event Handling in Vue.js",
    "codeDescription": "These snippets illustrate various ways to use the `v-on` directive (shorthand `@`) in Vue.js for event handling. It can attach listeners to native DOM events or custom events emitted by child components. The directive supports modifiers for event propagation, default prevention, key filtering, and more. It can also accept an object of event/listener pairs.",
    "codeLanguage": "vue-html",
    "codeTokens": 285,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_5",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- method handler -->\n<button v-on:click=\"doThis\"></button>\n\n<!-- dynamic event -->\n<button v-on:[event]=\"doThis\"></button>\n\n<!-- inline statement -->\n<button v-on:click=\"doThat('hello', $event)\"></button>\n\n<!-- shorthand -->\n<button @click=\"doThis\"></button>\n\n<!-- shorthand dynamic event -->\n<button @[event]=\"doThis\"></button>\n\n<!-- stop propagation -->\n<button @click.stop=\"doThis\"></button>\n\n<!-- prevent default -->\n<button @click.prevent=\"doThis\"></button>\n\n<!-- prevent default without expression -->\n<form @submit.prevent></form>\n\n<!-- chain modifiers -->\n<button @click.stop.prevent=\"doThis\"></button>\n\n<!-- key modifier using keyAlias -->\n<input @keyup.enter=\"onEnter\" />\n\n<!-- the click event will be triggered at most once -->\n<button v-on:click.once=\"doThis\"></button>\n\n<!-- object syntax -->\n<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>"
      },
      {
        "language": "vue-html",
        "code": "<MyComponent @my-event=\"handleThis\" />\n\n<!-- inline statement -->\n<MyComponent @my-event=\"handleThis(123, $event)\" />"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-for with Props",
    "codeDescription": "Demonstrates how to pass data to a component when using `v-for`. The `item` and `index` from the loop are passed as props to the `MyComponent`, making the data accessible within the component's scope.  The key prop is essential for Vue's reactivity system to track changes efficiently.",
    "codeLanguage": "vue-html",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_22",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "useModel() Usage Example - JavaScript",
    "codeDescription": "Demonstrates how to use `useModel()` within a component's setup function in JavaScript. It shows how to bind a prop named 'count' using `useModel` and update its value. This snippet requires the `props` to be defined along with corresponding `emits`.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_3",
    "pageTitle": "Vue Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n    props: ['count'],\n    emits: ['update:count'],\n    setup(props) {\n      const msg = useModel(props, 'count')\n      msg.value = 1\n    }\n  }"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Unwrapping a Ref Value in Vue.js (unref)",
    "codeDescription": "The `unref` function returns the inner value of a ref, or the value itself if it's not a ref. It's a utility to simplify accessing the underlying value, ensuring that you are working with a plain value regardless of whether it's wrapped in a ref.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_1",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function unref<T>(ref: T | Ref<T>): T"
      },
      {
        "language": "typescript",
        "code": "function useFoo(x: number | Ref<number>) {\n  const unwrapped = unref(x)\n  // unwrapped is guaranteed to be number now\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Adding a Global Translation Method - Vue.js",
    "codeDescription": "Demonstrates how to add a globally available translation method (`$translate`) to a Vue.js application using a plugin. It attaches the method to `app.config.globalProperties`, allowing it to be accessed from any template. The method retrieves nested properties from the plugin's options based on a dot-delimited key.",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_3",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    // inject a globally available $translate() method\n    app.config.globalProperties.$translate = (key) => {\n      // retrieve a nested property in `options`\n      // using `key` as the path\n      return key.split('.').reduce((o, i) => {\n        if (o) return o[i]\n      }, options)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Increment Function in Vue Composition API (SFC)",
    "codeDescription": "This code defines a Vue component using the Composition API within a Single-File Component (SFC). It uses `ref` to create a reactive `count` variable and defines an `increment` function that increments the `count`'s value when called.  It highlights the usage of `ref` and updating its `.value`.",
    "codeLanguage": "vue",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_4",
    "pageTitle": "Vue.js Event Listener Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  // update component state\n  count.value++\n}\n</script>"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Post-Flush Watcher (Options API) - JavaScript",
    "codeDescription": "This shows how to define a post-flush watcher in the Options API.  The `flush: 'post'` option ensures the callback is executed after the owner component's DOM has been updated.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_18",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // ...\n  watch: {\n    key: {\n      handler() {},\n      flush: 'post'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Parent-Child Communication with Events (Composition API) - Good",
    "codeDescription": "This code demonstrates the preferred pattern for parent-child component communication using events with Composition API.  The child component emits an event to notify the parent of a change, and the parent handles the event. The `defineEmits` function is used to declare emitted events.",
    "codeLanguage": "vue",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_5",
    "pageTitle": "Vue.js Priority D Rules: Use with Caution",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['input'])\n</script>\n\n<template>\n  <input :value=\"todo.text\" @input=\"emit('input', $event.target.value)\" />\n</template>\n"
      },
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['delete'])\n</script>\n\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"emit('delete')\">×</button>\n  </span>\n</template>\n"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject value using setup function in Vue.js",
    "codeDescription": "This code snippet illustrates injecting a value using the `inject` function within the `setup()` function (when not using `<script setup>`).  The `inject` function retrieves the provided value based on the given injection key.  Ensure to import `inject` from 'vue' and return the injected value from the `setup` function.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_7",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    const message = inject('message')\n    return { message }\n  }\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Boolean Prop in Template",
    "codeDescription": "This snippet shows how to use the boolean prop 'disabled' in a Vue.js template. The presence of the `disabled` attribute is interpreted as `true`, while its absence is interpreted as `false`.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_26",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- equivalent of passing :disabled=\"true\" -->\n<MyComponent disabled />\n\n<!-- equivalent of passing :disabled=\"false\" -->\n<MyComponent />"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props with Type Validation (Composition API)",
    "codeDescription": "This snippet demonstrates how to declare props with type validation in a Vue component using the Composition API with `defineProps`. The component defines 'title' as a String type and 'likes' as a Number type.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_4",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})\n"
      },
      {
        "language": "javascript",
        "code": "// in non-<script setup>\nexport default {\n  props: {\n    title: String,\n    likes: Number\n  }\n}\n"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Global Component Registration in Vue.js",
    "codeDescription": "Demonstrates how to register a component globally using the `.component()` method on a Vue application instance. This makes the component available in all templates within the application. The example shows registering both a component implementation and an imported .vue file.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_0",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Prop Name Casing in props option (Options API)",
    "codeDescription": "Example of prop name casing using props options in Options API. The 'greetingMessage' is declared as a camelCase prop.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_9",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    greetingMessage: String\n  }\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering List with Index and Parent Message in Vue",
    "codeDescription": "This snippet uses `v-for` to iterate over an array and display a message that includes the parent message, the index of the item, and the item's message. This demonstrates accessing variables from both the parent scope and the current iteration.",
    "codeLanguage": "html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_5",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic Watcher in Composition API (Vue.js)",
    "codeDescription": "This code snippet illustrates a basic watcher implementation in Vue.js using the Composition API. It imports 'ref' and 'watch' from 'vue', creates reactive variables for 'question', 'answer', and 'loading', and then uses 'watch' to monitor changes to the 'question' ref. When the question includes a question mark, it fetches data from an API and updates the 'answer' ref.",
    "codeLanguage": "javascript",
    "codeTokens": 295,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_3",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "<script setup>\nimport { ref, watch } from 'vue'\n\nconst question = ref('')\nconst answer = ref('Questions usually contain a question mark. ;-)')\nconst loading = ref(false)\n\n// watch works directly on a ref\nwatch(question, async (newQuestion, oldQuestion) => {\n  if (newQuestion.includes('?')) {\n    loading.value = true\n    answer.value = 'Thinking...'\n    try {\n      const res = await fetch('https://yesno.wtf/api')\n      answer.value = (await res.json()).answer\n    } catch (error) {\n      answer.value = 'Error! Could not reach the API. ' + error\n    } finally {\n      loading.value = false\n    }\n  }\n})\n</script>\n\n<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" :disabled=\"loading\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Component Rendering - JavaScript",
    "codeDescription": "This snippet shows how to dynamically render components using the `h()` function based on a condition. It imports `Foo` and `Bar` components and conditionally renders either `Foo` or `Bar` based on the value of `ok.value`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_20",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import Foo from './Foo.vue'\nimport Bar from './Bar.jsx'\n\nfunction render() {\n  return ok.value ? h(Foo) : h(Bar)\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Key Modifiers Example",
    "codeDescription": "Demonstrates how to use key modifiers in Vue.js to listen for specific keyboard events. The `@keyup.enter` modifier ensures that the `submit` method is only called when the Enter key is pressed. Similarly `@keyup.page-down` ensures `onPageDown` is only called when the PageDown key is pressed.",
    "codeLanguage": "vue-html",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_13",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\" />"
      },
      {
        "language": "vue-html",
        "code": "<input @keyup.page-down=\"onPageDown\" />"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Composition API Example",
    "codeDescription": "Demonstrates a basic Vue component using Composition API with `<script setup>`. It defines a reactive `count` state, an `increment` function to update the state, and a `onMounted` lifecycle hook to log the initial count.  The template renders a button that increments the count when clicked.",
    "codeLanguage": "vue",
    "codeTokens": 169,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/composition-api-faq.md#_snippet_0",
    "pageTitle": "Vue Composition API FAQ",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Local Component Registration in Vue.js (Options API)",
    "codeDescription": "Demonstrates how to register a component locally using the `components` option in a Vue.js component definition (Options API, without `<script setup>`). This makes the component available only within the current component's template. The example imports the component and registers it in the `components` object.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_5",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Reactive Store - JavaScript",
    "codeDescription": "This JavaScript module creates a reactive store using Vue's `reactive` API.  The store contains a `count` property initialized to 0. It is designed to be imported and used across multiple components to share state.",
    "codeLanguage": "JavaScript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_2",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Prop as Initial Data (Composition API)",
    "codeDescription": "This snippet shows how to use a prop as the initial value for a local data property using Composition API. The `initialCounter` prop is used to initialize the `counter` ref, disconnecting it from future prop updates.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_14",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['initialCounter'])\n\n// counter only uses props.initialCounter as the initial value;\n// it is disconnected from future prop updates.\nconst counter = ref(props.initialCounter)"
      }
    ],
    "relevance": 0.91,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use component-scoped styling - Good Example 3 - HTML/CSS (BEM)",
    "codeDescription": "Demonstrates the correct way of styling components using the BEM convention in Single-File Components. This provides human-readable class names that are unlikely to conflict.",
    "codeLanguage": "vue-html",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_18",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"c-Button c-Button--close\">×</button>\n</template>\n\n<!-- Using the BEM convention -->\n<style>\n.c-Button {\n  border: none;\n  border-radius: 2px;\n}\n\n.c-Button--close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.908,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Template Ref in Vue",
    "codeDescription": "This code snippet demonstrates how to create a template ref in Vue using the `ref` attribute in the HTML template. The `ref` attribute allows you to obtain a reference to a specific DOM element.",
    "codeLanguage": "vue-html",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_0",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p ref=\"pElementRef\">hello</p>"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Text Input Binding with v-model (Simplified) (Vue HTML)",
    "codeDescription": "A simplified version of the text input binding using v-model. This directive handles both the value binding and the input event listener, reducing boilerplate code.",
    "codeLanguage": "vue-html",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_1",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model=\"text\">\n"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Namespaced Components Vue",
    "codeDescription": "Illustrates the usage of component tags with dots (e.g., `<Foo.Bar>`) to refer to components nested under object properties, which is useful when importing multiple components from a single file.",
    "codeLanguage": "vue",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_7",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport * as Form from './form-components'\n</script>\n\n<template>\n  <Form.Input>\n    <Form.Label>label</Form.Label>\n  </Form.Input>\n</template>"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mixins Option: Basic Usage (Vue.js)",
    "codeDescription": "Demonstrates how to use the `mixins` option to include shared logic in a Vue.js component. Mixins can contain component options such as lifecycle hooks, which are merged with the component's own options.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_8",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const mixin = {\n  created() {\n    console.log(1)\n  }\n}\n\ncreateApp({\n  created() {\n    console.log(2)\n  },\n  mixins: [mixin]\n})\n\n// => 1\n// => 2"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Template Refs with useTemplateRef in Vue.js",
    "codeDescription": "This example demonstrates how to explicitly type a template ref using `useTemplateRef` and a generic type argument. This is useful when auto-inference is not possible or when you need to ensure a specific type for the referenced DOM element. Requires Vue 3.5+ and @vue/language-tools 2.1+ for optimal inference.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_29",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const el = useTemplateRef<HTMLInputElement>('el')"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Option Usage Example JavaScript",
    "codeDescription": "Demonstrates how to use the `watch` option in a Vue.js component to observe changes in data properties, including nested properties and using different callback configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 417,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_8",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      a: 1,\n      b: 2,\n      c: {\n        d: 4\n      },\n      e: 5,\n      f: 6\n    }\n  },\n  watch: {\n    // watching top-level property\n    a(val, oldVal) {\n      console.log(`new: ${val}, old: ${oldVal}`)\n    },\n    // string method name\n    b: 'someMethod',\n    // the callback will be called whenever any of the watched object properties change regardless of their nested depth\n    c: {\n      handler(val, oldVal) {\n        console.log('c changed')\n      },\n      deep: true\n    },\n    // watching a single nested property:\n    'c.d': function (val, oldVal) {\n      // do something\n    },\n    // the callback will be called immediately after the start of the observation\n    e: {\n      handler(val, oldVal) {\n        console.log('e changed')\n      },\n      immediate: true\n    },\n    // you can pass array of callbacks, they will be called one-by-one\n    f: [\n      'handle1',\n      function handle2(val, oldVal) {\n        console.log('handle2 triggered')\n      },\n      {\n        handler: function handle3(val, oldVal) {\n          console.log('handle3 triggered')\n        }\n        /* ... */\n      }\n    ]\n  },\n  methods: {\n    someMethod() {\n      console.log('b changed')\n    },\n    handle1() {\n      console.log('handle 1 triggered')\n    }\n  },\n  created() {\n    this.a = 3 // => new: 3, old: 1\n  }\n}"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model Modifier Handling (Options API)",
    "codeDescription": "Explains how to handle custom `v-model` modifiers using the Options API in Vue.js. It defines a `modelModifiers` prop and demonstrates how to check for modifiers and change the emitted value. Requires Vue.js framework.",
    "codeLanguage": "vue",
    "codeTokens": 193,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_23",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitValue(e) {\n      let value = e.target.value\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1)\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\n</template>"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method for Filtering (Composition API)",
    "codeDescription": "Shows how to use a method to filter an array in Vue.js using the Composition API. The `even` method filters an array of numbers and returns a new array containing only the even numbers. This is useful in situations where computed properties are not feasible, such as inside nested `v-for` loops.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_28",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "const sets = ref([\n  [1, 2, 3, 4, 5],\n  [6, 7, 8, 9, 10]\n])\n\nfunction even(numbers) {\n  return numbers.filter((number) => number % 2 === 0)\n}"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "In-Browser Config for Custom Elements in Vue",
    "codeDescription": "This snippet demonstrates how to configure Vue in the browser to treat HTML tags containing a hyphen as custom elements. This configuration prevents Vue from attempting to resolve them as Vue components, avoiding warnings.",
    "codeLanguage": "JavaScript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_0",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// Only works if using in-browser compilation.\n// If using build tools, see config examples below.\napp.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed classObject (Composition API)",
    "codeDescription": "Creates a computed property using Vue's Composition API that returns a class object based on reactive values.  This enables more complex logic for determining class application.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_7",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))"
      }
    ],
    "relevance": 0.905,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using $ref macro in Vue component",
    "codeDescription": "This snippet demonstrates how to use the `$ref` macro within a Vue component's `<script setup>` block to create a reactive variable `count`. The compiler transforms this into a standard `ref` usage, eliminating the need for `.value` in the template.",
    "codeLanguage": "vue",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_0",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nlet count = $ref(0)\n\nconsole.log(count)\n\nfunction increment() {\n  count++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.902,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Explicitly Typing Reactive Properties in Vue",
    "codeDescription": "This snippet shows how to explicitly type a `reactive` property using interfaces. The `book` reactive object is explicitly typed using the `Book` interface, providing type safety for its properties.",
    "codeLanguage": "typescript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_20",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { reactive } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })"
      }
    ],
    "relevance": 0.902,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "List Rendering with Key Attribute in Vue",
    "codeDescription": "This code demonstrates the usage of the `key` attribute within a `v-for` directive in Vue.js. The `key` attribute helps Vue's virtual DOM efficiently update and re-render list items.  It expects a unique `number`, `string`, or `symbol` for each item.",
    "codeLanguage": "Vue",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_0",
    "pageTitle": "Vue.js Built-in Special Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Replacing Array (Composition API)",
    "codeDescription": "Shows how to replace an array in Vue.js using the Composition API. The example filters an array of items and assigns the new, filtered array to the `items.value` ref. This approach ensures that Vue's reactivity system detects the change and updates the DOM accordingly.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_23",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Ref Example - JavaScript",
    "codeDescription": "Shows how to use the `watch` function in Vue.js to watch a ref. The callback function will be executed when the ref's value changes, providing the new and previous values.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_17",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Attribute Binding Escaping in Vue.js - Example String",
    "codeDescription": "This is an example of a string that contains an onclick attribute that could be used for an XSS attack, it will be escaped.",
    "codeLanguage": "JavaScript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_5",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "'\" onclick=\"alert(\\'hi\\')'"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mouse Tracking Composable JavaScript",
    "codeDescription": "This JavaScript file defines a `useMouse` composable function that tracks the mouse position using Vue's Composition API. It uses `ref` to create reactive state for the x and y coordinates and `onMounted` and `onUnmounted` to manage the mousemove event listener. The composable returns the x and y coordinates as a reactive object.",
    "codeLanguage": "javascript",
    "codeTokens": 258,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_1",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing Custom Directives Vue",
    "codeDescription": "Demonstrates importing a custom directive and renaming it to fit the required naming scheme `vNameOfDirective` for use in `<script setup>`.",
    "codeLanguage": "vue",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_9",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { myDirective as vMyDirective } from './MyDirective.js'\n</script>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive with v-if / v-else - Vue HTML",
    "codeDescription": "This example shows how to use `<KeepAlive>` with `v-if` and `v-else` directives. Only one component should be rendered at a time within the `<KeepAlive>` component.",
    "codeLanguage": "vue-html",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_7",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<KeepAlive>\n  <comp-a v-if=\"a > 1\"></comp-a>\n  <comp-b v-else></comp-b>\n</KeepAlive>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Writable Computed Property (Composition API)",
    "codeDescription": "This snippet defines a writable computed property `fullName` using the Composition API.  It imports `ref` and `computed`, creates reactive refs for `firstName` and `lastName`, and then defines the `fullName` computed property with a `get` and `set`. The getter combines the first and last names, and the setter splits the new value to update the individual refs. Destructuring assignment is used.",
    "codeLanguage": "vue",
    "codeTokens": 196,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_12",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst firstName = ref('John')\nconst lastName = ref('Doe')\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value\n  },\n  // setter\n  set(newValue) {\n    // Note: we are using destructuring assignment syntax here.\n    [firstName.value, lastName.value] = newValue.split(' ')\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering a Custom Directive",
    "codeDescription": "This JavaScript code demonstrates how to register a custom directive named `focus` within a Vue.js component. The directive automatically focuses the element it's bound to when the component is mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_7",
    "pageTitle": "Vue.js Component Options: Misc",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  directives: {\n    // enables v-focus in template\n    focus: {\n      mounted(el) {\n        el.focus()\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Mouse Tracking Composable Vue",
    "codeDescription": "This Vue component utilizes the `useMouse` composable function to track and display the mouse position. It imports the composable and destructures the returned reactive values (x and y) to be used in the template.  This demonstrates how to consume the stateful logic encapsulated within the `useMouse` composable.",
    "codeLanguage": "vue",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_2",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Text Input with v-model (Vue HTML)",
    "codeDescription": "Example of binding a text input to a 'message' ref using v-model. Any changes to the input field will automatically update the value of the 'message' ref, and vice versa.",
    "codeLanguage": "vue-html",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_2",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Named Scoped Slots in Vue.js",
    "codeDescription": "This code demonstrates how to use named scoped slots in a Vue.js component.  It defines three named slots (header, default, and footer) and passes slot props to each.  The v-slot directive is used to access these props within the template.",
    "codeLanguage": "vue-html",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_21",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent>\n  <template #header=\"headerProps\">\n    {{ headerProps }}\n  </template>\n\n  <template #default=\"defaultProps\">\n    {{ defaultProps }}\n  </template>\n\n  <template #footer=\"footerProps\">\n    {{ footerProps }}\n  </template>\n</MyComponent>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template with Computed Property",
    "codeDescription": "This code shows how to use a computed property within a Vue.js template.  It displays the value of the `publishedBooksMessage` computed property within a `<span>` element. Vue automatically updates the display whenever the computed property's dependencies change.",
    "codeLanguage": "vue-html",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_4",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p>Has published books:</p>\n<span>{{ publishedBooksMessage }}</span>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Object with Options API in Vue",
    "codeDescription": "This code snippet shows how to initialize an object in the `data` option when using the Options API in Vue.  This makes the object available to the Vue component.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_11",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Prop Validation (Composition API)",
    "codeDescription": "This snippet demonstrates prop validation using the `defineProps` macro in Composition API. It shows how to specify different types, required props, default values, and custom validators for props.",
    "codeLanguage": "javascript",
    "codeTokens": 372,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_18",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Read-Only Computed Ref in Vue.js",
    "codeDescription": "Demonstrates how to create a read-only computed ref using the `computed()` function, which takes a getter function and returns a readonly reactive ref object. Attempts to modify the value of a read-only computed ref will result in an error.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_1",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // error"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Emits with Options-Based Declaration in Vue",
    "codeDescription": "This example shows how to define component emits with TypeScript using an options-based approach with `defineEmits`. This allows you to specify validation functions for each emitted event.",
    "codeLanguage": "vue",
    "codeTokens": 138,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_11",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bind Click Event to Method Handler",
    "codeDescription": "This snippet demonstrates how to bind a click event to a method handler named `greet` using the `@click` directive in a Vue template. When the button is clicked, the `greet` method defined in the component will be executed. The method name is referenced directly without parentheses.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_5",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering List with v-for in Vue Template",
    "codeDescription": "This code snippet shows how to use the `v-for` directive in a Vue template to render a list of items. It iterates over the `items` array and displays the `message` property of each item within an `<li>` element.",
    "codeLanguage": "html",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_2",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"item in items\">\n  {{ item.message }}\n</li>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Exposing Top-Level Bindings Vue",
    "codeDescription": "Illustrates how top-level bindings (variables, function declarations, and imports) declared inside `<script setup>` are directly usable in the template. The example shows a variable `msg` and a function `log` being used in the template.",
    "codeLanguage": "vue",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_1",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Stopping a Watcher with $watch (Options API)",
    "codeDescription": "This snippet demonstrates how to stop a watcher created using the `$watch()` instance method in the Options API.  The `$watch()` method returns a function, `unwatch`, which when called, stops the watcher. This is primarily useful for cases where the watcher needs to be stopped before the component is unmounted. The watcher is defined on 'foo' and executes a callback function.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_23",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const unwatch = this.$watch('foo', callback)\n\n// ...when the watcher is no longer needed:\nunwatch()"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Reactive Ref with ref() in Vue.js",
    "codeDescription": "Creates a reactive and mutable ref object with a single property `.value` that points to the inner value. Any read operations to `.value` are tracked, and write operations trigger associated effects.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_0",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1"
      }
    ],
    "relevance": 0.9,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Reactive State - Options API - JavaScript",
    "codeDescription": "Demonstrates how to declare reactive state using the `data` option in the Options API.  The `data` option should be a function that returns an object. Vue wraps the returned object in its reactivity system, allowing access to its properties via `this` in methods and lifecycle hooks.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 161,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_0",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  // `mounted` is a lifecycle hook which we will explain later\n  mounted() {\n    // `this` refers to the component instance.\n    console.log(this.count) // => 1\n\n    // data can be mutated as well\n    this.count = 2\n  }\n}"
      }
    ],
    "relevance": 0.899,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Counter Component - Options API - Vue",
    "codeDescription": "This Vue component implements a simple counter using the Options API. It defines the `count` state in the `data` option and an `increment` method to update the count. The template displays the current count.",
    "codeLanguage": "Vue",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_1",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script>\nexport default {\n  // state\n  data() {\n    return {\n      count: 0\n    }\n  },\n  // actions\n  methods: {\n    increment() {\n      this.count++\n    }\n  }\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>"
      }
    ],
    "relevance": 0.896,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Composables with Options API in Vue.js",
    "codeDescription": "This example shows how to use composables within a Vue.js component that uses the Options API. Composables must be called inside the `setup()` function, and the returned values must be returned from `setup()` to be accessible in the component's template and `this` context.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_16",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { useMouse } from './mouse.js'\nimport { useFetch } from './fetch.js'\n\nexport default {\n  setup() {\n    const { x, y } = useMouse()\n    const { data, error } = useFetch('...')\n    return { x, y, data, error }\n  },\n  mounted() {\n    // setup() exposed properties can be accessed on `this`\n    console.log(this.x)\n  }\n  // ...other options\n}"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Boolean Prop (Composition API)",
    "codeDescription": "This snippet demonstrates how to define a boolean prop named 'disabled' using the Composition API in Vue.js. When the 'disabled' attribute is present on the component, it's equivalent to passing `:disabled=\"true\"`. When it's absent, it's equivalent to `:disabled=\"false\"`.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_24",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  disabled: Boolean\n})"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injection Default Values (Options API)",
    "codeDescription": "This code demonstrates how to provide default values for injected properties using the object syntax within the `inject` option of Vue.js' Options API.  You can provide primitive default values directly, or use a factory function for non-primitive values or values that are expensive to create.",
    "codeLanguage": "javascript",
    "codeTokens": 177,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_13",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // object syntax is required\n  // when declaring default values for injections\n  inject: {\n    message: {\n      from: 'message', // this is optional if using the same key for injection\n      default: 'default value'\n    },\n    user: {\n      // use a factory function for non-primitive values that are expensive\n      // to create, or ones that should be unique per component instance.\n      default: () => ({ name: 'John' })\n    }\n  }\n}"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref on Component (Composition API before 3.5)",
    "codeDescription": "Demonstrates using a ref on a child component in Vue versions before 3.5, using Composition API. The code imports `ref`, `onMounted`, and the `Child` component. A ref named `child` is created and initialized to null. The ref is then assigned to the Child component using the `ref` attribute.",
    "codeLanguage": "vue",
    "codeTokens": 148,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_7",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst child = ref(null)\n\nonMounted(() => {\n  // child.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Data Fetching Composable JavaScript",
    "codeDescription": "This JavaScript code defines a `useFetch` composable that encapsulates the logic for fetching data asynchronously. It takes a URL as an argument and uses `ref` to create reactive states for data and error. It uses the `fetch` API to make a request, parses the JSON response, and updates the data or error ref accordingly. It returns an object containing the `data` and `error` refs.",
    "codeLanguage": "javascript",
    "codeTokens": 185,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_6",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// fetch.js\nimport { ref } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err))\n\n  return { data, error }\n}"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Props to Named Scoped Slots in Vue.js",
    "codeDescription": "This snippet illustrates how to pass props to a named scoped slot in Vue.js. It uses the <slot> tag with the `name` attribute to specify the slot name and passes the `message` prop. Note that the `name` attribute is reserved and will not be available in the slot props.",
    "codeLanguage": "vue-html",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_22",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<slot name=\"header\" message=\"hello\"></slot>"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Loading and Error States",
    "codeDescription": "This snippet shows how to configure loading and error components for an async component using the `defineAsyncComponent` options.  It configures loadingComponent, delay, errorComponent, and timeout.",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_5",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Local Component Usage in Vue.js with <script setup>",
    "codeDescription": "Shows how to use components locally within a Vue.js component using `<script setup>`. Imported components are automatically available in the template without needing explicit registration in the `components` option. Requires using Single-File Components (SFCs).",
    "codeLanguage": "vue",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_4",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Globally Registering Async Component",
    "codeDescription": "This snippet demonstrates how to register an async component globally using `app.component()`. This makes the component available throughout the application.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_2",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transforming Prop with Computed Property (Composition API)",
    "codeDescription": "This snippet shows how to transform a prop's value using a computed property in Composition API. The `size` prop is trimmed and converted to lowercase, and the `normalizedSize` computed property automatically updates when the `size` prop changes.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_16",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiline Text Input with v-model (Vue HTML)",
    "codeDescription": "Illustrates binding a textarea element to a 'message' ref using v-model. This allows for capturing multiline text input and synchronizing it with the reactive variable.",
    "codeLanguage": "vue-html",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_3",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>Multiline message is:</span>\n<p style=\"white-space: pre-line;\">{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>\n"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mounting Vue Application",
    "codeDescription": "Shows how to mount a Vue application instance to a DOM element using app.mount().  It imports createApp, creates an app instance (details omitted for brevity), and then mounts it to an element with the ID 'app'.  This initiates the rendering process, inserting the Vue component into the specified DOM element.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_2",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing ref Value - Composition API - JavaScript",
    "codeDescription": "Demonstrates accessing and mutating the value of a `ref` object using the `.value` property. It highlights the difference between accessing the `ref` object itself and its value.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_3",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const count = ref(0)\n\nconsole.log(count) // { value: 0 }\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1"
      }
    ],
    "relevance": 0.895,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component (Options API) Vue",
    "codeDescription": "Defines a Vue component using the Options API within a Single-File Component (SFC). It exports a default object with a `data` option that initializes the `count` property to 0. The template uses the `count` data property and increments it on button click.",
    "codeLanguage": "vue",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_0",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>"
      }
    ],
    "relevance": 0.893,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injecting Reactive Data in Vue (Composition API)",
    "codeDescription": "This snippet demonstrates injecting reactive data using the `inject` function in Vue.js Composition API. It injects the `location` and `updateLocation` from the parent component and uses them in the template. The line highlighted with {5} shows the destructuring of the injected object.",
    "codeLanguage": "vue",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_15",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- in injector component -->\n<script setup>\nimport { inject } from 'vue'\n\nconst { location, updateLocation } = inject('location')\n</script>\n\n<template>\n  <button @click=\"updateLocation\">{{ location }}</button>\n</template>"
      }
    ],
    "relevance": 0.892,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "ServerPrefetch Example - JavaScript",
    "codeDescription": "Demonstrates the usage of the 'serverPrefetch' lifecycle hook within a Vue.js component to pre-fetch data on the server. If the component is dynamically rendered on the client, the data is fetched in the 'mounted' hook. The `fetchOnServer` and `fetchOnClient` functions are assumed to exist and perform the actual data fetching.",
    "codeLanguage": "JavaScript",
    "codeTokens": 218,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_14",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  data() {\n    return {\n      data: null\n    }\n  },\n  async serverPrefetch() {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    this.data = await fetchOnServer(/* ... */)\n  },\n  async mounted() {\n    if (!this.data) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      this.data = await fetchOnClient(/* ... */)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Debugging Hooks (Options API)",
    "codeDescription": "This snippet demonstrates how to use `renderTracked` and `renderTriggered` lifecycle hooks in Vue's Options API to debug component re-renders. A debugger statement is placed within the callbacks to interactively inspect the dependencies being tracked and triggering updates. This only works in development mode.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_10",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  renderTracked(event) {\n    debugger\n  },\n  renderTriggered(event) {\n    debugger\n  }\n}"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Integrating XState with Vue (JavaScript)",
    "codeDescription": "This JavaScript code provides a composable function `useMachine` that integrates XState with Vue. It creates a state machine, a shallow ref to hold the current state, and uses the `interpret` function from XState to manage the state machine's lifecycle.  It returns the current state and a send function to send events to the state machine.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_15",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createMachine, interpret } from 'xstate'\nimport { shallowRef } from 'vue'\n\nexport function useMachine(options) {\n  const machine = createMachine(options)\n  const state = shallowRef(machine.initialState)\n  const service = interpret(machine)\n    .onTransition((newState) => (state.value = newState))\n    .start()\n  const send = (event) => service.send(event)\n\n  return [state, send]\n}"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Custom Element with Vue",
    "codeDescription": "This snippet shows how to define a custom element using Vue's `defineCustomElement` method. It includes defining properties, events, a template, and styles, and registering the element for use in HTML.",
    "codeLanguage": "JavaScript",
    "codeTokens": 206,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_4",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  // normal Vue component options here\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement only: CSS to be injected into shadow root\n  styles: [`/* inlined css */`]\n})\n\n// Register the custom element.\n// After registration, all `<my-vue-element>` tags\n// on the page will be upgraded.\ncustomElements.define('my-vue-element', MyVueElement)\n\n// You can also programmatically instantiate the element:\n// (can only be done after registration)\ndocument.body.appendChild(\n  new MyVueElement({\n    // initial props (optional)\n  })\n)"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Slot Content in Child Component (HTML)",
    "codeDescription": "This code snippet shows how to define a slot in a child component using standard HTML. The `<slot></slot>` element acts as a placeholder where the parent component's slot content will be rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_3",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- in child template -->\n<slot></slot>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Event Handlers in Vue.js",
    "codeDescription": "This snippet shows how to properly type event handlers in Vue.js when dealing with native DOM events. It highlights the importance of explicitly annotating the `event` argument and using type assertions when accessing properties of `event` to avoid implicit `any` types and potential TypeScript errors.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_5",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event) {\n      // `event` implicitly has `any` type\n      console.log(event.target.value)\n    }\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>"
      },
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-if Equivalent Render Function - JavaScript (Composition API)",
    "codeDescription": "Shows the equivalent of the `v-if` directive using a render function with Composition API. Uses a ternary operator to conditionally render different vnodes.",
    "codeLanguage": "js",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_4",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h('div', [ok.value ? h('div', 'yes') : h('span', 'no')])"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Augmenting Component Options in Vue.js",
    "codeDescription": "Illustrates how to use declaration merging to augment the `ComponentCustomOptions` interface, allowing you to add custom options to the Vue component definition.  This is useful for adding custom lifecycle hooks or other component-specific configurations.",
    "codeLanguage": "typescript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_4",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: any, from: any, next: () => void): void\n  }\n}"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Running Node.js script",
    "codeDescription": "The shell command executes the specified JavaScript file using Node.js. This is often used to start the server-side rendering process or run other server-side scripts.",
    "codeLanguage": "Shell",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_6",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "Shell",
        "code": "> node example.js"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Template Refs with InstanceType in Vue.js",
    "codeDescription": "This code snippet illustrates how to type a component template ref using `InstanceType` to extract the instance type of an imported component. It showcases a scenario with dynamic components where the ref can point to different component types, and uses a union type to represent the possible instance types. The `useTemplateRef` hook from Vue is utilized.",
    "codeLanguage": "vue",
    "codeTokens": 187,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_31",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\ntype FooType = InstanceType<typeof Foo>\ntype BarType = InstanceType<typeof Bar>\n\nconst compRef = useTemplateRef<FooType | BarType>('comp')\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" ref=\"comp\" />\n</template>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type-Based Props Declaration with defineProps in Vue",
    "codeDescription": "This code snippet demonstrates defining component props using a generic type argument in `defineProps`. This method allows for a cleaner and more straightforward way to define props types, where the compiler infers runtime options based on the type argument. `foo` is defined as a string and `bar` as an optional number.",
    "codeLanguage": "vue",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_1",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst props = defineProps<{  foo: string\n  bar?: number\n}>()\n</script>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive with Include / Exclude - Vue HTML",
    "codeDescription": "This example showcases the usage of the `include` prop of `<KeepAlive>`. It caches only the components whose names match the specified string, RegExp, or array of strings and RegExps. The `exclude` prop works similarly, but it excludes matching components from being cached.",
    "codeLanguage": "vue-html",
    "codeTokens": 174,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_9",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</KeepAlive>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Props Default Values with withDefaults in Vue",
    "codeDescription": "This code demonstrates using the `withDefaults` compiler macro to define default values for props. It provides type checks for the default values and ensures the returned `props` type has optional flags removed for properties that have default values declared. Mutable reference types should be wrapped in functions to avoid accidental modification.",
    "codeLanguage": "typescript",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_5",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model Modifier Handling (Composition API - Pre 3.4)",
    "codeDescription": "Demonstrates how to handle custom v-model modifiers in Vue.js using the Composition API for versions prior to 3.4.  It defines a `modelModifiers` prop, checks for the `capitalize` modifier, and modifies the emitted value accordingly. Requires Vue.js and Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 196,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_22",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps({\n  modelValue: String,\n  modelModifiers: { default: () => ({}) }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nfunction emitValue(e) {\n  let value = e.target.value\n  if (props.modelModifiers.capitalize) {\n    value = value.charAt(0).toUpperCase() + value.slice(1)\n  }\n  emit('update:modelValue', value)\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"props.modelValue\" @input=\"emitValue\" />\n</template>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide value using Composition API in Vue.js",
    "codeDescription": "This code snippet demonstrates how to provide a value using the `provide` function from Vue.js' Composition API.  The first argument is the injection key (a string or Symbol), and the second is the value being provided. Make sure to import `provide` from 'vue'.",
    "codeLanguage": "vue",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_0",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Exposing Public Interface (Composition API)",
    "codeDescription": "Demonstrates how to expose a public interface for a component using `<script setup>` and `defineExpose`. It defines two variables, `a` and `b`, and then uses `defineExpose` to make them accessible to parent components via a template ref.",
    "codeLanguage": "vue",
    "codeTokens": 123,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_9",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\n// Compiler macros, such as defineExpose, don't need to be imported\ndefineExpose({\n  a,\n  b\n})\n</script>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Centralizing Mutations with Methods - JavaScript",
    "codeDescription": "This JavaScript module defines an `increment` method within the reactive store.  This method is intended to be the sole way to update the `count` property, centralizing mutation logic and improving maintainability.",
    "codeLanguage": "JavaScript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_8",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Listening to Events in Parent Component Vue HTML",
    "codeDescription": "This snippet shows how a parent component can listen to a custom event emitted by a child component using `v-on` (shorthand `@`). When `MyComponent` emits `some-event`, the `callback` function is executed.",
    "codeLanguage": "Vue-HTML",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_3",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue-HTML",
        "code": "<MyComponent @some-event=\"callback\" />"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Props Destructure with Default Value",
    "codeDescription": "This example showcases reactive props destructuring and using default values with type based props declaration. If the `foo` prop is not provided it will default to 'hello'.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_7",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "typescript",
        "code": "const {{ foo = 'hello' }} = defineProps<{ foo?: string }>()"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props with defineProps in Vue SFCs",
    "codeDescription": "This snippet demonstrates how to declare props in a Vue Single-File Component (SFC) using the `defineProps()` macro within `<script setup>`. It defines a prop named 'foo' and logs its value to the console. The component expects to receive a prop called 'foo'.",
    "codeLanguage": "vue",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_0",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Validating Emitted Events (Options API) JavaScript",
    "codeDescription": "This snippet shows how to validate emitted events in the Options API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime, logging a warning if the validation fails.",
    "codeLanguage": "JavaScript",
    "codeTokens": 158,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_19",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  emits: {\n    // No validation\n    click: null,\n\n    // Validate submit event\n    submit: ({ email, password }) => {\n      if (email && password) {\n        return true\n      } else {\n        console.warn('Invalid submit event payload!')\n        return false\n      }\n    }\n  },\n  methods: {\n    submitForm(email, password) {\n      this.$emit('submit', { email, password })\n    }\n  }\n}"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Scoped Slots in FancyList Component",
    "codeDescription": "This code demonstrates how to use scoped slots within a `FancyList` component. It utilizes a template with the `#item` shorthand for `v-slot:item` to define the structure for each item in the list. The component exposes `body`, `username`, and `likes` as slot props.",
    "codeLanguage": "vue-html",
    "codeTokens": 152,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_26",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyList :api-url=\"url\" :per-page=\"10\">\n  <template #item=\"{ body, username, likes }\">\n    <div class=\"item\">\n      <p>{{ body }}</p>\n      <p>by {{ username }} | {{ likes }} likes</p>\n    </div>\n  </template>\n</FancyList>"
      }
    ],
    "relevance": 0.89,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Slots in Composition API - JSX",
    "codeDescription": "This JSX code shows how to access and render slots. It accesses the default and named slots, passing props to the named slot.",
    "codeLanguage": "JSX",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_23",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JSX",
        "code": "// default\n<div>{slots.default()}</div>\n\n// named\n<div>{slots.footer({ text: props.message })}</div>"
      }
    ],
    "relevance": 0.887,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Generic Component Definition",
    "codeDescription": "Defines a generic Vue component `MyGenericModal` that accepts a type parameter `ContentType`.  It uses `defineExpose` to expose the `open` method, which takes a value of type `ContentType` and sets the component's internal `content` ref.  This component requires the `vue` library.",
    "codeLanguage": "vue",
    "codeTokens": 148,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_34",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- MyGenericModal.vue -->\n<script setup lang=\"ts\" generic=\"ContentType extends string | number\">\nimport { ref } from 'vue'\n\nconst content = ref<ContentType | null>(null)\n\nconst open = (newContent: ContentType) => (content.value = newContent)\n\ndefineExpose({\n  open\n})\n</script>"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Emitted Events with Payload Type (Options API) JavaScript",
    "codeDescription": "This snippet shows how to declare emitted events with payload type validation in the Options API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime.",
    "codeLanguage": "JavaScript",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_17",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  emits: {\n    submit(payload: { email: string, password: string }) {\n      // return `true` or `false` to indicate\n      // validation pass / fail\n    }\n  }\n}"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Custom Element Types in TypeScript",
    "codeDescription": "This TypeScript snippet demonstrates how to define types for Vue custom elements to enable type checking in Vue templates. It imports `defineCustomElement` from Vue, converts a Vue component into a custom element, registers it with the browser, and then augments the `GlobalComponents` interface in the Vue module to provide type information for the custom element in Vue templates.  It is important to use the Vue component type when augmenting the `GlobalComponents` interface.",
    "codeLanguage": "typescript",
    "codeTokens": 267,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_14",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCustomElement } from 'vue'\n\n// Import the Vue component.\nimport SomeComponent from './src/components/SomeComponent.ce.vue'\n\n// Turn the Vue component into a Custom Element class.\nexport const SomeElement = defineCustomElement(SomeComponent)\n\n// Remember to register the element class with the browser.\ncustomElements.define('some-element', SomeElement)\n\n// Add the new element type to Vue's GlobalComponents type.\ndeclare module 'vue' {\n  interface GlobalComponents {\n    // Be sure to pass in the Vue component type here \n    // (SomeComponent, *not* SomeElement).\n    // Custom Elements require a hyphen in their name, \n    // so use the hyphenated element name here.\n    'some-element': typeof SomeComponent\n  }\n}"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Enabling Import Maps for Vue (Options API)",
    "codeDescription": "This snippet demonstrates using import maps to map the 'vue' import specifier to the Vue.js ES module CDN URL. This allows using `import { createApp } from 'vue'` directly. It also includes the application initialization code using Options API.",
    "codeLanguage": "HTML",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_17",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component (Composition API) JavaScript",
    "codeDescription": "Defines a Vue component as a plain JavaScript object using the Composition API. It imports the `ref` function from Vue, initializes a reactive `count` variable using `ref(0)`, and exposes `count` through the `setup` function's return value. The template uses an inlined HTML string to display a button that increments `count` on click.",
    "codeLanguage": "javascript",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_3",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing a Value for Injection (App-Level)",
    "codeDescription": "Demonstrates how to provide a value at the application level for dependency injection using app.provide(). It creates a Vue application instance and provides the string value 'hello' under the injection key 'message'. This makes the value available for injection in any descendant component within the application.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_10",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Maintaining State with Key Attribute in v-for",
    "codeDescription": "This code demonstrates how to use the `key` attribute with `v-for` to help Vue track each node's identity, enabling reuse and reordering of existing elements for efficient updates.",
    "codeLanguage": "html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_19",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<div v-for=\"item in items\" :key=\"item.id\">\n  <!-- content -->\n</div>"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Components Vue",
    "codeDescription": "Demonstrates the usage of dynamic components inside `<script setup>` using the `:is` binding. The components are referenced as variables, allowing for conditional rendering of different components.",
    "codeLanguage": "vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_5",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Simple Props in Vue.js",
    "codeDescription": "This snippet showcases the simple array-based syntax for declaring props in a Vue.js component. In this form, you provide an array of strings, each representing the name of a prop that the component accepts.  No type validation or default values are specified in this simple form.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_2",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['size', 'myMessage']\n}"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Props Default Values with Reactive Props Destructure in Vue",
    "codeDescription": "This snippet illustrates how to set default values for props using Reactive Props Destructure. This approach allows specifying default values directly within the destructuring assignment, providing a concise way to define defaults for optional props.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_4",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting Events with Composition API (JS) in Vue.js",
    "codeDescription": "This snippet illustrates how to declare and emit a custom event named 'response' from a Vue.js component using the Composition API with a standard JavaScript setup function. It utilizes the `emits` option to declare the event and the `emit` function (provided via the setup context) to trigger the event with a string argument.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_1",
    "pageTitle": "Vue.js Component Event Emission",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // declare emitted events\n  emits: ['response'],\n  setup(props, { emit }) {\n    // emit with argument\n    emit('response', 'hello from child')\n  }\n}"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating a Reusable Transition Component in Vue",
    "codeDescription": "This snippet demonstrates how to create a reusable transition component in Vue by wrapping the built-in `<Transition>` component. It passes down the slot content, allowing the reusable component to transition any content passed to it.  The example highlights the importance of avoiding `<style scoped>` for styling the slot content.",
    "codeLanguage": "vue",
    "codeTokens": 177,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_19",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- MyTransition.vue -->\n<script>\n// JavaScript hooks logic...\n</script>\n\n<template>\n  <!-- wrap the built-in Transition component -->\n  <Transition\n    name=\"my-transition\"\n    @enter=\"onEnter\"\n    @leave=\"onLeave\">\n    <slot></slot> <!-- pass down slot content -->\n  </Transition>\n</template>\n\n<style>\n/*\n  Necessary CSS...\n  Note: avoid using <style scoped> here since it\n  does not apply to slot content.\n*/\n</style>"
      }
    ],
    "relevance": 0.885,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Slot Names (Vue)",
    "codeDescription": "This snippet demonstrates the usage of dynamic slot names using dynamic directive arguments on `v-slot`. The slot name is determined by the `dynamicSlotName` variable, allowing for more flexible slot content rendering.",
    "codeLanguage": "vue-html",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_16",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<base-layout>\n  <template v-slot:[dynamicSlotName]>\n    ...\n  </template>\n\n  <!-- with shorthand -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>"
      }
    ],
    "relevance": 0.884,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Props Destructure TypeScript",
    "codeDescription": "Demonstrates reactive props destructuring using `defineProps` in Vue 3.5+. Variables destructured from the return value of `defineProps` are reactive, and default values can be declared using JavaScript's native default value syntax. The compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`.",
    "codeLanguage": "typescript",
    "codeTokens": 144,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_12",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const { foo } = defineProps(['foo'])\n\nwatchEffect(() => {\n  // runs only once before 3.5\n  // re-runs when the \"foo\" prop changes in 3.5+\n  console.log(foo)\n})\n"
      }
    ],
    "relevance": 0.882,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Methods in Vue.js",
    "codeDescription": "This code shows how to define methods within a Vue.js component using the `methods` option. Methods are functions that can be called from the component instance or within templates.  The `this` context of a method is automatically bound to the component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_6",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return { a: 1 }\n  },\n  methods: {\n    plus() {\n      this.a++\n    }\n  },\n  created() {\n    this.plus()\n    console.log(this.a) // => 2\n  }\n}"
      }
    ],
    "relevance": 0.881,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Example Vue Composable (useCounter)",
    "codeDescription": "This defines a simple composable function `useCounter` in Vue that manages a counter state and provides an increment function. It uses Vue's reactivity API.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_13",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// counter.js\nimport { ref } from 'vue'\n\nexport function useCounter() {\n  const count = ref(0)\n  const increment = () => count.value++\n\n  return {\n    count,\n    increment\n  }\n}"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Getter Example - JavaScript",
    "codeDescription": "Demonstrates how to use the `watch` function in Vue.js to watch a getter function that accesses a reactive state. The callback function will be executed when the value returned by the getter changes.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_16",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Fetching Data with Reactive URL (Ref) in Vue.js",
    "codeDescription": "This example demonstrates how to use a ref as the URL in a `useFetch()` composable.  When the ref's value changes, the `useFetch` function will automatically re-fetch the data. This enables reactive data fetching based on external changes.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_8",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "const url = ref('/initial-url')\n\nconst { data, error } = useFetch(url)\n\n// this should trigger a re-fetch\nurl.value = '/new-url'"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Reactive Object with Deep Option - JavaScript",
    "codeDescription": "Demonstrates how to force deep traversal of the source if it is an object, so that the callback fires on deep mutations. When watching a reactive object with the `deep` option set to `true`, the watcher will trigger even when nested properties change.  If the callback was triggered by a deep mutation, the new and old values will be the same object.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_19",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = reactive({ count: 0 })\nwatch(\n  () => state,\n  (newValue, oldValue) => {\n    // newValue === oldValue\n  },\n  { deep: true }\n)"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Alt + Enter Key Combination in Vue.js",
    "codeDescription": "This code snippet demonstrates how to bind a Vue.js method to the `keyup` event of an input element, triggering the method only when the Alt key and Enter key are pressed simultaneously. The `clear` method will be called when the user releases the Enter key while holding down the Alt key.",
    "codeLanguage": "vue-html",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_14",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing DOM Properties to Custom Elements",
    "codeDescription": "This snippet demonstrates how to pass complex data as DOM properties to custom elements in Vue using the `.prop` modifier with `v-bind`.  This is necessary because DOM attributes can only be strings, while properties can hold complex data types.",
    "codeLanguage": "Vue HTML",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_3",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "Vue HTML",
        "code": "<my-element :user.prop=\"{ name: 'jack' }\"></my-element>\n\n<!-- shorthand equivalent -->\n<my-element .user=\"{ name: 'jack' }\"></my-element>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Annotating Complex Prop Types in Vue.js",
    "codeDescription": "This snippet illustrates how to annotate complex prop types in Vue.js, such as objects with nested properties or function call signatures, using the `PropType` utility type. It provides an example of defining a `Book` interface and using it to type the `book` prop, along with an example of typing a callback function.",
    "codeLanguage": "typescript",
    "codeTokens": 238,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_1",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Simple Routing with Options API in Vue.js",
    "codeDescription": "This snippet demonstrates a simple client-side routing implementation in Vue.js using the Options API. It defines a `routes` object mapping URL hashes to Vue components, uses a data property to track the current path, and dynamically renders the appropriate component based on the `hashchange` event in the mounted lifecycle hook.",
    "codeLanguage": "Vue.js",
    "codeTokens": 256,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/routing.md#_snippet_1",
    "pageTitle": "Vue.js Routing Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nexport default {\n  data() {\n    return {\n      currentPath: window.location.hash\n    }\n  },\n  computed: {\n    currentView() {\n      return routes[this.currentPath.slice(1) || '/'] || NotFound\n    }\n  },\n  mounted() {\n    window.addEventListener('hashchange', () => {\n\t\t  this.currentPath = window.location.hash\n\t\t})\n  }\n}\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Top-level Await in Vue Script Setup",
    "codeDescription": "This code shows the usage of top-level `await` inside `<script setup>`. The resulting code is compiled as `async setup()`, allowing you to directly await promises within the setup scope. Awaited expressions are compiled in a format that preserves the current component instance context after the `await`.",
    "codeLanguage": "vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_27",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst post = await fetch(`/api/post/1`).then((r) => r.json())\n</script>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting Events in Options API Vue JavaScript",
    "codeDescription": "This snippet demonstrates how to emit a custom event from a Vue.js component's method using the `this.$emit()` method within the Options API. The `submit` method, when called, emits the 'someEvent' event.",
    "codeLanguage": "JavaScript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_2",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mounting a Vue App in JavaScript",
    "codeDescription": "This code demonstrates how to mount a Vue application to a DOM element using its ID. The `app.mount()` function is called with the CSS selector of the container element, which will be replaced by the application's root component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_2",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "app.mount('#app')"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Methods - Options API - JavaScript",
    "codeDescription": "Demonstrates how to add methods to a component instance using the `methods` option in the Options API. Vue automatically binds the `this` value for methods, ensuring it refers to the component instance. Arrow functions should be avoided when defining methods to preserve the correct `this` binding.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 140,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_10",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    // methods can be called in lifecycle hooks, or other methods!\n    this.increment()\n  }\n}"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Refs with Composition API (useTemplateRef)",
    "codeDescription": "Illustrates accessing a template ref using the `useTemplateRef()` helper function in the Composition API. It imports `useTemplateRef` and `onMounted` from Vue, defines a ref using `useTemplateRef` with the ref name matching the template, and focuses the input element in the `onMounted` lifecycle hook.",
    "codeLanguage": "vue",
    "codeTokens": 152,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_1",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Compiled output of $ref usage",
    "codeDescription": "This JavaScript code shows the compiled output of the previous Vue component using the `$ref` macro. The `count` variable is now a standard Vue `ref`, and `.value` is used for accessing and modifying its value.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_1",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nlet count = ref(0)\n\nconsole.log(count.value)\n\nfunction increment() {\n  count.value++\n}"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Event Handlers with Type Assertion in Vue",
    "codeDescription": "This code demonstrates typing an event handler and using type assertions to access properties of the event target.  The `event` argument is explicitly typed as `Event`, and a type assertion is used to treat `event.target` as an `HTMLInputElement` to access the `value` property.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_24",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "function handleChange(event: Event) {\n  console.log((event.target as HTMLInputElement).value)\n}"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scoped CSS Example - Vue",
    "codeDescription": "Demonstrates how to use the `scoped` attribute in a `<style>` tag to apply CSS only to the current component. The styles are transformed using PostCSS to add a unique attribute to the elements and selectors.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_0",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props in Composition API Vue Component",
    "codeDescription": "This snippet demonstrates how to declare props in a Vue component using the Composition API with script setup. It uses `defineProps` to declare the 'title' prop and renders it in the template.",
    "codeLanguage": "vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_9",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\n</script>\n\n<template>\n  <h4>{{ title }}</h4>\n</template>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async setup() with <script setup>",
    "codeDescription": "This Vue.js code shows how to use top-level await expressions within a `<script setup>` block, making the component an async dependency. It fetches data and makes it available in the template.",
    "codeLanguage": "vue",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_1",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst res = await fetch(...)\nconst posts = await res.json()\n</script>\n\n<template>\n  {{ posts }}\n</template>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-bind() in CSS with Script Setup - Vue",
    "codeDescription": "Illustrates the usage of `v-bind()` within a `<script setup>` block. JavaScript expressions are supported within the `v-bind()` function (must be wrapped in quotes). The color property is reactively updated.",
    "codeLanguage": "vue",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_12",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst theme = ref({\n    color: 'red',\n})\n</script>\n\n<template>\n  <p>hello</p>\n</template>\n\n<style scoped>\np {\n  color: v-bind('theme.color');\n}\n</style>"
      }
    ],
    "relevance": 0.88,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Component Name (PascalCase)",
    "codeDescription": "Shows correct practice of defining a component's name using PascalCase. Component names should use PascalCase in JS/JSX.",
    "codeLanguage": "js",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_19",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  name: 'MyComponent'\n  // ...\n}"
      }
    ],
    "relevance": 0.878,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Specifying Explicit Type with computed() in Vue",
    "codeDescription": "This shows how to specify an explicit type for a computed property via a generic argument.  The compiler will check that the getter function returns the specified type.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_22",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const double = computed<number>(() => {\n  // type error if this doesn't return a number\n})"
      }
    ],
    "relevance": 0.878,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing Child Component (Composition API)",
    "codeDescription": "This snippet demonstrates how to import a child component in a Vue.js application using the Composition API. It assumes the component is defined in a Single-File Component (SFC) named ChildComp.vue. This is a necessary step before the component can be used in the template of the parent component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_0",
    "pageTitle": "Vue.js Component Usage and Registration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import ChildComp from './ChildComp.vue'"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject Option: Renaming Injection (Vue.js)",
    "codeDescription": "Shows how to inject a property with a different name using the `from` property in the `inject` option in Vue.js.  This allows you to map an injected property to a different local property name.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_6",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: 'foo'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Deep Reactivity with Options API in Vue",
    "codeDescription": "This example demonstrates how Vue's reactivity system automatically detects changes to nested objects and arrays when using the Options API. The `mutateDeeply` method modifies the `obj` and `arr` properties, which triggers reactivity updates.",
    "codeLanguage": "javascript",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_13",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      obj: {\n        nested: { count: 0 },\n        arr: ['foo', 'bar']\n      }\n    }\n  },\n  methods: {\n    mutateDeeply() {\n      // these will work as expected.\n      this.obj.nested.count++\n      this.obj.arr.push('baz')\n    }\n  }\n}"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Single Checkbox with v-model (Vue HTML)",
    "codeDescription": "Example of binding a single checkbox to a boolean 'checked' ref. The checkbox's checked state will update the 'checked' ref, and vice versa.",
    "codeLanguage": "vue-html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_6",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>\n"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Validating Emitted Events (Composition API) Vue",
    "codeDescription": "This snippet shows how to validate emitted events in the Composition API. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime, logging a warning if the validation fails.",
    "codeLanguage": "Vue",
    "codeTokens": 154,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_18",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nconst emit = defineEmits({\n  // No validation\n  click: null,\n\n  // Validate submit event\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false\n    }\n  }\n})\n\nfunction submitForm(email, password) {\n  emit('submit', { email, password })\n}\n</script>"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Render Functions in Options API - JavaScript",
    "codeDescription": "Shows how to declare a render function using the `render` option in the Options API. The render function returns a vnode, string, or an array of vnodes, and has access to the component instance via `this`.",
    "codeLanguage": "js",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_2",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "import { h } from 'vue'\n\nexport default {\n  data() {\n    return {\n      msg: 'hello'\n    }\n  },\n  render() {\n    return h('div', this.msg)\n  }\n}"
      },
      {
        "language": "js",
        "code": "export default {\n  render() {\n    return 'hello world!'\n  }\n}"
      },
      {
        "language": "js",
        "code": "import { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Implementing v-model pre-Vue 3.4",
    "codeDescription": "This is how you would implement the same child component shown above prior to 3.4. Involves defining a prop `modelValue` and emitting an `update:modelValue` event when the input changes.",
    "codeLanguage": "vue",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_3",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- Child.vue -->\n<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using onMounted Hook (Composition API)",
    "codeDescription": "This code demonstrates how to use the `onMounted` lifecycle hook in the Composition API to execute code after the component has been mounted. This hook is useful for performing DOM operations or accessing template refs after the DOM is ready.",
    "codeLanguage": "js",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_3",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "import { onMounted } from 'vue'\n\nonMounted(() => {\n  // component is now mounted.\n})"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref Unwrapping with reactive() in Vue.js",
    "codeDescription": "Demonstrates how refs are automatically unwrapped when accessed as properties of a reactive object created with `reactive()`. Changes to the ref's value or the reactive object's property are synchronized.",
    "codeLanguage": "typescript",
    "codeTokens": 149,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_5",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "typescript",
        "code": "const count = ref(1)\nconst obj = reactive({ count })\n\n// ref will be unwrapped\nconsole.log(obj.count === count.value) // true\n\n// it will update `obj.count`\ncount.value++\nconsole.log(count.value) // 2\nconsole.log(obj.count) // 2\n\n// it will also update `count` ref\nobj.count++\nconsole.log(obj.count) // 3\nconsole.log(count.value) // 3"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring Error Handler in JavaScript",
    "codeDescription": "This code demonstrates how to configure a global error handler for a Vue application. The `app.config.errorHandler` function is set to a callback that will be called whenever an error occurs in any descendant component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_6",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "app.config.errorHandler = (err) => {\n  /* handle error */\n}"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Class as Prop Type (Composition API)",
    "codeDescription": "This snippet demonstrates how to use a custom class `Person` as the type for a prop named `author` within Composition API. Vue will validate whether the prop's value is an instance of the class.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_20",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  author: Person\n})"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Optimized Computed Property with Manual Comparison",
    "codeDescription": "Illustrates how to optimize a computed property by manually comparing the new value with the old value and conditionally returning the old value if nothing has changed. This prevents unnecessary effect triggers.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_6",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting Events with Composition API (Script Setup) in Vue.js",
    "codeDescription": "This code snippet shows how to declare and emit a custom event named 'response' from a Vue.js component using the Composition API with `<script setup>`. The `defineEmits` function is used to declare the event, and the `emit` function is used to trigger the event, passing a string argument.",
    "codeLanguage": "vue",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_0",
    "pageTitle": "Vue.js Component Event Emission",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// declare emitted events\nconst emit = defineEmits(['response'])\n\n// emit with argument\nemit('response', 'hello from child')\n</script>"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "AlertBox Component with Slot in Vue",
    "codeDescription": "Defines a Vue component named `AlertBox` that uses a `<slot>` element. The `<slot>` element allows the component to accept and render content passed to it from its parent. The component template defines a styled div containing a heading and a slot for dynamic content.",
    "codeLanguage": "vue",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_27",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- AlertBox.vue -->\n<template>\n  <div class=\"alert-box\">\n    <strong>This is an Error for Demo Purposes</strong>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\n.alert-box {\n  /* ... */\n}\n</style>"
      }
    ],
    "relevance": 0.875,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-for Equivalent Render Function - JavaScript (Options API)",
    "codeDescription": "Demonstrates the equivalent of the `v-for` directive using a render function with Options API. Uses `map` to iterate over an array and generate a list of vnodes.",
    "codeLanguage": "js",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_10",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h(\n  'ul',\n  this.items.map(({ id, text }) => {\n    return h('li', { key: id }, text)\n  })\n)"
      }
    ],
    "relevance": 0.872,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Local Component Registration and Usage in Vue.js (Options API + Template)",
    "codeDescription": "Illustrates local component registration within a Vue.js Single-File Component (SFC) using the `components` option. It includes the template code demonstrating how to use the locally registered component.",
    "codeLanguage": "vue",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_6",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watching a Ref with watch() - JavaScript",
    "codeDescription": "This code demonstrates how to use the `watch` function in Vue.js to watch a ref called `todoId`. It fetches data from an API whenever the value of `todoId` changes.  The `immediate: true` option ensures the watcher runs immediately upon creation.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_12",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const todoId = ref(1)\nconst data = ref(null)\n\nwatch(\n  todoId,\n  async () => {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n    )\n    data.value = await response.json()\n  },\n  { immediate: true }\n)"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Express Server with Vue SSR",
    "codeDescription": "This snippet sets up an Express server to handle requests and render a Vue app to HTML on the server-side. It imports Express, creates a Vue app instance, renders it to a string using `renderToString`, and sends the rendered HTML wrapped in a basic HTML structure as a response. Requires the 'express' and 'vue' packages.",
    "codeLanguage": "JavaScript",
    "codeTokens": 259,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_1",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import express from 'express'\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst server = express()\n\nserver.get('/', (req, res) => {\n  const app = createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n\n  renderToString(app).then((html) => {\n    res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Vue SSR Example</title>\n      </head>\n      <body>\n        <div id=\"app\">${html}</div>\n      </body>\n    </html>\n    `)\n  })\n})\n\nserver.listen(3000, () => {\n  console.log('ready')\n})"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Emits with Runtime Declaration in Vue",
    "codeDescription": "This snippet demonstrates typing component emits using the `defineEmits` macro with runtime declaration. It specifies the event names as an array of strings.",
    "codeLanguage": "vue",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_10",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n</script>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive classObject (Composition API)",
    "codeDescription": "Defines a reactive object using Vue's Composition API to represent a class object.  The 'active' and 'text-danger' properties control the presence of corresponding CSS classes.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_4",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const classObject = reactive({\n  active: true,\n  'text-danger': false\n})"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Post Object Example (Composition API)",
    "codeDescription": "Illustrates how to define the post object with 'id' and 'title' properties using composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_11",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "const post = {\n  id: 1,\n  title: 'My Journey with Vue'\n}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Receiving Scoped Slot Props (Vue)",
    "codeDescription": "This snippet demonstrates how to receive props passed from a child component to a scoped slot. The `v-slot` directive is used on the child component tag, and its value (`slotProps`) contains the props passed from the child.",
    "codeLanguage": "vue-html",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_18",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-slot=\"slotProps\">\n  {{ slotProps.text }} {{ slotProps.count }}\n</MyComponent>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method Definition with Argument (Options API)",
    "codeDescription": "Defines a `say` method within the `methods` object of a Vue component using the Options API. It takes a `message` argument and displays it in an alert. This showcases how to pass custom arguments to methods called from inline event handlers.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_7",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "methods: {\n  say(message) {\n    alert(message)\n  }\n}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Checkbox Dynamic Value Bindings in Vue",
    "codeDescription": "This snippet demonstrates how to dynamically bind the `true` and `false` values of a checkbox to data properties using `:true-value` and `:false-value`. This allows for more flexible control over the values associated with the checkbox state.",
    "codeLanguage": "vue-html",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_17",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  :true-value=\"dynamicTrueValue\"\n  :false-value=\"dynamicFalseValue\" />"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing beforeUpdate Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `beforeUpdate` lifecycle hook, which is called right before a Vue.js component is about to update its DOM tree due to a reactive state change. This hook can be used to access the DOM state before Vue updates the DOM. This hook is not called during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_4",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  beforeUpdate?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Listening to Event Arguments with Inline Arrow Function Vue HTML",
    "codeDescription": "This snippet demonstrates listening for an event and accessing its argument using an inline arrow function. When the `increase-by` event is emitted by `MyButton`, the provided value `n` is added to the `count` variable.",
    "codeLanguage": "Vue-HTML",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_6",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue-HTML",
        "code": "<MyButton @increase-by=\"(n) => count += n\" />"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-bind() in CSS - Vue",
    "codeDescription": "Demonstrates how to use the `v-bind()` CSS function to link CSS values to dynamic component state. The CSS value is reactively updated whenever the bound data property changes.",
    "codeLanguage": "vue",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_11",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Listening to Event Arguments with Method Vue HTML",
    "codeDescription": "This snippet shows how to listen for an event and pass its argument to a method. When the `increase-by` event is emitted, the `increaseCount` method is called with the event's argument.",
    "codeLanguage": "Vue-HTML",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_7",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue-HTML",
        "code": "<MyButton @increase-by=\"increaseCount\" />"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Vnodes with h() - JavaScript",
    "codeDescription": "Demonstrates how to create virtual DOM nodes (vnodes) using the `h()` function in Vue.js. The `h()` function accepts the element type, props, and children as arguments.",
    "codeLanguage": "js",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_0",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "import { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Organizing Component Logic with Composables in Vue.js",
    "codeDescription": "This example illustrates how to organize component logic by extracting and using multiple composables within a Vue.js component. It shows how composables can be imported and used in `<script setup>`, allowing for better code organization and modularity.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_15",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "<script setup>\nimport { useFeatureA } from './featureA.js'\nimport { useFeatureB } from './featureB.js'\nimport { useFeatureC } from './featureC.js'\n\nconst { foo, bar } = useFeatureA()\nconst { baz } = useFeatureB(foo)\nconst { qux } = useFeatureC(baz)\n</script>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Scoped Slots - Child Component - JavaScript",
    "codeDescription": "This code demonstrates the child component providing data to the scoped slot via a function call.",
    "codeLanguage": "JavaScript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_29",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// child component\nexport default {\n  setup(props, { slots }) {\n    const text = ref('hi')\n    return () => h('div', null, slots.default({ text: text.value }))\n  }\n}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "markRaw() Usage in Vue.js",
    "codeDescription": "Demonstrates how to use `markRaw()` to prevent an object from being converted to a proxy. It shows that `isReactive(reactive(foo))` returns `false` when `foo` is marked as raw. Also demonstrates nested usage where a raw object is nested inside reactive objects.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_7",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = markRaw({})\nconsole.log(isReactive(reactive(foo))) // false\n\n// also works when nested inside other reactive objects\nconst bar = reactive({ foo })\nconsole.log(isReactive(bar.foo)) // false"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Props via HTML Attributes",
    "codeDescription": "This snippet shows how to pass prop values to a Vue component using HTML attributes. It passes the 'title' prop to the BlogPost component.",
    "codeLanguage": "html",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_12",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "html",
        "code": "<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Custom Directive (Options API) JavaScript",
    "codeDescription": "Demonstrates local registration of a custom directive `highlight` using the `directives` option in a Vue component defined with the Options API.  The directive adds the `is-highlight` class to the element during the `mounted` hook.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_2",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition Hooks in Composition API JavaScript",
    "codeDescription": "This snippet showcases how to implement JavaScript transition hooks within Vue's Composition API. Each function corresponds to a specific stage in the transition lifecycle, such as before the element is inserted, during the animation, and after the animation has completed.  The `done` callback is crucial for JavaScript-only transitions to signal the end of the animation.",
    "codeLanguage": "javascript",
    "codeTokens": 321,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_16",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "javascript",
        "code": "// called before the element is inserted into the DOM.\n// use this to set the \"enter-from\" state of the element\nfunction onBeforeEnter(el) {}\n\n// called one frame after the element is inserted.\n// use this to start the entering animation.\nfunction onEnter(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the enter transition has finished.\nfunction onAfterEnter(el) {}\n\n// called when the enter transition is cancelled before completion.\nfunction onEnterCancelled(el) {}\n\n// called before the leave hook.\n// Most of the time, you should just use the leave hook\nfunction onBeforeLeave(el) {}\n\n// called when the leave transition starts.\n// use this to start the leaving animation.\nfunction onLeave(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the leave transition has finished and the\n// element has been removed from the DOM.\nfunction onAfterLeave(el) {}\n\n// only available with v-show transitions\nfunction onLeaveCancelled(el) {}"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configure Vitest in Vite Configuration",
    "codeDescription": "This code snippet shows how to configure Vitest within the Vite configuration file (vite.config.js). It enables global test APIs and sets up happy-dom as the DOM simulation environment for testing.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_8",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic setup() Usage in Vue.js",
    "codeDescription": "Demonstrates the basic usage of the `setup()` hook in a Vue.js component to declare reactive state using `ref` and expose it to the template and other options API hooks. Includes a simple counter example.",
    "codeLanguage": "vue",
    "codeTokens": 147,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_0",
    "pageTitle": "Vue.js Composition API setup() Hook",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    // expose to template and other options API hooks\n    return {\n      count\n    }\n  },\n\n  mounted() {\n    console.log(this.count) // 0\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.87,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Directive in Template (Options API) HTML",
    "codeDescription": "Shows how to use the locally registered `v-highlight` directive within a Vue template. This is used with the Options API.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_3",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p v-highlight>This sentence is important!</p>"
      }
    ],
    "relevance": 0.869,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing Reactive Data with Computed Property (Options API)",
    "codeDescription": "This snippet shows how to provide reactive data using a computed property in Vue.js Options API. It creates a computed property `message` that depends on the component's `message` data property, ensuring that changes to the `message` data property are reflected in the provided value. Line {10} highlights the creation of the computed property.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_17",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { computed } from 'vue'\n\nexport default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    return {\n      // explicitly provide a computed property\n      message: computed(() => this.message)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.868,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendered HTML with Named Slots",
    "codeDescription": "This is the final rendered HTML output after passing content to the named slots of the BaseLayout component. It demonstrates how the content from the parent component is inserted into the corresponding slots in the child component.",
    "codeLanguage": "html",
    "codeTokens": 138,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_13",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>"
      }
    ],
    "relevance": 0.866,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Number Modifier for v-model in Vue",
    "codeDescription": "This snippet demonstrates the use of the `.number` modifier with `v-model`. This modifier automatically attempts to typecast the user input as a number. If parsing fails, the original string value is used.",
    "codeLanguage": "vue-html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_21",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model.number=\"age\" />"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Lazy Modifier for v-model in Vue",
    "codeDescription": "This snippet demonstrates the use of the `.lazy` modifier with `v-model`. This modifier syncs the input with the data only after a `change` event, instead of the default `input` event.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_20",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- synced after \"change\" instead of \"input\" -->\n<input v-model.lazy=\"msg\" />"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Inference with defineComponent for Props in Vue",
    "codeDescription": "This example shows how to use `defineComponent()` when not using `<script setup>` to enable props type inference. The type of the props object passed to `setup()` is inferred from the `props` option.",
    "codeLanguage": "typescript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_6",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // <-- type: string\n  }\n})"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component with Slots Vue.js",
    "codeDescription": "This code snippet demonstrates how to define a Vue.js component (`FancyButton`) that uses a `<slot>` element as a slot outlet.  The slot outlet indicates where the parent-provided slot content should be rendered within the component's template. The class `fancy-btn` provides custom styling for the button.",
    "codeLanguage": "vue-html",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_0",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use Custom Element in Vue SFC with TypeScript",
    "codeDescription": "Demonstrates how to use the custom element in a Vue single-file component (SFC) with TypeScript support. It imports the custom element's JavaScript file and the Vue-specific type definition. It uses `useTemplateRef` to access the element's properties and sets up event handling. The template shows the usage of the custom element with type checked props and event handler.",
    "codeLanguage": "vue",
    "codeTokens": 344,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_18",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// This will create and register the element with the browser.\nimport 'some-lib/dist/SomeElement.js'\n\n// A user that is using TypeScript and Vue should additionally import the\n// Vue-specific type definition (users of other frameworks may import other\n// framework-specific type definitions).\nimport type {} from 'some-lib/dist/SomeElement.vue.js'\n\nimport { useTemplateRef, onMounted } from 'vue'\n\nconst el = useTemplateRef('el')\n\nonMounted(() => {\n  console.log(\n    el.value!.foo,\n    el.value!.bar,\n    el.value!.lorem,\n    el.value!.someMethod()\n  )\n\n  // Do not use these props, they are `undefined`\n  // IDE will show them crossed out\n  el.$props\n  el.$emit\n})\n</script>\n\n<template>\n  <!-- Now we can use the element, with type checking: -->\n  <some-element\n    ref=\"el\"\n    :foo=\"456\"\n    :blah=\"'hello'\"\n    @apple-fell=\"\n      (event) => {\n        // The type of `event` is inferred here to be `AppleFellEvent`\n      }\n    \"\n  ></some-element>\n</template>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Directive in Template (Composition API) Vue",
    "codeDescription": "Demonstrates the use of a custom directive `v-highlight` within a Vue template using the Composition API and `<script setup>`. The directive adds the `is-highlight` class to the paragraph element.",
    "codeLanguage": "vue",
    "codeTokens": 114,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_1",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Expose Option Usage Example JavaScript",
    "codeDescription": "Illustrates how to use the `expose` option in Vue.js component to control which methods are accessible to the parent component via template refs.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_13",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // only `publicMethod` will be available on the public instance\n  expose: ['publicMethod'],\n  methods: {\n    publicMethod() {\n      // ...\n    },\n    privateMethod() {\n      // ...\n    }\n  }\n}"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue SFC Example (Options API)",
    "codeDescription": "This is an example of a Vue Single-File Component using the Options API. It demonstrates the basic structure of an SFC with a script section defining data, a template section rendering the data, and a style section for component-scoped CSS.",
    "codeLanguage": "vue",
    "codeTokens": 136,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_0",
    "pageTitle": "Vue Single-File Components (SFC)",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding to Reactive Style Object (Vue)",
    "codeDescription": "Binds the `style` attribute to a reactive style object, dynamically applying styles based on the object's properties. This provides a cleaner way to manage style bindings in the template.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_26",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"styleObject\"></div>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Overriding Fallback Content with Slots Vue.js",
    "codeDescription": "This code snippet shows how to use the `<SubmitButton>` component and override the fallback content by providing the slot content \"Save\".",
    "codeLanguage": "vue-html",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_8",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<SubmitButton>Save</SubmitButton>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch with Flush and Debug Options - JavaScript",
    "codeDescription": "Demonstrates how to configure the `flush` timing and debugging options when using the `watch` function in Vue.js. These options allow fine-grained control over when the callback is executed and provide debugging hooks.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_21",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(source, callback, {\n  flush: 'post',\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Elements in JSX",
    "codeDescription": "This JSX snippet demonstrates how to import and define custom elements within a JSX component.  It imports the custom elements and then defines them using `customElements.define` before using them within the JSX markup. This allows for the usage of Vue-based custom elements in other frameworks that support JSX.",
    "codeLanguage": "jsx",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_13",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { MyFoo, MyBar } from 'path/to/elements.js'\n\ncustomElements.define('some-foo', MyFoo)\ncustomElements.define('some-bar', MyBar)\n\nexport function MyComponent() {\n  return <>\n    <some-foo ... >\n      <some-bar ... ></some-bar>\n    </some-foo>\n  </>\n}"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Custom Directive vFocus (Options API) JavaScript",
    "codeDescription": "Demonstrates the local registration of the `focus` directive using the `directives` option in a Vue component when using the Options API.  This directive calls the `focus()` method on the element when it is mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_7",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component A - Options API - Vue",
    "codeDescription": "This Vue component (ComponentA.vue) imports the shared `store` and makes it available as a data property.  It utilizes the Options API to achieve this. The template displays the `count` property from the store.",
    "codeLanguage": "Vue",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_5",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<!-- ComponentA.vue -->\n<script>\nimport { store } from './store.js'\n\nexport default {\n  data() {\n    return {\n      store\n    }\n  }\n}\n</script>\n\n<template>From A: {{ store.count }}</template>"
      }
    ],
    "relevance": 0.865,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Props to Child Component in HTML Template in Vue.js",
    "codeDescription": "Passes a dynamic prop named 'msg' to a child component named 'child-comp' using the `v-bind` shorthand syntax (':'). The value of the 'msg' prop is bound to the 'greeting' variable in the parent component's scope. This is the syntax to use within a non-SFC HTML template.",
    "codeLanguage": "vue-html",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_4",
    "pageTitle": "Vue.js Props: Passing Data from Parent to Child Components",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<child-comp :msg=\"greeting\"></child-comp>"
      }
    ],
    "relevance": 0.863,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Global Component",
    "codeDescription": "Illustrates registering a global component using app.component(). It creates a Vue application instance and then registers a component named 'MyComponent' with a provided component options object. This makes the component available for use in any other component within the application.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_4",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\n// register an options object\napp.component('MyComponent', {\n  /* ... */\n})"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injecting Provided Value (Composition API)",
    "codeDescription": "Illustrates how to inject a provided value within a component using the Composition API and the inject function. It imports the inject function from 'vue' and injects the value associated with the 'message' key within the setup function, logging it to the console. This allows components to access values provided at the application level.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_11",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Add Vitest Globals to TypeScript Configuration",
    "codeDescription": "This configures TypeScript to include vitest globals by adding `vitest/globals` to the `types` array in `tsconfig.json`. This allows you to use Vitest's test APIs without explicit imports.",
    "codeLanguage": "json",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_9",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\"]\n  }\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Component Usage",
    "codeDescription": "Demonstrates the basic usage of a dynamic component in Vue.js using the `<component>` special element and the `:is` attribute to bind to an active component.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_0",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<component :is=\"activeComponent\" />"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "CSS Modules Example - Vue",
    "codeDescription": "Shows how to use CSS Modules with the `<style module>` tag.  The resulting CSS classes are exposed as an object under the `$style` key, providing a way to scope CSS and avoid naming collisions. Requires CSS Modules support via a preprocessor or bundler plugin.",
    "codeLanguage": "vue",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_7",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Definition for defineCustomElement",
    "codeDescription": "Shows the TypeScript type definition for the `defineCustomElement` function and the `CustomElementsOptions` interface. It illustrates the structure and available options when defining custom elements in Vue.",
    "codeLanguage": "typescript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_0",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function defineCustomElement(\n  component:\n    | (ComponentOptions & CustomElementsOptions)\n    | ComponentOptions['setup'],\n  options?: CustomElementsOptions\n): {\n  new (props?: object): HTMLElement\n}\n\ninterface CustomElementsOptions {\n  styles?: string[]\n\n  // the following options are 3.5+\n  configureApp?: (app: App) => void\n  shadowRoot?: boolean\n  nonce?: string\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scaffold Vue Project with npm",
    "codeDescription": "This command uses npm to execute the create-vue scaffolding tool, which helps set up a new Vue project with a recommended project structure and configuration. It is a quick way to start a new Vue project using the latest best practices.",
    "codeLanguage": "sh",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_0",
    "pageTitle": "Vue Tooling Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ npm create vue@latest"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Sync Watcher (Composition API) - JavaScript",
    "codeDescription": "This snippet demonstrates creating a synchronous watcher using the Composition API. `flush: 'sync'` triggers the callback synchronously. The example shows the `watchSyncEffect()` alias.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_21",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(source, callback, {\n  flush: 'sync'\n})\n\nwatchEffect(callback, {\n  flush: 'sync'\n})\n\nimport { watchSyncEffect } from 'vue'\n\nwatchSyncEffect(() => {\n  /* executed synchronously upon reactive data change */\n})"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Globally Registered Components in Vue.js Template",
    "codeDescription": "Demonstrates how to use globally registered components within a Vue.js template. The components can be used in any component within the application without needing explicit import or registration in each component.",
    "codeLanguage": "vue-html",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_3",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method Handler Definition (Composition API)",
    "codeDescription": "Defines a method `greet` using Vue's Composition API.  It accesses a reactive variable `name` to construct a greeting message. It also accesses the native DOM event object. This showcases how to define event handlers as methods within a Vue component using the Composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_3",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "const name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Global Properties in Vue.js",
    "codeDescription": "This example demonstrates how to register global properties that can be accessed on any component instance inside the application.  This makes the property available inside any component template and on `this` of any component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_21",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.globalProperties.msg = 'hello'"
      },
      {
        "language": "javascript",
        "code": "export default {\n  mounted() {\n    console.log(this.msg) // 'hello'\n  }\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-model - Composition API - JavaScript",
    "codeDescription": "This code shows how to implement `v-model` functionality in a component using the Composition API and the `h()` function. It handles the `modelValue` prop and emits the `update:modelValue` event.",
    "codeLanguage": "JavaScript",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_33",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  setup(props, { emit }) {\n    return () =>\n      h(SomeComponent, {\n        modelValue: props.modelValue,\n        'onUpdate:modelValue': (value) => emit('update:modelValue', value)\n      })\n  }\n}"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Components with h() in Vue.js",
    "codeDescription": "This snippet illustrates how to create Vue.js component VNodes using the `h()` function. It demonstrates passing props, single default slots, and named slots to components.",
    "codeLanguage": "javascript",
    "codeTokens": 190,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_1",
    "pageTitle": "Vue.js Render Function APIs Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Foo from './Foo.vue'\n\n// passing props\nh(Foo, {\n  // equivalent of some-prop=\"hello\"\n  someProp: 'hello',\n  // equivalent of @update=\"() => {}\"\n  onUpdate: () => {}\n})\n\n// passing single default slot\nh(Foo, () => 'default slot')\n\n// passing named slots\n// notice the `null` is required to avoid\n// slots object being treated as props\nh(MyComponent, null, {\n  default: () => 'default slot',\n  foo: () => h('div', 'foo'),\n  bar: () => [h('span', 'one'), h('span', 'two')]\n})"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Counter Component - Composition API - Vue",
    "codeDescription": "This Vue component demonstrates a simple counter using the Composition API. It initializes a reactive `count` variable using `ref` and provides an `increment` function to update the count. The template displays the current count.",
    "codeLanguage": "Vue",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_0",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Setting Focus After Route Change (Composition API)",
    "codeDescription": "This Vue.js Composition API snippet watches the route path and sets focus to the `backToTop` ref after each route change. It imports `ref`, `watch`, and `useRoute` from Vue and Vue Router. It defines a reactive reference for `backToTop` and utilizes the `watch` function to monitor the route path, calling `focus()` on the referenced element whenever the path changes.",
    "codeLanguage": "Vue",
    "codeTokens": 160,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_3",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\nconst backToTop = ref()\n\nwatch(\n  () => route.path,\n  () => {\n    backToTop.value.focus()\n  }\n)\n</script>"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Validator and Default Prop Options Caveats in Vue.js",
    "codeDescription": "This snippet addresses caveats related to using function values for `validator` and `default` prop options in TypeScript versions less than 4.7. It demonstrates the importance of using arrow functions to prevent TypeScript from failing to infer the type of `this` inside these functions.",
    "codeLanguage": "typescript",
    "codeTokens": 185,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_2",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Installing a Plugin - Vue.js",
    "codeDescription": "Demonstrates how to install a Vue.js plugin using the `app.use()` method. It imports the `createApp` function from Vue and then uses `app.use()` to install the specified plugin, passing optional configuration options as a second argument. This allows the plugin to extend the application's functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_0",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using nextTick with Composition API in Vue",
    "codeDescription": "This code snippet demonstrates how to use `nextTick` within a Vue component using the Composition API. It increments a reactive `count` value and uses `nextTick` to wait for the DOM to update before asserting the updated value. The `await nextTick()` ensures the DOM has been updated before proceeding, demonstrating its usage with async/await.",
    "codeLanguage": "vue",
    "codeTokens": 192,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_1",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, nextTick } from 'vue'\n\nconst count = ref(0)\n\nasync function increment() {\n  count.value++\n\n  // DOM not yet updated\n  console.log(document.getElementById('counter').textContent) // 0\n\n  await nextTick()\n  // DOM is now updated\n  console.log(document.getElementById('counter').textContent) // 1\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "App-level Provide in Vue.js",
    "codeDescription": "This code shows how to provide values at the app level in Vue.js. This makes the provided values available to all components rendered within the app. This approach is useful for plugins. Import `createApp` from 'vue'.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_5",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')"
      }
    ],
    "relevance": 0.86,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple Type Boolean Prop (Composition API)",
    "codeDescription": "This snippet demonstrates how Vue.js casts boolean props when multiple types are allowed using the Composition API. Boolean casting takes precedence unless String appears before Boolean in the type array. When String is defined first, boolean casting rule does not apply and an empty string will be passed if the attribute is present.",
    "codeLanguage": "javascript",
    "codeTokens": 164,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_27",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, Number]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, String]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Number, Boolean]\n})\n\n// disabled will be parsed as an empty string (disabled=\"\")\ndefineProps({\n  disabled: [String, Boolean]\n})"
      }
    ],
    "relevance": 0.858,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Refs Type Definition (TypeScript)",
    "codeDescription": "This TypeScript interface defines the type for the `$refs` property, an object of DOM elements and component instances registered via template refs.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_8",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $refs: { [name: string]: Element | ComponentPublicInstance | null }\n}"
      }
    ],
    "relevance": 0.857,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Trim Modifier for v-model in Vue",
    "codeDescription": "This snippet demonstrates the use of the `.trim` modifier with `v-model`. This modifier automatically trims whitespace from the user input.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_22",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model.trim=\"msg\" />"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring ID Prefix for useId() in Vue.js",
    "codeDescription": "This snippet shows how to configure a prefix for all IDs generated via `useId()` inside this application. The `idPrefix` setting provides a way to namespace IDs generated by `useId()`.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_23",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.idPrefix = 'myApp'"
      },
      {
        "language": "javascript",
        "code": "// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Fallthrough Attributes with v-bind Vue HTML",
    "codeDescription": "This example shows how to bind fallthrough attributes to a specific element within the component using `v-bind=\"$attrs\"`. This is often used when attribute inheritance is disabled.",
    "codeLanguage": "vue-html",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_7",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div class=\"btn-wrapper\">\n  <button class=\"btn\" v-bind=\"$attrs\">Click Me</button>\n</div>"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Definition (Composition API)",
    "codeDescription": "This snippet demonstrates defining a computed property using the Composition API in Vue.js. It imports `reactive` and `computed` from Vue, creates a reactive `author` object, and then defines a computed property `publishedBooksMessage` that returns 'Yes' if the author has books, and 'No' otherwise.  The computed property is automatically updated whenever `author.books` changes.",
    "codeLanguage": "vue",
    "codeTokens": 215,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_5",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { reactive, computed } from 'vue'\n\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n\n// a computed ref\nconst publishedBooksMessage = computed(() => {\n  return author.books.length > 0 ? 'Yes' : 'No'\n})\n</script>\n\n<template>\n  <p>Has published books:</p>\n  <span>{{ publishedBooksMessage }}</span>\n</template>"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple Type Boolean Prop (Options API)",
    "codeDescription": "This snippet demonstrates how Vue.js casts boolean props when multiple types are allowed using the Options API. Boolean casting takes precedence unless String appears before Boolean in the type array. When String is defined first, boolean casting rule does not apply and an empty string will be passed if the attribute is present.",
    "codeLanguage": "javascript",
    "codeTokens": 188,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_28",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Boolean, Number]\n  }\n}\n\n// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Boolean, String]\n  }\n}\n\n// disabled will be casted to true\nexport default {\n  props: {\n    disabled: [Number, Boolean]\n  }\n}\n\n// disabled will be parsed as an empty string (disabled=\"\")\nexport default {\n  props: {\n    disabled: [String, Boolean]\n  }\n}"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using onUpdated to access updated DOM",
    "codeDescription": "This example demonstrates the usage of the `onUpdated` lifecycle hook to access and log the updated DOM content. The `onUpdated` hook is called after the component's DOM has been updated due to reactive state changes. It imports `ref` and `onUpdated` from 'vue', defines a reactive `count`, and logs the text content of an element with the id 'count' within the `onUpdated` callback.",
    "codeLanguage": "vue",
    "codeTokens": 182,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_1",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n  // text content should be the same as current `count.value`\n  console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n  <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Handling Event Arguments in Options API Vue JavaScript",
    "codeDescription": "This snippet demonstrates how to handle an event argument passed to a method in the Options API. The `increaseCount` method receives the event argument `n` and adds it to `this.count`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_8",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "methods: {\n  increaseCount(n) {\n    this.count += n\n  }\n}"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mounting Vue Application to DOM Element",
    "codeDescription": "Demonstrates mounting a Vue application to a specific DOM element reference using app.mount().  It gets a reference to the first child of the body element and then mounts the Vue application to that specific DOM node. This is an alternative to using a CSS selector.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_3",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.mount(document.body.firstChild)"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Template Refs - Composition API (3.5+) - JavaScript",
    "codeDescription": "This code snippet shows how to create a template ref using `useTemplateRef()` (Vue 3.5+) in the Composition API. The ref name is passed as a string prop to the vnode.",
    "codeLanguage": "JavaScript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_36",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, useTemplateRef } from 'vue'\n\nexport default {\n  setup() {\n    const divEl = useTemplateRef('my-div')\n\n    // <div ref=\"my-div\">\n    return () => h('div', { ref: 'my-div' })\n  }\n}"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Compiled props declaration in Vue",
    "codeDescription": "This JavaScript code shows the compiled output for the prop declaration in the preceding component. The `defineProps` macro and destructuring are transformed into a standard props declaration with default values and a `setup` function that accesses props.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_7",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    msg: { type: String, required: true },\n    count: { type: Number, default: 1 },\n    foo: String\n  },\n  setup(props) {\n    watchEffect(() => {\n      console.log(props.msg, props.count, props.foo)\n    })\n  }\n}"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injection Aliasing in Vue.js Options API",
    "codeDescription": "This code snippet demonstrates how to alias an injection key to a different local key using the object syntax in the `inject` option of Vue.js' Options API. The `from` property specifies the injection key, and the local key becomes the name of the property on the component instance (e.g., `this.localMessage`).",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_10",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  inject: {\n    /* local key */ localMessage: {\n      from: /* injection key */ 'message'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injecting Plugin Options (Composition API) - Vue.js",
    "codeDescription": "Shows how to inject the provided i18n options into a component using the Composition API's `inject` function. It imports `inject` from Vue and uses it to retrieve the `i18n` options, which can then be used within the component's setup function.",
    "codeLanguage": "vue",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_7",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\n\nconst i18n = inject('i18n')\n\nconsole.log(i18n.greetings.hello)\n</script>"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Simple Routing with Composition API in Vue.js",
    "codeDescription": "This snippet demonstrates a basic client-side routing implementation in Vue.js using the Composition API. It defines a `routes` object mapping URL hashes to Vue components, uses a `ref` to track the current path, and dynamically renders the appropriate component based on the `hashchange` event.",
    "codeLanguage": "Vue.js",
    "codeTokens": 236,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/routing.md#_snippet_0",
    "pageTitle": "Vue.js Routing Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>"
      }
    ],
    "relevance": 0.855,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Replacing Array (Options API)",
    "codeDescription": "Demonstrates how to replace an array in Vue.js using the Options API. The example filters an array of items and assigns the new, filtered array to `this.items`.  Vue intelligently re-renders only the changed elements, making this an efficient operation.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_24",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "this.items = this.items.filter((item) => item.message.match(/Foo/))"
      }
    ],
    "relevance": 0.854,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injecting Provided Value (Options API)",
    "codeDescription": "Demonstrates how to inject a provided value within a component using the Options API and the inject option. It defines an inject option that lists 'message' as an injection dependency and then accesses the injected value using `this.message` in the created lifecycle hook. This allows components to access values provided at the application level.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_12",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}"
      }
    ],
    "relevance": 0.852,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Normalizing to Values from Refs/Getters in Vue.js (toValue)",
    "codeDescription": "The `toValue` function normalizes a source into a plain value. If the source is a ref, it returns the inner value. If the source is a getter function, it invokes and returns the result.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_3",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function toValue<T>(source: T | Ref<T> | (() => T)): T"
      },
      {
        "language": "javascript",
        "code": "toValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1"
      },
      {
        "language": "typescript",
        "code": "import type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n  watch(() => toValue(id), id => {\n    // react to id changes\n  })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)"
      }
    ],
    "relevance": 0.851,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Writable Computed Property (Options API)",
    "codeDescription": "This code shows how to define a writable computed property `fullName` using the Options API. It includes both a `get` and a `set` function. The `get` function returns the concatenation of `firstName` and `lastName`, while the `set` function splits the new value and updates `firstName` and `lastName` accordingly.  Destructuring assignment is used in the setter.",
    "codeLanguage": "javascript",
    "codeTokens": 196,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_11",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject Option: Data Entry (Vue.js)",
    "codeDescription": "Shows how to use an injected value as a data entry in a Vue.js component. This allows a component to initialize its data with values provided by ancestor components.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_4",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Child = {\n  inject: ['foo'],\n  data() {\n    return {\n      bar: this.foo\n    }\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-bind Attribute Binding in Vue.js",
    "codeDescription": "Demonstrates how to use v-bind to dynamically bind HTML attributes to Vue.js expressions. This includes shorthand notations, dynamic attribute names, class and style bindings, and prop binding for components. v-bind allows flexible and reactive attribute manipulation based on component data.",
    "codeLanguage": "vue-html",
    "codeTokens": 346,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_6",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- bind an attribute -->\n<img v-bind:src=\"imageSrc\" />\n\n<!-- dynamic attribute name -->\n<button v-bind:[key]=\"value\"></button>\n\n<!-- shorthand -->\n<img :src=\"imageSrc\" />\n\n<!-- same-name shorthand (3.4+), expands to :src=\"src\" -->\n<img :src />\n\n<!-- shorthand dynamic attribute name -->\n<button :[key]=\"value\"></button>\n\n<!-- with inline string concatenation -->\n<img :src=\"'/path/to/images/' + fileName\" />\n\n<!-- class binding -->\n<div :class=\"{ red: isRed }\"></div>\n<div :class=\"[classA, classB]\"></div>\n<div :class=\"[classA, { classB: isB, classC: isC }]\"></div>\n\n<!-- style binding -->\n<div :style=\"{ fontSize: size + 'px' }\"></div>\n<div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n<!-- binding an object of attributes -->\n<div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n<!-- prop binding. \"prop\" must be declared in the child component. -->\n<MyComponent :prop=\"someThing\" />\n\n<!-- pass down parent props in common with a child component -->\n<MyComponent v-bind=\"$props\" />\n\n<!-- XLink -->\n<svg><a :xlink:special=\"foo\"></a></svg>"
      },
      {
        "language": "vue-html",
        "code": "<div :someProperty.prop=\"someObject\"></div>\n\n<!-- equivalent to -->\n<div .someProperty=\"someObject\"></div>"
      },
      {
        "language": "vue-html",
        "code": "<svg :view-box.camel=\"viewBox\"></svg>"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Animate Number with Watcher (Composition API)",
    "codeDescription": "This snippet demonstrates animating a number using a watcher and GSAP (GreenSock Animation Platform) in Vue.js with the Composition API. It watches for changes in the `number` ref and uses GSAP to tween the `tweened.number` reactive property, providing a smooth animation effect.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_8",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, reactive, watch } from 'vue'\nimport gsap from 'gsap'\n\nconst number = ref(0)\nconst tweened = reactive({\n  number: 0\n})\n\nwatch(number, (n) => {\n  gsap.to(tweened, { duration: 0.5, number: Number(n) || 0 })\n})"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-for Equivalent Render Function - JavaScript (Composition API)",
    "codeDescription": "Demonstrates the equivalent of the `v-for` directive using a render function with Composition API. Uses `map` to iterate over an array and generate a list of vnodes.",
    "codeLanguage": "js",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_8",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h(\n  'ul',\n  // assuming `items` is a ref with array value\n  items.value.map(({ id, text }) => {\n    return h('li', { key: id }, text)\n  })\n)"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing v-model Modifiers with defineModel in Vue",
    "codeDescription": "This code shows how to access modifiers used with the `v-model` directive by destructuring the return value of `defineModel()`. It demonstrates how to check if a modifier is present and conditionally transform the model value.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_19",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const [modelValue, modelModifiers] = defineModel()\n\n// corresponds to v-model.trim\nif (modelModifiers.trim) {\n  // ...\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Reactivity with ref and computed",
    "codeDescription": "Demonstrates how to use Vue's `computed` property to create a reactive value that automatically updates when its dependencies change. This is a more declarative approach than using `watchEffect` for simple calculations.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_7",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, computed } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = computed(() => A0.value + A1.value)\n\nA0.value = 2"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Object for Dynamic Attribute Binding (Options API)",
    "codeDescription": "This JavaScript snippet shows how to define a data property `objectOfAttrs` in a Vue Options API component, which contains attributes intended for dynamic binding using the `v-bind` directive.  It provides values for `id` and `class` which can be dynamically bound to an HTML element.  This example is intended to be used with the `v-bind` directive without an argument.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_8",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    objectOfAttrs: {\n      id: 'container',\n      class: 'wrapper'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Locally Registering Async Component (Composition API)",
    "codeDescription": "This snippet demonstrates how to register an async component locally using the composition API with `<script setup>`. The component is only available within the scope of the parent component.",
    "codeLanguage": "vue",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_4",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { defineAsyncComponent } from 'vue'\n\nconst AdminPage = defineAsyncComponent(() =>\n  import('./components/AdminPageComponent.vue')\n)\n</script>\n\n<template>\n  <AdminPage />\n</template>"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Template Ref in setup() (Composition API)",
    "codeDescription": "This snippet illustrates how to access and expose a template ref within the `setup()` function of a Vue component using the Composition API. The ref is initialized to `null` and then returned to be accessible in the template.",
    "codeLanguage": "js",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_2",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "setup() {\n  const pElementRef = ref(null)\n\n  return {\n    pElementRef\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding HTML Class with static class (Vue)",
    "codeDescription": "Demonstrates how to bind classes using the object syntax in Vue, combining a static class with dynamically toggled classes based on the `isActive` and `hasError` data properties.",
    "codeLanguage": "vue-html",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_3",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide value using setup function in Vue.js",
    "codeDescription": "This code snippet illustrates how to provide a value using the `provide` function within the `setup()` function when not using `<script setup>`. The `provide` function takes an injection key and the value to provide. It's crucial to call `provide()` synchronously inside `setup()` to ensure it registers correctly.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_1",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "watch() with Side Effect Cleanup (Composition API) - JavaScript",
    "codeDescription": "This snippet demonstrates how to perform side effect cleanup within a `watch` callback using the Composition API.  It uses `AbortController` to cancel a stale `fetch` request when the watched `id` changes. `onWatcherCleanup` registers the abort function.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_14",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const controller = new AbortController()\n\n  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n    // callback logic\n  })\n\n  onWatcherCleanup(() => {\n    // abort stale request\n    controller.abort()\n  })\n})"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing reactive data with ref",
    "codeDescription": "This script initializes a reactive boolean variable named `awesome` using `ref` from the `vue` library. The `awesome` variable controls the conditional rendering examples in the document.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_0",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\nconst awesome = ref(true)"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Slot Content in Parent Component (HTML)",
    "codeDescription": "This code snippet demonstrates how to pass slot content from a parent component to a child component using standard HTML. The content between the opening and closing tags of the child component will be rendered in the child's slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_1",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<child-comp>\n  This is some slot content!\n</child-comp>"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Nullable Type Prop (Composition API)",
    "codeDescription": "This snippet demonstrates how to define a prop that is required but can also accept a null value using Composition API. The `id` prop is defined to be either a string or null, and it is marked as required.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_22",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  id: {\n    type: [String, null],\n    required: true\n  }\n})"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating SSR App with Request-Specific Store Instance - Vue.js",
    "codeDescription": "This code snippet demonstrates how to create a new instance of the Vue application, including a new store instance, for each server request to prevent cross-request state pollution in SSR environments. It uses `createSSRApp` from Vue and `app.provide` to make the store available to components.",
    "codeLanguage": "javascript",
    "codeTokens": 190,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_7",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// app.js (shared between server and client)\nimport { createSSRApp } from 'vue'\nimport { createStore } from './store.js'\n\n// called on each request\nexport function createApp() {\n  const app = createSSRApp(/* ... */)\n  // create new instance of store per request\n  const store = createStore(/* ... */)\n  // provide store at the app level\n  app.provide('store', store)\n  // also expose store for hydration purposes\n  return { app, store }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property for Filtering (Options API)",
    "codeDescription": "Demonstrates how to use a computed property to filter an array in Vue.js using the Options API. The `evenNumbers` computed property returns a new array containing only the even numbers from the `numbers` data property. This maintains the immutability of the original array.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_26",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject value using Composition API in Vue.js",
    "codeDescription": "This code snippet demonstrates how to inject a value provided by an ancestor component using the `inject` function from Vue.js' Composition API. The `inject` function takes the injection key as an argument and returns the provided value.  Import `inject` from 'vue'.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_6",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Unit Testing Increment Function with Vitest",
    "codeDescription": "This Vitest code tests the `increment` function to ensure it behaves as expected. It includes tests to verify that the function increments the current number by 1, does not increment it over the maximum, and uses the default maximum of 10. It imports the `increment` function from `./helpers.js`.",
    "codeLanguage": "js",
    "codeTokens": 189,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_1",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "js",
        "code": "// helpers.spec.js\nimport { increment } from './helpers'\n\ndescribe('increment', () => {\n  test('increments the current number by 1', () => {\n    expect(increment(0, 10)).toBe(1)\n  })\n\n  test('does not increment the current number over the max', () => {\n    expect(increment(10, 10)).toBe(10)\n  })\n\n  test('has a default max of 10', () => {\n    expect(increment(10)).toBe(10)\n  })\n})"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch with Side Effect Cleanup - JavaScript",
    "codeDescription": "Demonstrates how to use the `onCleanup` function within a `watch` callback to clean up side effects. This is useful for cancelling pending asynchronous operations when the watched source changes.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_24",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(id, async (newId, oldId, onCleanup) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onCleanup(cancel)\n  data.value = await response\n})"
      }
    ],
    "relevance": 0.85,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref Unwrapping After Destructuring in Template",
    "codeDescription": "Demonstrates ref unwrapping in a Vue template after destructuring the `id` property into a top-level property.",
    "codeLanguage": "vue-html",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_28",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{ id + 1 }}"
      }
    ],
    "relevance": 0.848,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Updating List using filter() - Composition API",
    "codeDescription": "This JavaScript code demonstrates how to update a list in Vue.js Composition API by replacing the original array with a new filtered array. The `filter()` method is used to create the new array, and `todos` is assumed to be a `ref` object, hence the `.value` access.",
    "codeLanguage": "js",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_3",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "js",
        "code": "todos.value = todos.value.filter(/* ... */)"
      }
    ],
    "relevance": 0.848,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Emits in Vue.js",
    "codeDescription": "This snippet explains how to declare the expected payload type for an emitted event using the object syntax of the `emits` option. It also highlights that all non-declared emitted events will throw a type error when called, enforcing type safety for event emissions.",
    "codeLanguage": "typescript",
    "codeTokens": 169,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_3",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes in Script Setup Vue",
    "codeDescription": "This code shows how to access fallthrough attributes using `useAttrs()` in `<script setup>`. The `attrs` object will contain all the fallthrough attributes.",
    "codeLanguage": "vue",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_10",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Include String",
    "codeDescription": "Demonstrates how to use the `include` prop with a comma-delimited string to specify which components should be cached by `<KeepAlive>`.  Only components with names matching 'a' or 'b' will be cached.",
    "codeLanguage": "vue-html",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_2",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use keyed v-for - Good Example - HTML",
    "codeDescription": "Demonstrates the correct way of using `v-for` with a `key` attribute, ensuring predictable behavior and optimal performance when the list changes. The key should be unique for each item in the list.",
    "codeLanguage": "vue-html",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_9",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Elements in Vue",
    "codeDescription": "This Vue snippet illustrates how to import and register custom elements within a Vue component using the `register` function from the custom elements library. The `register` function is called within the `<script setup>` section to define the custom elements, making them available for use in the component's template.",
    "codeLanguage": "vue",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_12",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { register } from 'path/to/elements.js'\nregister()\n</script>\n\n<template>\n  <my-foo ...>\n    <my-bar ...></my-bar>\n  </my-foo>\n</template>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Conditional rendering with v-if on template",
    "codeDescription": "This snippet demonstrates the use of `v-if` on a `<template>` element to conditionally render multiple elements. The elements inside the template are only rendered if the `ok` variable is truthy. The template element itself is not rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_4",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting events using setup context in Options API JavaScript",
    "codeDescription": "This snippet shows how to emit events using the `emit` function available on the `setup()` context in the Options API. This is an alternate method that is used for emitting events when using an explicit `setup` function.",
    "codeLanguage": "JavaScript",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_13",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  emits: ['inFocus', 'submit'],\n  setup(props, ctx) {\n    ctx.emit('submit')\n  }\n}"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Component (Composition API) Vue",
    "codeDescription": "Shows how to import and use a child component (ButtonCounter.vue) within a parent component using the Composition API with `<script setup>`.  The imported component is automatically available in the template.",
    "codeLanguage": "vue",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_5",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Calling Method with Argument in Inline Handler",
    "codeDescription": "This snippet demonstrates how to call a method with a custom argument from an inline handler in a Vue template.  The `@click` directive is used to bind the click event to the `say` method, passing the string 'hello' or 'bye' as an argument. Each button calls the same method but with a different argument.",
    "codeLanguage": "vue-html",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_8",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing Type Hints for Slots with defineSlots in Vue",
    "codeDescription": "This snippet shows how to use the `defineSlots` macro to provide type hints for slot name and props type checking in Vue. This macro allows you to specify the expected props for each slot, improving IDE support and code maintainability.",
    "codeLanguage": "vue",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_24",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst slots = defineSlots<{\n  default(props: { msg: string }): any\n}>()\n</script>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-on Equivalent JSX - JSX",
    "codeDescription": "Demonstrates how to handle events using JSX by passing an `onClick` prop. Event listeners are passed as `onXxx` props.",
    "codeLanguage": "jsx",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_13",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "jsx",
        "code": "<button\n  onClick={(event) => {\n    /* ... */\n  }}\n>\n  Click Me\n</button>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Select Single Value with v-model in Vue",
    "codeDescription": "This snippet demonstrates how to create a single select dropdown using the `<select>` element and bind its selected value to a data property using `v-model`. It includes a disabled option as a best practice for iOS.",
    "codeLanguage": "vue-html",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_11",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-model - Options API - JavaScript",
    "codeDescription": "This code shows how to implement `v-model` functionality in a component using the Options API and the `h()` function. It handles the `modelValue` prop and emits the `update:modelValue` event.",
    "codeLanguage": "JavaScript",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_34",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  render() {\n    return h(SomeComponent, {\n      modelValue: this.modelValue,\n      'onUpdate:modelValue': (value) => this.$emit('update:modelValue', value)\n    })\n  }\n}"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Hooks for Staggered Transitions with GSAP",
    "codeDescription": "This JavaScript snippet uses the GSAP library to animate the enter transition of list items with a delay based on their index. The `onEnter` function is called when an item is entering the list, and the GSAP `to` method is used to animate the item's opacity and height.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_4",
    "pageTitle": "Vue.js TransitionGroup Component",
    "codeList": [
      {
        "language": "javascript",
        "code": "function onEnter(el, done) {\n  gsap.to(el, {\n    opacity: 1,\n    height: '1.6em',\n    delay: el.dataset.index * 0.15,\n    onComplete: done\n  })\n}"
      }
    ],
    "relevance": 0.845,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed property (Options API, SFC)",
    "codeDescription": "This JavaScript snippet demonstrates how to define a computed property `filteredTodos` within a Vue.js component using the Options API and single-file component (SFC) syntax. The `filteredTodos` property is expected to return a filtered list of todos based on the `hideCompleted` state.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_1",
    "pageTitle": "Vue.js Computed Properties in Todo List",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // ...\n  computed: {\n    filteredTodos() {\n      // return filtered todos based on `this.hideCompleted`\n    }\n  }\n}"
      }
    ],
    "relevance": 0.842,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Event Argument in Inline Handlers",
    "codeDescription": "Demonstrates how to access the original DOM event in an inline handler. The first button utilizes the `$event` special variable to pass the event object to the `warn` method.  The second button uses an inline arrow function to achieve the same result. Both approaches provide access to the native event object within the handler.",
    "codeLanguage": "vue-html",
    "codeTokens": 138,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_9",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- using $event special variable -->\n<button @click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n\n<!-- using inline arrow function -->\n<button @click=\"(event) => warn('Form cannot be submitted yet.', event)\">\n  Submit\n</button>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "useId() Usage Example - Vue",
    "codeDescription": "Illustrates how to use `useId()` within a `<script setup>` component to generate a unique ID for a form element's label and input. This ensures proper association between the label and input, improving accessibility.",
    "codeLanguage": "vue",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_7",
    "pageTitle": "Vue Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n  import { useId } from 'vue'\n\n  const id = useId()\n  </script>\n\n  <template>\n    <form>\n      <label :for=\"id\">Name:</label>\n      <input :id=\"id\" type=\"text\" />\n    </form>\n  </template>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Hydrate on Interaction",
    "codeDescription": "This snippet demonstrates how to use `hydrateOnInteraction` with an async component for lazy hydration, hydrating when specified event(s) are triggered on the component element(s).",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_9",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent, hydrateOnInteraction } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})"
      },
      {
        "language": "javascript",
        "code": "hydrateOnInteraction(['wheel', 'mouseover'])"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Testing Stepper Component with Vue Test Utils",
    "codeDescription": "This snippet demonstrates testing a Stepper component using Vue Test Utils. It mounts the component with a `max` prop, checks the initial value, triggers a click on the increment button, and asserts the updated value. This example tests the component's behavior based on user interactions and prop input.",
    "codeLanguage": "JavaScript",
    "codeTokens": 153,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_4",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const valueSelector = '[data-testid=stepper-value]'\nconst buttonSelector = '[data-testid=increment]'\n\nconst wrapper = mount(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\nexpect(wrapper.find(valueSelector).text()).toContain('0')\n\nawait wrapper.find(buttonSelector).trigger('click')\n\nexpect(wrapper.find(valueSelector).text()).toContain('1')"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition with Key Attribute - Options API - Vue",
    "codeDescription": "This snippet demonstrates how to force a transition by using the `key` attribute on a span element inside the `<Transition>` component. The `count` data property is incremented every second, causing the span to re-render with a different key and triggering the transition. This example uses Vue 2/3's Options API.",
    "codeLanguage": "vue",
    "codeTokens": 174,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_26",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      count: 1,\n      interval: null \n    }\n  },\n  mounted() {\n    this.interval = setInterval(() => {\n      this.count++;\n    }, 1000)\n  },\n  beforeDestroy() {\n    clearInterval(this.interval)\n  }\n}\n</script>\n\n<template>\n  <Transition>\n    <span :key=\"count\">{{ count }}</span>\n  </Transition>\n</template>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Instance-Specific Debounced Method in Vue",
    "codeDescription": "This code snippet shows the recommended approach to create a debounced method within a Vue component using the `created` lifecycle hook. This ensures that each component instance has its own independent copy of the debounced function, preventing interference. The timer is also canceled in the `unmounted` lifecycle hook.",
    "codeLanguage": "JavaScript",
    "codeTokens": 168,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_31",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  created() {\n    // each instance now has its own copy of debounced handler\n    this.debouncedClick = _.debounce(this.click, 500)\n  },\n  unmounted() {\n    // also a good idea to cancel the timer\n    // when the component is removed\n    this.debouncedClick.cancel()\n  },\n  methods: {\n    click() {\n      // ... respond to click ...\n    }\n  }\n}"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple Style Values (Vue)",
    "codeDescription": "Shows how to provide an array of multiple values for a single style property. The browser will choose the last supported value from the array.",
    "codeLanguage": "vue-html",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_29",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple v-model Bindings (Composition API - Pre 3.4)",
    "codeDescription": "Demonstrates how to implement multiple v-model bindings in Vue.js using the Composition API for versions prior to 3.4.  It defines props for firstName and lastName, emits update events, and binds the values to input fields. Requires Vue.js and the Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 176,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_18",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  firstName: String,\n  lastName: String\n})\n\ndefineEmits(['update:firstName', 'update:lastName'])\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic Transition Example Vue HTML",
    "codeDescription": "A basic example demonstrating the use of the `<Transition>` component with `v-if` to toggle the visibility of a paragraph element. When the `show` data property changes, the transition is triggered.",
    "codeLanguage": "vue-html",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_0",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vite Config for Custom Elements in Vue",
    "codeDescription": "This snippet shows how to configure Vite to treat HTML tags containing a hyphen as custom elements when using the Vue plugin.  This configuration is part of the build process and affects how Vue compiles the templates.",
    "codeLanguage": "JavaScript",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_1",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat all tags with a dash as custom elements\n          isCustomElement: (tag) => tag.includes('-')\n        }\n      }\n    })\n  ]\n}"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mixing Local and Global Styles - Vue",
    "codeDescription": "Demonstrates how to include both scoped and non-scoped styles within the same component by using separate `<style>` tags. This allows for a combination of component-specific and global styles.",
    "codeLanguage": "vue",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_6",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<style>\n/* global styles */\n</style>\n\n<style scoped>\n/* local styles */\n</style>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "activated / deactivated (Options API)",
    "codeDescription": "Illustrates the usage of the `activated` and `deactivated` lifecycle hooks in a component using the Options API. These hooks are called when a component is activated (re-inserted from the cache) and deactivated (removed from the DOM into the cache), respectively. They are also called on mount and unmount.",
    "codeLanguage": "js",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_7",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  activated() {\n    // called on initial mount\n    // and every time it is re-inserted from the cache\n  },\n  deactivated() {\n    // called when removed from the DOM into the cache\n    // and also when unmounted\n  }\n}"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition with Key Attribute - Composition API - Vue",
    "codeDescription": "This snippet demonstrates how to force a transition by using the `key` attribute on a span element inside the `<Transition>` component.  The `count` ref is incremented every second, causing the span to re-render with a different key and triggering the transition. This uses Vue 3's Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 136,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_25",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue';\nconst count = ref(0);\n\nsetInterval(() => count.value++, 1000);\n</script>\n\n<template>\n  <Transition>\n    <span :key=\"count\">{{ count }}</span>\n  </Transition>\n</template>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Usage with Class Binding (Vue)",
    "codeDescription": "Illustrates how to use class binding when utilizing a Vue component. The 'active' class is dynamically added based on the 'isActive' property.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_17",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent :class=\"{ active: isActive }\" />"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple v-model Bindings with Different Arguments and Modifiers in Vue",
    "codeDescription": "This code snippet illustrates the usage of multiple `v-model` directives, each with a different argument and modifier. `first-name` with `capitalize` and `last-name` with `uppercase` are used as examples.",
    "codeLanguage": "vue-html",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_27",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<UserName\n  v-model:first-name.capitalize=\"first\"\n  v-model:last-name.uppercase=\"last\"\n/>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Prop as Initial Data (Options API)",
    "codeDescription": "This snippet demonstrates how to use a prop as the initial value for a local data property using Options API. The `initialCounter` prop is used to initialize the `counter` data property, disconnecting it from future prop updates.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_15",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['initialCounter'],\n  data() {\n    return {\n      // counter only uses this.initialCounter as the initial value;\n      // it is disconnected from future prop updates.\n      counter: this.initialCounter\n    }\n  }\n}"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Basic Async Component",
    "codeDescription": "This snippet demonstrates the basic usage of `defineAsyncComponent` to load a component asynchronously. It shows how to use a Promise to resolve the component definition.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_0",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using onMounted to access template ref",
    "codeDescription": "This example demonstrates how to use the `onMounted` lifecycle hook to access a DOM element using a template ref. The `onMounted` hook ensures that the DOM is available before accessing the element. It imports `ref` and `onMounted` from 'vue', defines a ref called `el`, and accesses its value within the `onMounted` callback.",
    "codeLanguage": "vue",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_0",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n  el.value // <div>\n})\n</script>\n\n<template>\n  <div ref=\"el\"></div>\n</template>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Plugin",
    "codeDescription": "Illustrates how to install a plugin into a Vue application using app.use().  It imports createApp from 'vue' and a plugin named 'MyPlugin' from './plugins/MyPlugin'. The plugin is then installed using app.use(MyPlugin), allowing the plugin to extend the application's functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_9",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Enabling Import Maps for Vue (Composition API)",
    "codeDescription": "This snippet demonstrates using import maps to map the 'vue' import specifier to the Vue.js ES module CDN URL when using Composition API. This allows using `import { createApp } from 'vue'` directly. It also includes the application initialization code using Composition API.",
    "codeLanguage": "HTML",
    "codeTokens": 174,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_18",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'vue'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Computed Property (options API)",
    "codeDescription": "Demonstrates how to move a complex expression into a computed property within a Vue.js component's options API. The computed property handles the logic and returns a value that can be easily used in the template.",
    "codeLanguage": "js",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_35",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "// The complex expression has been moved to a computed property\ncomputed: {\n  normalizedFullName() {\n    return this.fullName.split(' ')\n      .map(word => word[0].toUpperCase() + word.slice(1))\n      .join(' ')\n  }\n}"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "ref() with Generic Type and no Initial Value in Vue",
    "codeDescription": "This shows what happens when you specify a generic type argument to `ref()` but omit the initial value. The resulting type will be a union type that includes `undefined`.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_18",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "// inferred type: Ref<number | undefined>\nconst n = ref<number>()"
      }
    ],
    "relevance": 0.84,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Proxy vs. Original Object",
    "codeDescription": "This snippet highlights that `reactive()` returns a proxy, not the original object. Modifying the original object will not trigger reactivity, reinforcing the need to work exclusively with the proxy returned by `reactive()`.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_19",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "javascript",
        "code": "const raw = {}\nconst proxy = reactive(raw)\n\n// proxy is NOT equal to the original.\nconsole.log(proxy === raw) // false"
      }
    ],
    "relevance": 0.839,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Vue Component",
    "codeDescription": "This snippet renders the imported DeveloperLanding component within the template. It displays the component's UI and functionality.",
    "codeLanguage": "Vue",
    "codeTokens": 42,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/developers/index.md#_snippet_1",
    "pageTitle": "Vue Developers Documentation",
    "codeList": [
      {
        "language": "Vue",
        "code": "<DeveloperLanding />"
      }
    ],
    "relevance": 0.838,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Force Update Type Definition (TypeScript)",
    "codeDescription": "This TypeScript interface defines the `$forceUpdate` method for forcing the component instance to re-render. It should be rarely needed given Vue's fully automatic reactivity system.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_14",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $forceUpdate(): void\n}"
      }
    ],
    "relevance": 0.836,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding checkbox with v-model in Vue.js",
    "codeDescription": "This HTML snippet demonstrates binding a checkbox to a `done` property of a `todo` object within a `v-for` loop. When the checkbox is checked or unchecked, the corresponding `todo.done` property is updated reactively.",
    "codeLanguage": "vue-html",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_0",
    "pageTitle": "Vue.js Computed Properties in Todo List",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<li v-for=\"todo in todos\">\n  <input type=\"checkbox\" v-model=\"todo.done\">\n  ...\n</li>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Debugging (JavaScript)",
    "codeDescription": "This JavaScript code shows how to debug computed properties using the `onTrack` and `onTrigger` options. The `onTrack` callback is triggered when a reactive property or ref is tracked as a dependency, and the `onTrigger` callback is triggered when a dependency is mutated.  These options only work in development mode.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_12",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plusOne = computed(() => count.value + 1, {\n  onTrack(e) {\n    // triggered when count.value is tracked as a dependency\n    debugger\n  },\n  onTrigger(e) {\n    // triggered when count.value is mutated\n    debugger\n  }\n})\n\n// access plusOne, should trigger onTrack\nconsole.log(plusOne.value)\n\n// mutate count.value, should trigger onTrigger\ncount.value++"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Adding a Skip Link in Vue",
    "codeDescription": "This code snippet adds a skip link to the top of the `App.vue` component, allowing users to skip repeated content and navigate directly to the main content area.  It includes HTML for the skip link and an anchor, along with a ref for managing focus.  The skip link is initially hidden and appears when focused.",
    "codeLanguage": "HTML",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_0",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<span ref=\"backToTop\" tabindex=\"-1\" />\n<ul class=\"skip-links\">\n  <li>\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Style to Array (Vue)",
    "codeDescription": "Binds the `style` attribute to an array of style objects. This merges multiple style objects and applies them to the same element, useful for applying multiple sets of styles.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_28",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"[baseStyles, overridingStyles]\"></div>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Template using $attrs (Vue)",
    "codeDescription": "Shows how to use `$attrs` in a Vue component's template to bind inherited attributes, including the `class` attribute, to a specific element. This is necessary when the component has multiple root elements.",
    "codeLanguage": "vue-html",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_18",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component Definition in Vue.js",
    "codeDescription": "This JavaScript snippet showcases how to define an asynchronous component in Vue.js using `defineAsyncComponent`.  The component is loaded only when it's rendered on the page, enabling code splitting and reducing initial load time.  `Foo.vue` and its dependencies are created as a separate chunk.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_1",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent } from 'vue'\n\n// a separate chunk is created for Foo.vue and its dependencies.\n// it is only fetched on demand when the async component is\n// rendered on the page.\nconst Foo = defineAsyncComponent(() => import('./Foo.vue'))"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition Between Elements in Vue HTML",
    "codeDescription": "This snippet shows how to transition between two elements using `v-if` / `v-else` / `v-else-if` directives within a `<Transition>` component. The key is ensuring that only one element is visible at any given time to enable smooth transitions between them.",
    "codeLanguage": "vue-html",
    "codeTokens": 134,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_21",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition>\n  <button v-if=\"docState === 'saved'\">Edit</button>\n  <button v-else-if=\"docState === 'edited'\">Save</button>\n  <button v-else-if=\"docState === 'editing'\">Cancel</button>\n</Transition>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Destructuring refs with $() macro",
    "codeDescription": "This JavaScript code demonstrates the usage of the `$()` macro for destructuring an object of refs returned by a composition function (`useMouse` from `@vueuse/core`).  The `$()` macro ensures that the destructured variables (`x` and `y`) become reactive variables.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_3",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { useMouse } from '@vueuse/core'\n\nconst { x, y } = $(useMouse())\n\nconsole.log(x, y)"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Emitted Events with Payload Type (Composition API) TypeScript",
    "codeDescription": "This snippet demonstrates how to declare emitted events with payload type validation in the Composition API using TypeScript. The `submit` event expects a payload with `email` and `password` properties and validates the payload at runtime.",
    "codeLanguage": "TypeScript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_15",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "<script setup lang=\"ts\">\nconst emit = defineEmits({\n  submit(payload: { email: string, password: string }) {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Toggle CSS Class for Animation (Options API)",
    "codeDescription": "This snippet shows how to toggle a CSS class to trigger an animation in Vue.js using the Options API. It uses the `data` property to manage the disabled state and the `methods` property to define the `warnDisabled` function. The disabled state is bound to the `shake` class in the HTML template.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_1",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      disabled: false\n    }\n  },\n  methods: {\n    warnDisabled() {\n      this.disabled = true\n      setTimeout(() => {\n        this.disabled = false\n      }, 1500)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue HTML Template Example with Static Caching",
    "codeDescription": "This Vue HTML template demonstrates static caching. The `foo` and `bar` divs are static content which are cached by the compiler and reused in subsequent re-renders. The dynamic content is bound to the `dynamic` property.",
    "codeLanguage": "HTML",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_3",
    "pageTitle": "Vue Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Listening for Emitted Events in Parent Component (HTML)",
    "codeDescription": "This code shows how a parent component listens for the 'response' event emitted by a child component using the `v-on` directive (shorthand `@`) in a standard HTML template.  The handler function receives the argument passed from the child and assigns it to a local state variable `childMsg`.",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#_snippet_4",
    "pageTitle": "Vue.js Component Event Emission",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<child-comp @response=\"(msg) => childMsg = msg\"></child-comp>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Debugging Computed Properties in Vue.js",
    "codeDescription": "Illustrates how to debug computed properties using the `onTrack` and `onTrigger` options within the computed function.  These options allow setting breakpoints when dependencies are tracked or when the computed value is triggered.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_3",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plusOne = computed(() => count.value + 1, {\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Advanced Transition Vue HTML",
    "codeDescription": "A more advanced example of using the `<Transition>` component with a named transition. This example toggles the visibility of a paragraph using `v-if` and applies a slide-fade animation.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_4",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"slide-fade\">\n  <p v-if=\"show\">hello</p>\n</Transition>"
      }
    ],
    "relevance": 0.835,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Complex Prop Types with Options API in Vue",
    "codeDescription": "This code shows defining a complex prop type with `defineComponent` using the Options API. It uses `PropType` to define the type of the `book` prop as a `Book` object. This method is commonly used when working with the Options API.",
    "codeLanguage": "typescript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_9",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    book: Object as PropType<Book>\n  }\n})"
      }
    ],
    "relevance": 0.833,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-cloak Directive Usage in Vue.js",
    "codeDescription": "Shows how to use v-cloak to hide un-compiled templates until Vue.js is ready, preventing a flash of unstyled content.  This directive is particularly useful in no-build-step setups. Requires corresponding CSS to initially hide the element.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_11",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "css",
        "code": "[v-cloak] {\n  display: none;\n}"
      },
      {
        "language": "vue-html",
        "code": "<div v-cloak>\n  {{ message }}\n</div>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Destructuring emit from setup context in Options API JavaScript",
    "codeDescription": "This snippet demonstrates how to destructure the `emit` function from the `setup()` context, providing a more concise way to emit events within the Options API.",
    "codeLanguage": "JavaScript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_14",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  emits: ['inFocus', 'submit'],\n  setup(props, { emit }) {\n    emit('submit')\n  }\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "script setup Example - Composition API - Vue",
    "codeDescription": "Example of using `<script setup>` to simplify Composition API usage in Single-File Components (SFCs). Top-level imports, variables, and functions declared within `<script setup>` are automatically available in the template.\nDependencies: Vue.js",
    "codeLanguage": "Vue",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_9",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Watch Examples (JavaScript)",
    "codeDescription": "These JavaScript examples demonstrate different ways to use the `$watch` method: watching a property name, a dot-delimited path, and a complex expression using a getter function. It also shows how to stop a watcher.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_11",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "this.$watch('a', (newVal, oldVal) => {})\n"
      },
      {
        "language": "javascript",
        "code": "this.$watch('a.b', (newVal, oldVal) => {})\n"
      },
      {
        "language": "javascript",
        "code": "this.$watch(\n  // every time the expression `this.a + this.b` yields\n  // a different result, the handler will be called.\n  // It's as if we were watching a computed property\n  // without defining the computed property itself.\n  () => this.a + this.b,\n  (newVal, oldVal) => {}\n)"
      },
      {
        "language": "javascript",
        "code": "const unwatch = this.$watch('a', cb)\n\n// later...\nunwatch()"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Same-name Shorthand for v-bind in Vue 3.4+",
    "codeDescription": "This snippet showcases the same-name shorthand for the `v-bind` directive, available in Vue 3.4 and later. When the attribute name matches the JavaScript value being bound, the attribute value can be omitted. This simplifies the syntax, making it more concise. This feature is similar to property shorthand when declaring objects in JavaScript.",
    "codeLanguage": "vue-html",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_4",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- same as :id=\"id\" -->\n<div :id></div>\n\n<!-- this also works -->\n<div v-bind:id></div>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Component Rendering - JSX",
    "codeDescription": "This snippet shows how to dynamically render components using JSX based on a condition. It imports `Foo` and `Bar` components and conditionally renders either `Foo` or `Bar` based on the value of `ok.value`.",
    "codeLanguage": "JSX",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_21",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JSX",
        "code": "function render() {\n  return ok.value ? <Foo /> : <Bar />\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Identity Hazard Example with markRaw()",
    "codeDescription": "Illustrates a potential identity hazard when using `markRaw()` with nested objects. While the top-level object is raw, nested objects are still reactive, leading to `foo.nested === bar.nested` evaluating to `false` because one is proxied and the other is not.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_8",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = markRaw({\n  nested: {}\n})\n\nconst bar = reactive({\n  // although `foo` is marked as raw, foo.nested is not.\n  nested: foo.nested\n})\n\nconsole.log(foo.nested === bar.nested) // false"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing updated Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `updated` lifecycle hook, which is called after a Vue.js component has updated its DOM tree due to a reactive state change. This hook is called after any DOM update of the component. This hook is not called during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_5",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  updated?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Form with Accessible Placeholders",
    "codeDescription": "This code demonstrates a Vue.js form utilizing placeholders. It's crucial to ensure sufficient color contrast for placeholders to meet accessibility standards.  If the contrast is poor, it could be confused for pre-populated data.  This example shows how to set the color explicitly.",
    "codeLanguage": "vue-html",
    "codeTokens": 191,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_10",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      type=\"text\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n      :placeholder=\"item.placeholder\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Limiting Instance Access (Options API)",
    "codeDescription": "Demonstrates how to use the `expose` option in the Options API to limit access to a child component's properties and methods from a parent component using a template ref. It defines `publicData`, `privateData`, `publicMethod`, and `privateMethod`, and then exposes only `publicData` and `publicMethod` using the `expose` option.",
    "codeLanguage": "javascript",
    "codeTokens": 160,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_10",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  expose: ['publicData', 'publicMethod'],\n  data() {\n    return {\n      publicData: 'foo',\n      privateData: 'bar'\n    }\n  },\n  methods: {\n    publicMethod() {\n      /* ... */\n    },\n    privateMethod() {\n      /* ... */\n    }\n  }\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Slots to Components - JavaScript",
    "codeDescription": "This code shows how to pass slots to a component using the `h()` function. It demonstrates passing both a single default slot and named slots as functions within an object. The `null` argument is required to avoid the slots object being treated as props.",
    "codeLanguage": "JavaScript",
    "codeTokens": 156,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_26",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// single default slot\nh(MyComponent, () => 'hello')\n\n// named slots\n// notice the `null` is required to avoid\n// the slots object being treated as props\nh(MyComponent, null, {\n  default: () => 'default slot',\n  foo: () => h('div', 'foo'),\n  bar: () => [h('span', 'one'), h('span', 'two')]\n})"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-on Equivalent Render Function - JavaScript",
    "codeDescription": "Demonstrates how to handle events using a render function by passing an `onClick` prop. Event listeners are passed as `onXxx` props.",
    "codeLanguage": "js",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_12",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h(\n  'button',\n  {\n    onClick(event) {\n      /* ... */\n    }\n  },\n  'Click Me'\n)"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Setting Global Error Handler",
    "codeDescription": "Shows how to assign a global error handler using app.config.errorHandler. The error handler function receives the error, the component instance, and an information string as arguments and can be used to report errors to a service or perform other error handling tasks. This allows centralized error management for the entire Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_15",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Example - Options API - Javascript",
    "codeDescription": "Illustrates the use of a computed property in the Options API to filter a list of users based on their active status. This is a good practice to avoid using `v-if` with `v-for` directly on the element.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_11",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "computed: {\n  activeUsers() {\n    return this.users.filter(user => user.isActive)\n  }\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Merging Props with mergeProps() in Vue.js",
    "codeDescription": "This snippet demonstrates how to use the `mergeProps()` function in Vue.js to merge multiple props objects.  It showcases the special handling for `class`, `style`, and `onXxx` event listeners, where multiple listeners are merged into an array.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_2",
    "pageTitle": "Vue.js Render Function APIs Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { mergeProps } from 'vue'\n\nconst one = {\n  class: 'foo',\n  onClick: handlerA\n}\n\nconst two = {\n  class: { bar: true },\n  onClick: handlerB\n}\n\nconst merged = mergeProps(one, two)\n/**\n {\n   class: 'foo bar',\n   onClick: [handlerA, handlerB]\n }\n */"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Deep Watcher in Composition API (Vue.js)",
    "codeDescription": "This code shows that calling `watch()` directly on a reactive object creates a deep watcher by default. It also demonstrates how to force a deep watch when using a getter function with the `deep: true` option.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_7",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  () => state.someObject,\n  (newValue, oldValue) => {\n    // Note: `newValue` will be equal to `oldValue` here\n    // *unless* state.someObject has been replaced\n  },\n  { deep: true }\n)"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Resolving Component with resolveComponent() in Vue.js Options API",
    "codeDescription": "This snippet demonstrates resolving a registered component by name using `resolveComponent()` within the options API render function. It shows how to render the resolved component using the `h` function.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_5",
    "pageTitle": "Vue.js Render Function APIs Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h, resolveComponent } from 'vue'\n\nexport default {\n  render() {\n    const ButtonCounter = resolveComponent('ButtonCounter')\n    return h(ButtonCounter)\n  }\n}"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Transition for Nested Elements in HTML",
    "codeDescription": "This Vue.js transition component wraps a nested structure.  The transition classes will be applied to the outer div, but the CSS rules target the inner element for animation.",
    "codeLanguage": "vue-html",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_10",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"nested\">\n  <div v-if=\"show\" class=\"outer\">\n    <div class=\"inner\">\n      Hello\n    </div>\n  </div>\n</Transition>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Transition with Custom CSS Classes in HTML",
    "codeDescription": "This example demonstrates the use of custom CSS classes for transitions using the `enter-active-class` and `leave-active-class` props. It assumes that Animate.css is included and uses its animation classes.",
    "codeLanguage": "vue-html",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_8",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- assuming Animate.css is included on the page -->\n<Transition\n  name=\"custom-classes\"\n  enter-active-class=\"animate__animated animate__tada\"\n  leave-active-class=\"animate__animated animate__bounceOutRight\"\n>\n  <p v-if=\"show\">hello</p>\n</Transition>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scaffold Vue Project with Yarn Legacy",
    "codeDescription": "This command uses yarn dlx to execute the create-vue scaffolding tool. dlx allows for running packages without globally installing them. This is specifically for yarn versions before v4.11",
    "codeLanguage": "sh",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_3",
    "pageTitle": "Vue Tooling Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "# For Yarn ^v4.11\n$ yarn dlx create-vue@latest"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding HTML Class to Computed Object (Vue)",
    "codeDescription": "Binds the `class` attribute to a computed property that returns a class object. This allows for dynamic class determination based on complex logic and reactive dependencies.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_9",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"classObject\"></div>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Disabling Attribute Inheritance with defineOptions Vue",
    "codeDescription": "This snippet shows how to disable automatic attribute inheritance in a component using `defineOptions` within `<script setup>`. Setting `inheritAttrs` to `false` prevents automatic attribute application to the root element.",
    "codeLanguage": "vue",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_5",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Custom Directive (Function Shorthand)",
    "codeDescription": "Shows how to register a global custom directive using app.directive() with a function shorthand definition. It creates a Vue application instance and registers a directive named 'myDirective' using a function that will be executed when the directive is bound and updated. This provides a simpler way to define directives for basic use cases.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_7",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})"
      }
    ],
    "relevance": 0.83,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Component Tag Everywhere",
    "codeDescription": "Demonstrates the correct usage of kebab-case for a component tag, which can be applied consistently everywhere, though PascalCase is generally preferred for Single-File Components and string templates.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_11",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Everywhere -->\n<my-component></my-component>"
      }
    ],
    "relevance": 0.827,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Object with Composition API in Vue",
    "codeDescription": "This code snippet shows how to initialize a reactive object using the Composition API in Vue. The `reactive` function makes the object's properties reactive, so changes to them will trigger updates in the UI.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_10",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props with the `props` option (Options API)",
    "codeDescription": "This snippet showcases how to declare props using the `props` option in a Vue component (Options API). The component defines a 'foo' prop and logs its value within the `created` lifecycle hook. Props are accessible via `this` keyword within the component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_2",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['foo'],\n  created() {\n    // props are exposed on `this`\n    console.log(this.foo)\n  }\n}"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Radio Value Bindings in Vue",
    "codeDescription": "This snippet demonstrates how to bind the values of radio buttons to data properties using `:value`. When a radio button is selected, the value of the corresponding data property is assigned to the `v-model` bound variable.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_18",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input type=\"radio\" v-model=\"pick\" :value=\"first\" />\n<input type=\"radio\" v-model=\"pick\" :value=\"second\" />"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using InstanceType with Generics",
    "codeDescription": "This code snippet illustrates how to correctly reference a generic component in a `ref` using `vue-component-type-helpers`.  It imports components and uses `ComponentExposed` from `vue-component-type-helpers` to create a type for a ref targeting a generic component. InstanceType works for components without generics.",
    "codeLanguage": "vue",
    "codeTokens": 159,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_32",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script\n  setup\n  lang=\"ts\"\n>\nimport componentWithoutGenerics from '../component-without-generics.vue';\nimport genericComponent from '../generic-component.vue';\n\nimport type { ComponentExposed } from 'vue-component-type-helpers';\n\n// Works for a component without generics\nref<InstanceType<typeof componentWithoutGenerics>>();\n\nref<ComponentExposed<typeof genericComponent>>();\n</script>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Template Ref (Composition API)",
    "codeDescription": "This snippet shows how to access a template ref in the Composition API within a Vue component. It initializes a ref with `null` and exposes it for access in the template.",
    "codeLanguage": "js",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_1",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "const pElementRef = ref(null)"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "onActivated / onDeactivated (Composition API)",
    "codeDescription": "Demonstrates the usage of `onActivated` and `onDeactivated` lifecycle hooks in a component using the Composition API. These hooks are called when a component is activated (re-inserted from the cache) and deactivated (removed from the DOM into the cache), respectively. They are also called on mount and unmount.",
    "codeLanguage": "vue",
    "codeTokens": 157,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_6",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { onActivated, onDeactivated } from 'vue'\n\nonActivated(() => {\n  // called on initial mount\n  // and every time it is re-inserted from the cache\n})\n\nonDeactivated(() => {\n  // called when removed from the DOM into the cache\n  // and also when unmounted\n})\n</script>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-else-if Directive with v-if in Vue.js",
    "codeDescription": "This snippet shows the usage of the `v-else-if` directive in Vue.js to create conditional chains. The `v-else-if` block is rendered if its condition is truthy and the preceding `v-if` and `v-else-if` conditions are falsy. The previous sibling element must have a `v-if` or `v-else-if` directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_3",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using a Custom Directive in Template",
    "codeDescription": "This HTML code demonstrates how to use the custom directive `v-focus` in a Vue.js template. It binds the directive to an input element, causing it to automatically focus when the component is mounted.",
    "codeLanguage": "vue-html",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_8",
    "pageTitle": "Vue.js Component Options: Misc",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-focus>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-for Directive for List Rendering in Vue.js",
    "codeDescription": "These snippets demonstrate different ways to use the `v-for` directive in Vue.js to render a list of items.  It supports iterating over arrays, objects, numbers, strings and iterables.  You can access the index (or key for objects) in addition to the item itself. The `key` attribute is recommended for efficient updates.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_4",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-for=\"item in items\">\n  {{ item.text }}\n</div>"
      },
      {
        "language": "vue-html",
        "code": "<div v-for=\"(item, index) in items\"></div>"
      },
      {
        "language": "vue-html",
        "code": "<div v-for=\"(value, key) in object\"></div>"
      },
      {
        "language": "vue-html",
        "code": "<div v-for=\"(value, name, index) in object\"></div>"
      },
      {
        "language": "vue-html",
        "code": "<div v-for=\"item in items\" :key=\"item.id\">\n  {{ item.text }}\n</div>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Universal App",
    "codeDescription": "This JavaScript module exports a function `createApp` that creates a Vue app instance. This module is designed to be shared between the server and the client, ensuring that both environments use the same app definition. It uses `createSSRApp` for SSR compatibility.",
    "codeLanguage": "JavaScript",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_3",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// app.js (shared between server and client)\nimport { createSSRApp } from 'vue'\n\nexport function createApp() {\n  return createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n}"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Testing Vue Composables with Lifecycle Hooks and Provide/Inject",
    "codeDescription": "This example demonstrates how to test a Vue composable that relies on lifecycle hooks or Provide / Inject, using the `withSetup` helper.  It mocks the provide and triggers the unmount hook if needed.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_16",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { withSetup } from './test-utils'\nimport { useFoo } from './foo'\n\ntest('useFoo', () => {\n  const [result, app] = withSetup(() => useFoo(123))\n  // mock provide for testing injections\n  app.provide(...)\n  // run assertions\n  expect(result.foo.value).toBe(1)\n  // trigger onUnmounted hook if needed\n  app.unmount()\n})"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Refs Inside v-for (Options API)",
    "codeDescription": "Illustrates using template refs inside a `v-for` loop using the Options API. It initializes the `list` data property with an array and accesses the corresponding elements through `this.$refs.items` in the `mounted` hook.",
    "codeLanguage": "vue",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_13",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      list: [\n        /* ... */\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Provide/Inject with String Keys in Vue.js",
    "codeDescription": "This code snippet shows how to type injected values when using string injection keys in Vue.js.  Since string keys result in an `unknown` type, a generic type argument is used with `inject` to explicitly declare the type. The injected value can be undefined if no provider is present, requiring a default value or a type assertion.",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_26",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const foo = inject<string>('foo') // type: string | undefined"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Reactivity with ref and watchEffect",
    "codeDescription": "Illustrates Vue's reactivity system using `ref` to create reactive variables and `watchEffect` to automatically update `A2` when `A0` or `A1` changes. This showcases a basic reactive effect in Vue.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_6",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // tracks A0 and A1\n  A2.value = A0.value + A1.value\n})\n\n// triggers the effect\nA0.value = 2"
      }
    ],
    "relevance": 0.825,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "De-synchronization Issue with Default defineModel Prop Value - HTML",
    "codeDescription": "This HTML shows how to invoke child component that leads to de-synchronization issue between parent and child components.",
    "codeLanguage": "html",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_18",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<Child v-model=\"myRef\"></Child>"
      }
    ],
    "relevance": 0.824,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Component Name (camelCase)",
    "codeDescription": "Shows bad practice of defining a component's name using camelCase. Component names should use PascalCase in JS/JSX.",
    "codeLanguage": "js",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_14",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  name: 'myComponent'\n  // ...\n}"
      }
    ],
    "relevance": 0.821,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Writable Computed Property with Previous Value (Composition API)",
    "codeDescription": "This code snippet shows a writable computed property where the getter accesses the previous value, and the setter updates the state. It is implemented using the Composition API in Vue.js. The getter returns the current count if it's less than or equal to 3, otherwise it returns the previous value.  The setter updates the count ref by multiplying the new value by 2.",
    "codeLanguage": "vue",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_16",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\nconst alwaysSmall = computed({\n  get(previous) {\n    if (count.value <= 3) {\n      return count.value\n    }\n\n    return previous\n  },\n  set(newValue) {\n    count.value = newValue * 2\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Content to Named Slots (Vue) - Implicit Default",
    "codeDescription": "This example demonstrates how to pass content to the default slot implicitly by placing non-`<template>` nodes directly within the `BaseLayout` component. The content outside of `<template>` elements will be rendered in the default slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 146,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_12",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<BaseLayout>\n  <template #header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <!-- implicit default slot -->\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transforming Prop with Computed Property (Options API)",
    "codeDescription": "This snippet demonstrates how to transform a prop's value using a computed property in Options API. The `size` prop is trimmed and converted to lowercase, and the `normalizedSize` computed property automatically updates when the `size` prop changes.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_17",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['size'],\n  computed: {\n    // computed property that auto-updates when the prop changes\n    normalizedSize() {\n      return this.size.trim().toLowerCase()\n    }\n  }\n}"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript whenDepsChange Function for Reactive Effect",
    "codeDescription": "Shows the `whenDepsChange()` function that wraps the `update` function and sets the `activeEffect` before running the update, enabling dependency tracking. This creates a reactive effect that automatically re-runs when its dependencies change.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_5",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "function whenDepsChange(update) {\n  const effect = () => {\n    activeEffect = effect\n    update()\n    activeEffect = null\n  }\n  effect()\n}"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Directive on Component Usage HTML",
    "codeDescription": "Demonstrates using a custom directive on a Vue component.  The directive will be applied to the component's root node.",
    "codeLanguage": "vue-html",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_16",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-demo=\"test\" />"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Card Component with Conditional Slots (Vue)",
    "codeDescription": "This example showcases a Card component with conditional rendering of slots using `v-if` and the `$slots` property. If content is provided for a slot (header, default, or footer), the corresponding section within the card is rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 157,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_15",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n    \n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n    \n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic TransitionGroup Usage in Vue.js",
    "codeDescription": "This snippet demonstrates how to use the `<TransitionGroup>` component in Vue.js to apply enter/leave transitions to a `v-for` list. It specifies the name and tag attributes for basic styling.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_0",
    "pageTitle": "Vue.js TransitionGroup Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Named Slots in Custom Element",
    "codeDescription": "Demonstrates how to use named slots with Vue-defined custom elements using the `slot` attribute.  The `v-slot` directive is not supported for named slots when consuming custom elements.",
    "codeLanguage": "Vue HTML",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_8",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "Vue HTML",
        "code": "<my-element>\n    <div slot=\"named\">hello</div>\n  </my-element>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Converting existing refs with $() macro",
    "codeDescription": "This JavaScript code shows how to use the `$()` macro to convert an existing ref (returned by `myCreateRef()`) into a reactive variable. This is useful when a function is not explicitly known to return a ref.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_5",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "function myCreateRef() {\n  return ref(0)\n}\n\nlet count = $(myCreateRef())"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Setting Focus After Route Change (Options API)",
    "codeDescription": "This Vue.js Options API snippet watches the `$route` and sets focus to the `backToTop` ref after each route change.  It uses the `watch` property to detect route changes and then calls the `focus()` method on the referenced element, ensuring the user's focus is reset to the beginning of the page after navigation.",
    "codeLanguage": "Vue",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_2",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script>\nexport default {\n  watch: {\n    $route() {\n      this.$refs.backToTop.focus()\n    }\n  }\n}\n</script>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Fetching Data with Reactive URL (Getter) in Vue.js",
    "codeDescription": "This example demonstrates how to use a getter function to dynamically determine the URL in a `useFetch()` composable. When the value returned by the getter function changes (e.g., due to a change in `props.id`), the `useFetch` function will automatically re-fetch the data. This allows reactive data fetching based on computed values.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_9",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "// re-fetch when props.id changes\nconst { data, error } = useFetch(() => `/posts/${props.id}`)"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive with Max - Vue HTML",
    "codeDescription": "This example shows the usage of the `max` prop of the `<KeepAlive>` component. The `max` prop limits the maximum number of component instances to cache. Once the limit is reached, the least recently used cached component instance will be destroyed to make room for a new one.",
    "codeLanguage": "vue-html",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_10",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<KeepAlive :max=\"10\">\n  <component :is=\"view\"></component>\n</KeepAlive>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using the Translation Method in a Template - Vue.js",
    "codeDescription": "Illustrates how to use the `$translate` method within a Vue.js template.  The method takes a string key (e.g. 'greetings.hello') which corresponds to a translated value defined in the plugin configuration.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_4",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>{{ $translate('greetings.hello') }}</h1>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Side Effect Cleanup in Watchers in Vue.js",
    "codeDescription": "Demonstrates how to perform side effect cleanup within a watcher using the `onCleanup` callback. The cleanup callback is called right before the next time the effect is re-run, allowing for cleanup of invalidated side effects.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_12",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "watchEffect(async (onCleanup) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onCleanup(cancel)\n  data.value = await response\n})"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Reactive Object Directly - JavaScript",
    "codeDescription": "Shows how to directly watch a reactive object. The watcher is automatically in deep mode, and will trigger on any deep mutation to the object.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_20",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = reactive({ count: 0 })\nwatch(state, () => {\n  /* triggers on deep mutation to state */\n})"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Extends Option: Composition API Usage (Vue.js)",
    "codeDescription": "Shows how to use `extends` with Composition API by calling the base component's setup function within the extending component's setup function, and then merging the returned objects.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_10",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Base from './Base.js'\nexport default {\n  extends: Base,\n  setup(props, ctx) {\n    return {\n      ...Base.setup(props, ctx),\n      // local bindings\n    }\n  }\n}"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "createRenderer Function and RendererOptions Interface in TypeScript",
    "codeDescription": "Defines the `createRenderer` function and the `RendererOptions` interface, used for creating custom renderers in Vue.js. The `RendererOptions` includes functions for manipulating host nodes and elements.",
    "codeLanguage": "typescript",
    "codeTokens": 427,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-renderer.md#_snippet_0",
    "pageTitle": "Custom Renderer API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "function createRenderer<HostNode, HostElement>(\n    options: RendererOptions<HostNode, HostElement>\n  ): Renderer<HostElement>\n\n  interface Renderer<HostElement> {\n    render: RootRenderFunction<HostElement>\n    createApp: CreateAppFunction<HostElement>\n  }\n\n  interface RendererOptions<HostNode, HostElement> {\n    patchProp(\n      el: HostElement,\n      key: string,\n      prevValue: any,\n      nextValue: any,\n      namespace?: ElementNamespace,\n      parentComponent?: ComponentInternalInstance | null,\n    ): void\n    insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void\n    remove(el: HostNode): void\n    createElement(\n      type: string,\n      namespace?: ElementNamespace,\n      isCustomizedBuiltIn?: string,\n      vnodeProps?: (VNodeProps & { [key: string]: any }) | null,\n    ): HostElement\n    createText(text: string): HostNode\n    createComment(text: string): HostNode\n    setText(node: HostNode, text: string): void\n    setElementText(node: HostElement, text: string): void\n    parentNode(node: HostNode): HostElement | null\n    nextSibling(node: HostNode): HostNode | null\n    querySelector?(selector: string): HostElement | null\n    setScopeId?(el: HostElement, id: string): void\n    cloneNode?(node: HostNode): HostNode\n    insertStaticContent?(\n      content: string,\n      parent: HostElement,\n      anchor: HostNode | null,\n      namespace: ElementNamespace,\n      start?: HostNode | null,\n      end?: HostNode | null,\n    ): [HostNode, HostNode]\n  }"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Side Effect Cleanup (Vue 3.5+) in Watchers",
    "codeDescription": "Shows side effect cleanup within a watcher using `onWatcherCleanup` introduced in Vue 3.5+. It offers a more direct way to register cleanup functions for watchers.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_13",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { onWatcherCleanup } from 'vue'\n\nwatchEffect(async () => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onWatcherCleanup(cancel)\n  data.value = await response\n})"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Example Vue Component Test with Vitest",
    "codeDescription": "This snippet demonstrates a basic unit test for a Vue component using Vitest and @testing-library/vue. It renders the component, passes props, and asserts that the expected output is displayed.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_10",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// MyComponent.test.js\nimport { render } from '@testing-library/vue'\nimport MyComponent from './MyComponent.vue'\n\ntest('it should work', () => {\n  const { getByText } = render(MyComponent, {\n    props: {\n      /* ... */\n    }\n  })\n\n  // assert output\n  getByText('...')\n})"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "setup() with Render Functions",
    "codeDescription": "Demonstrates using `setup()` to return a render function directly, allowing the render function to use reactive state declared in the same scope.  Also demonstrates using `expose()` to expose methods when returning a render function.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_5",
    "pageTitle": "Vue.js Composition API setup() Hook",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return () => h('div', count.value)\n  }\n}"
      },
      {
        "language": "javascript",
        "code": "import { h, ref } from 'vue'\n\nexport default {\n  setup(props, { expose }) {\n    const count = ref(0)\n    const increment = () => ++count.value\n\n    expose({\n      increment\n    })\n\n    return () => h('div', count.value)\n  }\n}"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Correct Usage of Default Scoped Slot with Template",
    "codeDescription": "This example demonstrates the correct way to use the default scoped slot with an explicit `<template>` tag when mixing it with named slots. Using the template tag clarifies the scope of the `message` prop, indicating that it's not available within the named `footer` slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_25",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent>\n  <!-- Use explicit default slot -->\n  <template #default=\"{ message }\">\n    <p>{{ message }}</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</MyComponent>"
      }
    ],
    "relevance": 0.82,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Testing Stepper Component with Testing Library",
    "codeDescription": "This snippet demonstrates testing a Stepper component using Testing Library. It renders the component, retrieves the initial value, clicks the increment button, and asserts the updated value. Testing Library emphasizes testing components as a user would, focusing on DOM elements and user interactions.",
    "codeLanguage": "JavaScript",
    "codeTokens": 149,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_6",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const { getByText } = render(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\ngetByText('0') // Implicit assertion that \"0\" is within the component\n\nconst button = getByRole('button', { name: /increment/i })\n\n// Dispatch a click event to our increment button.\nawait fireEvent.click(button)\n\ngetByText('1')\n\nawait fireEvent.click(button)"
      }
    ],
    "relevance": 0.818,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Component Setup and Lifecycle Hook",
    "codeDescription": "This code snippet demonstrates a Vue component setup using the `<script setup>` syntax. It imports necessary modules from Vue and a custom component. The `onMounted` lifecycle hook is used to call the `load` function when the component is mounted.",
    "codeLanguage": "vue",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/sponsor/index.md#_snippet_0",
    "pageTitle": "Vue.js Sponsor Information",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport SponsorsGroup from '@theme/components/SponsorsGroup.vue'\nimport { load, data } from '@theme/components/sponsors'\nimport { onMounted } from 'vue'\n\nonMounted(load)\n</script>"
      }
    ],
    "relevance": 0.818,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-once Directive in Vue.js",
    "codeDescription": "Demonstrates how v-once renders an element or component only once, skipping future updates. This improves performance by treating the element as static content.  Applies to single elements, elements with children, and components.",
    "codeLanguage": "vue-html",
    "codeTokens": 157,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_9",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- single element -->\n<span v-once>This will never change: {{msg}}</span>\n<!-- the element have children -->\n<div v-once>\n  <h1>Comment</h1>\n  <p>{{msg}}</p>\n</div>\n<!-- component -->\n<MyComponent v-once :comment=\"msg\"></MyComponent>\n<!-- `v-for` directive -->\n<ul>\n  <li v-for=\"i in list\" v-once>{{i}}</li>\n</ul>"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Client Entry Point",
    "codeDescription": "This JavaScript snippet serves as the entry point for the client-side application. It imports the `createApp` function from the shared `app.js` module, calls the function to create the Vue app instance, and mounts the app to the DOM element with the ID 'app', initiating the hydration process.",
    "codeLanguage": "JavaScript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_4",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// client.js\nimport { createApp } from './app.js'\n\ncreateApp().mount('#app')"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Transition Name - Vue HTML",
    "codeDescription": "This code shows how to dynamically set the `name` prop of the `<Transition>` component. This allows you to use different CSS transitions based on the current state. `transitionName` is a variable in the Vue component's data or state that determines which CSS transition to apply.",
    "codeLanguage": "html",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_24",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "html",
        "code": "<Transition :name=\"transitionName\">\n  <!-- ... -->\n</Transition>"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Building a Vue Project with Yarn",
    "codeDescription": "This command builds a production-ready version of the Vue application using Yarn.  The output is typically placed in a `./dist` directory.",
    "codeLanguage": "sh",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_10",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ yarn build"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Incorrect onMounted Usage (Composition API, JavaScript)",
    "codeDescription": "Illustrates an incorrect way to use the `onMounted` hook in the Composition API.  `onMounted` must be called synchronously during component setup, not asynchronously inside a `setTimeout` call. This example shows what *not* to do.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#_snippet_2",
    "pageTitle": "Vue Component Lifecycle Hooks",
    "codeList": [
      {
        "language": "javascript",
        "code": "setTimeout(() => {\n  onMounted(() => {\n    // this won't work.\n  })\n}, 100)"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition Modes in Vue HTML",
    "codeDescription": "This snippet demonstrates how to use the `mode` prop on the `<Transition>` component to control the timing of entering and leaving animations. Setting `mode=\"out-in\"` ensures that the leaving element is animated out before the entering element is animated in, preventing layout issues and creating a cleaner transition.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_22",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition mode=\"out-in\">\n  ...\n</Transition>"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "onWatcherCleanup Example - TypeScript",
    "codeDescription": "Illustrates how to use the `onWatcherCleanup` function in Vue.js within a `watch` callback to register a cleanup function.  This function is called when the watcher is about to re-run, allowing for cleanup of previous side effects.",
    "codeLanguage": "typescript",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_27",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onWatcherCleanup(cancel)\n})"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing v-model Modifiers (Pre 3.4 Composition API)",
    "codeDescription": "This Vue code snippet shows the older approach (pre Vue 3.4) for accessing v-model modifiers in the Composition API. It uses `defineProps` to declare props, including modifiers, and `defineEmits` for emitting update events.",
    "codeLanguage": "vue",
    "codeTokens": 149,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_29",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps({\nfirstName: String,\nlastName: String,\nfirstNameModifiers: { default: () => ({}) },\nlastNameModifiers: { default: () => ({}) }\n})\ndefineEmits(['update:firstName', 'update:lastName'])\n\nconsole.log(props.firstNameModifiers) // { capitalize: true }\nconsole.log(props.lastNameModifiers) // { uppercase: true }\n</script>"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue App with In-DOM Template in JavaScript",
    "codeDescription": "This JavaScript code creates a Vue application instance that uses the `innerHTML` of the mounting point as the component's template.  The component defines a `data` property called `count` initialized to 0.",
    "codeLanguage": "JavaScript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_5",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Event Modifiers Example",
    "codeDescription": "This snippet illustrates how to use event modifiers in Vue.js templates. Modifiers like `.stop`, `.prevent`, `.self`, `.capture`, `.once`, and `.passive` are appended to the event name to modify event handling behavior. This allows for concise and declarative event handling logic within the template.",
    "codeLanguage": "vue-html",
    "codeTokens": 182,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_12",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- the click event's propagation will be stopped -->\n<a @click.stop=\"doThis\"></a>\n\n<!-- the submit event will no longer reload the page -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- just the modifier -->\n<form @submit.prevent></form>\n\n<!-- only trigger handler if event.target is the element itself -->\n<!-- i.e. not from a child element -->\n<div @click.self=\"doThat\">...</div>"
      },
      {
        "language": "vue-html",
        "code": "<!-- use capture mode when adding the event listener     -->\n<!-- i.e. an event targeting an inner element is handled -->\n<!-- here before being handled by that element           -->\n<div @click.capture=\"doThis\">...</div>\n\n<!-- the click event will be triggered at most once -->\n<a @click.once=\"doThis\"></a>\n\n<!-- the scroll event's default behavior (scrolling) will happen -->\n<!-- immediately, instead of waiting for `onScroll` to complete  -->\n<!-- in case it contains `event.preventDefault()`                -->\n<div @scroll.passive=\"onScroll\">...</div>"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Equivalent of v-for Scoping",
    "codeDescription": "This JavaScript snippet demonstrates the variable scoping behavior of `v-for` using the `forEach` method. It shows how the callback function has access to the outer scope variables but its own parameters (`item` and `index`) are only available within the callback.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_6",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "const parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Anonymous Functional Component Vue.js TypeScript",
    "codeDescription": "This code snippet demonstrates how to type an anonymous functional component in Vue.js using TypeScript. It defines the props and emits for the component, along with the component's rendering logic that includes an onClick event that emits a message.",
    "codeLanguage": "TypeScript",
    "codeTokens": 195,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_43",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import type { FunctionalComponent } from 'vue'\n\ntype FComponentProps = {\n  message: string\n}\n\ntype Events = {\n  sendMessage(message: string): void\n}\n\nconst FComponent: FunctionalComponent<FComponentProps, Events> = (\n  props,\n  context\n) => {\n  return (\n    <button onClick={() => context.emit('sendMessage', props.message)}>\n        {props.message} {' '}\n    </button>\n  )\n}\n\nFComponent.props = {\n  message: {\n    type: String,\n    required: true\n  }\n}\n\nFComponent.emits = {\n  sendMessage: (value) => typeof value === 'string'\n}"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configure App Instance of Custom Element",
    "codeDescription": "Demonstrates how to configure the app instance of a Vue custom element using the configureApp option in `defineCustomElement`. This allows for customization of the Vue app instance that powers the custom element.",
    "codeLanguage": "JavaScript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_9",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "defineCustomElement(MyComponent, {\n  configureApp(app) {\n    app.config.errorHandler = (err) => {\n      /* ... */\n    }\n  }\n})"
      }
    ],
    "relevance": 0.815,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Home Component in Vue.js",
    "codeDescription": "This code snippet renders the imported `Home` component.  The `<Home />` tag instantiates and displays the component within the Vue.js template. No specific props or attributes are being passed to the component in this instance.",
    "codeLanguage": "Vue.js",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/index.md#_snippet_1",
    "pageTitle": "Vue.js Documentation Home Page",
    "codeList": [
      {
        "language": "Vue.js",
        "code": "<Home />"
      }
    ],
    "relevance": 0.812,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Simple Computed Properties (composition API)",
    "codeDescription": "Illustrates the recommended practice of breaking down a complex computed property into smaller, simpler computed properties using the Composition API for improved readability, testability, and adaptability.",
    "codeLanguage": "js",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_40",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "const basePrice = computed(\n  () => manufactureCost.value / (1 - profitMargin.value)\n)\n\nconst discount = computed(\n  () => basePrice.value * (discountPercent.value || 0)\n)\n\nconst finalPrice = computed(() => basePrice.value - discount.value)"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Efficient List Rendering in Vue.js (Props Stability)",
    "codeDescription": "This Vue.js template snippet shows an optimized way to render a list.  Each `ListItem` only updates when its own `active` prop changes, reducing unnecessary re-renders.  The active state is pre-calculated in the parent component and passed as a direct prop.  The active state depends on a boolean expression.",
    "codeLanguage": "vue-html",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_3",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Emitted Events using emits Option JavaScript",
    "codeDescription": "This snippet shows how to declare emitted events using the `emits` option in the Options API. The component declares that it will emit `inFocus` and `submit` events.",
    "codeLanguage": "JavaScript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_12",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export default {\n  emits: ['inFocus', 'submit']\n}"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Custom Option Merge Strategies in Vue.js",
    "codeDescription": "This example illustrates how to define a custom merge strategy for a component option.  A merge strategy function can be registered for a custom option by assigning it on the `app.config.optionMergeStrategies` object using the option's name as the key.  The example defines a custom merge strategy for `msg` that concatenates the parent and child values.",
    "codeLanguage": "javascript",
    "codeTokens": 202,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_22",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Running Callback with Application Context",
    "codeDescription": "Shows how to run a callback function with the current application's context using app.runWithContext(). It provides the value '1' for the 'id' key, then runs a function which injects and returns the 'id' value. This allows injecting values outside of a component's setup scope.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_13",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { inject } from 'vue'\n\napp.provide('id', 1)\n\nconst injected = app.runWithContext(() => {\n  return inject('id')\n})\n\nconsole.log(injected) // 1"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Adding Directives with withDirectives() in Vue.js",
    "codeDescription": "This snippet demonstrates how to add custom directives to VNodes using the `withDirectives()` function in Vue.js. It creates a VNode and wraps it with a custom directive, including a value, argument, and modifiers.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#_snippet_6",
    "pageTitle": "Vue.js Render Function APIs Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n  mounted() {\n    /* ... */\n  },\n  updated() {\n    /* ... */\n  }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n  [pin, 200, 'top', { animate: true }]\n])"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Usage with Class and $attrs (Vue)",
    "codeDescription": "Demonstrates using a component with a class attribute and how that attribute is passed down and applied using `$attrs` in the component's template.",
    "codeLanguage": "vue-html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_19",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<MyComponent class=\"baz\" />"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Staggering List Transitions with Data Attributes",
    "codeDescription": "This snippet shows how to add a `data-index` attribute to each list item, which is used later in JavaScript to stagger the animations. The `css` prop is set to `false` to disable CSS transitions, and event listeners for `before-enter`, `enter`, and `leave` are added.",
    "codeLanguage": "vue-html",
    "codeTokens": 164,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_3",
    "pageTitle": "Vue.js TransitionGroup Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<TransitionGroup\n  tag=\"ul\"\n  :css=\"false\"\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @leave=\"onLeave\"\n>\n  <li\n    v-for=\"(item, index) in computedList\"\n    :key=\"item.msg\"\n    :data-index=\"index\"\n  >\n    {{ item.msg }}\n  </li>\n</TransitionGroup>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "TypeScript Casting in Templates",
    "codeDescription": "Illustrates how to perform type casting in Vue templates when using TypeScript. This is useful when TypeScript cannot infer the correct type, and you need to explicitly cast a variable to a specific type to access its properties or methods.  The example casts a union type (string | number) to a number to use the `toFixed` method.",
    "codeLanguage": "vue",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_4",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing a Vue Application Instance in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create a new Vue application instance using the `createApp` function from the 'vue' library. It imports the function and creates an application instance with a root component (represented by the options object).",
    "codeLanguage": "JavaScript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_0",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Component (Options API)",
    "codeDescription": "This snippet shows a Vue component implemented using the Options API. It includes reactive data (`count`), a method to increment the count (`increment`), and a lifecycle hook (`mounted`) to log the initial count.\n\nDependencies: None\nInput: None\nOutput: A Vue component object.",
    "codeLanguage": "Vue.js",
    "codeTokens": 234,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_5",
    "pageTitle": "Vue.js Introduction",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event handlers in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "In-DOM Template for Vue Component (HTML)",
    "codeDescription": "This HTML code provides a template directly within the mount container. The template contains a button that increments a counter when clicked.",
    "codeLanguage": "HTML",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_4",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Applying Transition on Appear in Vue HTML",
    "codeDescription": "This snippet shows how to apply a transition on the initial render of a node by adding the `appear` prop to the `<Transition>` component. This is useful for animating elements as they initially appear on the page.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_20",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition appear>\n  ...\n</Transition>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Force Casting Injected Values in Vue.js",
    "codeDescription": "This code snippet demonstrates force casting an injected value when you are certain that the value is always provided.  This avoids potential `undefined` issues. Note that this approach should be used cautiously, only when you are absolutely sure that the value will be provided at runtime.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_28",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const foo = inject('foo') as string"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Extracting Public Prop Types in Vue.js",
    "codeDescription": "Shows how to use `ExtractPublicPropTypes` to extract the public prop types from a runtime props options object, representing the props that the parent component is allowed to pass. This utility type is available in Vue 3.3+.",
    "codeLanguage": "typescript",
    "codeTokens": 156,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_2",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const propsOptions = {\n  foo: String,\n  bar: Boolean,\n  baz: {\n    type: Number,\n    required: true\n  },\n  qux: {\n    type: Number,\n    default: 1\n  }\n} as const\n\ntype Props = ExtractPublicPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar?: boolean,\n//   baz: number,\n//   qux?: number\n// }"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Custom Directive vFocus (Composition API) Vue",
    "codeDescription": "Defines a custom directive `vFocus` within a `<script setup>` block. This directive focuses the element it's bound to when the element is mounted.",
    "codeLanguage": "vue",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_6",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emits Option Object Syntax Example JavaScript",
    "codeDescription": "Shows how to use the `emits` option in Vue.js component with object syntax to define custom events and their corresponding validation functions.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_11",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  emits: {\n    // no validation\n    click: null,\n\n    // with validation\n    submit: (payload) => {\n      if (payload.email && payload.password) {\n        return true\n      } else {\n        console.warn(`Invalid submit event payload!`)\n        return false\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Max Instances",
    "codeDescription": "Explains how to limit the maximum number of component instances cached by `<KeepAlive>` using the `max` prop.  In this example, a maximum of 10 component instances will be cached using an LRU (Least Recently Used) cache replacement policy.",
    "codeLanguage": "vue-html",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_5",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Component Rendering",
    "codeDescription": "This snippet renders the `ThemePage` component using its tag name.  It assumes the component has already been imported and registered in the Vue instance.",
    "codeLanguage": "Vue",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/ecosystem/themes.md#_snippet_1",
    "pageTitle": "Vue.js Component Import and Rendering",
    "codeList": [
      {
        "language": "Vue",
        "code": "<ThemePage />"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Hydrate on Idle",
    "codeDescription": "This snippet demonstrates how to use `hydrateOnIdle` with an async component for lazy hydration, which hydrates via `requestIdleCallback`.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_6",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent, hydrateOnIdle } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle(/* optionally pass a max timeout */)\n})"
      }
    ],
    "relevance": 0.81,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using `is` attribute for dynamic components in Vue",
    "codeDescription": "This code snippet illustrates using the `is` attribute to render a Vue component in place of a native HTML element. The `vue:` prefix tells Vue.js to treat the element as a Vue component, resolving potential template parsing issues within the DOM.",
    "codeLanguage": "Vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_5",
    "pageTitle": "Vue.js Built-in Special Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Server-Side Rendering with Shared App",
    "codeDescription": "This JavaScript snippet demonstrates how to use the shared `createApp` function in the server-side rendering process. It imports the function from `app.js`, calls it to create a Vue app instance within the request handler, renders the app to HTML using `renderToString`, and sends the HTML as a response. Omitting the irrelevant code.",
    "codeLanguage": "JavaScript",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_5",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// server.js (irrelevant code omitted)\nimport { createApp } from './app.js'\n\nserver.get('/', (req, res) => {\n  const app = createApp()\n  renderToString(app).then(html => {\n    // ...\n  })\n})"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Component Emits with Type-Based Declaration in Vue",
    "codeDescription": "This code snippet demonstrates typing component emits using type-based declaration, providing fine-grained control over the type constraints of emitted events using call signatures in a type literal.",
    "codeLanguage": "vue",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_12",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// type-based\nconst emit = defineEmits<{  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Semantic HTML Structure with Headings",
    "codeDescription": "This HTML snippet demonstrates the correct usage of headings within a semantic HTML structure. It includes `main`, `section`, and heading elements (`h1`, `h2`, `h3`) with appropriate ARIA attributes for accessibility.  The snippet illustrates how to nest headings correctly and use `aria-labelledby` for associating section titles with the heading elements.",
    "codeLanguage": "HTML",
    "codeTokens": 229,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_4",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<main role=\"main\" aria-labelledby=\"main-title\">\n  <h1 id=\"main-title\">Main title</h1>\n  <section aria-labelledby=\"section-title-1\">\n    <h2 id=\"section-title-1\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n  <section aria-labelledby=\"section-title-2\">\n    <h2 id=\"section-title-2\"> Section Title </h2>\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n    <h3>Section Subtitle</h3>\n    <!-- Content -->\n  </section>\n</main>"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Imperative Watcher with $watch() - JavaScript",
    "codeDescription": "This example demonstrates creating a watcher imperatively using the `$watch()` instance method within a Vue component's `created` lifecycle hook. This is helpful for conditionally setting up watchers or responding to user interactions.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_22",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  created() {\n    this.$watch('question', (newQuestion) => {\n      // ...\n    })\n  }\n}"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref Unwrapping in Arrays and Collections with reactive() in Vue.js",
    "codeDescription": "Illustrates that refs are not automatically unwrapped when accessed as elements of a reactive array or native collection type like `Map`. The `.value` property needs to be explicitly accessed.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_6",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Augmentation Placement in Vue.js",
    "codeDescription": "This snippet demonstrates the correct way to place TypeScript type augmentations for Vue.js. It emphasizes the necessity of placing the augmentation inside a TypeScript module (a file with at least one top-level import or export) to avoid overwriting the original types, ensuring proper augmentation instead.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_8",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Does not work, overwrites the original types.\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}"
      },
      {
        "language": "typescript",
        "code": "// Works correctly\nexport {}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "useTemplateRef() Usage Example - Vue",
    "codeDescription": "Demonstrates how to use `useTemplateRef()` in a `<script setup>` component to access a template element. In this example, `useTemplateRef('input')` is used to get a reference to an `<input>` element with `ref=\"input\"` in the template, and then `focus()` is called on the element after the component is mounted.",
    "codeLanguage": "vue",
    "codeTokens": 153,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_5",
    "pageTitle": "Vue Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n  import { useTemplateRef, onMounted } from 'vue'\n\n  const inputRef = useTemplateRef('input')\n\n  onMounted(() => {\n    inputRef.value.focus()\n  })\n  </script>\n\n  <template>\n    <input ref=\"input\" />\n  </template>"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Splitting Modules - Component Definition (Composition API)",
    "codeDescription": "This snippet defines a Vue component in a separate JavaScript file using the Composition API. It exports the component's setup function and template. Requires the main HTML file to import this component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_21",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// my-component.js\nimport { ref } from 'vue'\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Extracting Internal Prop Types in Vue.js",
    "codeDescription": "Illustrates how to use `ExtractPropTypes` to extract the internal prop types from a runtime props options object. The extracted types include resolved props received by the component, considering boolean props and props with default values which are always defined.",
    "codeLanguage": "typescript",
    "codeTokens": 155,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_1",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const propsOptions = {\n  foo: String,\n  bar: Boolean,\n  baz: {\n    type: Number,\n    required: true\n  },\n  qux: {\n    type: Number,\n    default: 1\n  }\n} as const\n\ntype Props = ExtractPropTypes<typeof propsOptions>\n// {\n//   foo?: string,\n//   bar: boolean,\n//   baz: number,\n//   qux: number\n// }"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "TypeScript in Vue SFC",
    "codeDescription": "This snippet demonstrates the use of TypeScript within a Vue Single-File Component's `<script>` block. The `lang=\"ts\"` attribute specifies that the content should be treated as TypeScript code.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_1",
    "pageTitle": "Vue SFC Syntax Specification",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<script lang=\"ts\">\n  // use TypeScript\n</script>"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Nested Reactive Objects",
    "codeDescription": "Illustrates that nested objects within a reactive object are also proxies due to Vue's deep reactivity.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_21",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "javascript",
        "code": "const proxy = reactive({})\n\nconst raw = {}\nproxy.nested = raw\n\nconsole.log(proxy.nested === raw) // false"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using watchEffect() - JavaScript",
    "codeDescription": "This example shows how to use `watchEffect()` to automatically track reactive dependencies. It performs the same data fetching operation as the previous example, but without explicitly specifying `todoId` as a source. The `watchEffect` function automatically tracks `todoId.value` as a dependency.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_13",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watchEffect(async () => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n  )\n  data.value = await response.json()\n})"
      }
    ],
    "relevance": 0.805,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Parent component binding v-model attributes",
    "codeDescription": "Demonstrates how the parent component's `v-model` syntax is compiled into prop binding and event listener for the pre-Vue 3.4 implementation.  The `foo` variable is passed as `modelValue` to the child, and updates are handled via the `@update:modelValue` event.",
    "codeLanguage": "vue-html",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_4",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Parent.vue -->\n<Child\n  :modelValue=\"foo\"\n  @update:modelValue=\"$event => (foo = $event)\"\n/>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model Binding with Argument and Modifier in Vue",
    "codeDescription": "This code snippet demonstrates how to use v-model with both an argument (`title`) and a modifier (`capitalize`). The generated prop name will be `arg + \"Modifiers\"` (e.g., `titleModifiers`).",
    "codeLanguage": "vue-html",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_25",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-model:title.capitalize=\"myText\">"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using useSlots and useAttrs in Vue Script Setup",
    "codeDescription": "This code snippet demonstrates how to use the `useSlots` and `useAttrs` helpers inside `<script setup>` to access slots and attributes, respectively. These helpers are useful in cases where you need to access slots and attributes directly within the setup function.",
    "codeLanguage": "vue",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_25",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useSlots, useAttrs } from 'vue'\n\nconst slots = useSlots()\nconst attrs = useAttrs()\n</script>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Hydrate on Visible",
    "codeDescription": "This snippet demonstrates how to use `hydrateOnVisible` with an async component for lazy hydration, hydrating when element(s) become visible via `IntersectionObserver`.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_7",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent, hydrateOnVisible } from 'vue'\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})"
      },
      {
        "language": "javascript",
        "code": "hydrateOnVisible({ rootMargin: '100px' })"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Assigning Refs to Reactive Properties in Vue.js",
    "codeDescription": "Demonstrates that when assigning a ref to a property of a reactive object, the ref will be automatically unwrapped, and the reactive property will directly hold the ref's value.",
    "codeLanguage": "typescript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_7",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "typescript",
        "code": "const count = ref(1)\nconst obj = reactive({})\n\nobj.count = count\n\nconsole.log(obj.count) // 1\nconsole.log(obj.count === count.value) // true"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Checking if Object is Readonly in Vue.js (isReadonly)",
    "codeDescription": "The `isReadonly` function checks if a given value is a readonly object, including proxies created by `readonly()` and `shallowReadonly()`, as well as computed refs without a setter.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_7",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function isReadonly(value: unknown): boolean"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Attribute Binding using v-bind Directive in Vue",
    "codeDescription": "This code snippet demonstrates attribute binding using the `v-bind` directive in a Vue template.  The `id` attribute of the `<div>` element is dynamically bound to the `dynamicId` property of the component. When `dynamicId` changes, the `id` attribute will update accordingly.  If the bound value is `null` or `undefined`, the attribute will be removed from the rendered element.",
    "codeLanguage": "vue-html",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_2",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-bind:id=\"dynamicId\"></div>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Render Function with createElementBlock - JavaScript",
    "codeDescription": "This JavaScript snippet shows a render function that returns a virtual DOM tree. It uses `_openBlock()` and `_createElementBlock()` to create a fragment. The `_createElementBlock` function takes a `_Fragment` (which is likely a reference to Vue's Fragment component), null attributes, an array of children (empty in this case), and a flag `64 /* STABLE_FRAGMENT */` indicating that the fragment's children are stable.",
    "codeLanguage": "JavaScript",
    "codeTokens": 138,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_5",
    "pageTitle": "Vue Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "export function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component B - Composition API - Vue",
    "codeDescription": "This Vue component (ComponentB.vue) imports the shared `store` and displays the `count` property.  It utilizes the Composition API and assumes the `store` module exports a reactive object. Similar to ComponentA, it reflects the state in the shared store.",
    "codeLanguage": "Vue",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_4",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<!-- ComponentB.vue -->\n<script setup>\nimport { store } from './store.js'\n</script>\n\n<template>From B: {{ store.count }}</template>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Components Option Type Definition",
    "codeDescription": "Defines the type for the `components` option in Vue.js component options. This option allows registering components to be made available to the component instance.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_4",
    "pageTitle": "Vue.js Component Options: Misc",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  components?: { [key: string]: Component }\n}"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props using Type Annotations in Vue SFCs with TypeScript",
    "codeDescription": "This snippet demonstrates declaring props using type annotations within `<script setup lang=\"ts\">` in a Vue SFC. It defines optional props 'title' (string) and 'likes' (number) using TypeScript syntax. This enables type checking and IDE support for the component's props.",
    "codeLanguage": "vue",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_5",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\ndefineProps<{{\n  title?: string\n  likes?: number\n}}>()\n</script>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Component Instance in Data Function with Arrow Function",
    "codeDescription": "This example shows how to access the component instance within a `data` function defined using an arrow function. Since arrow functions do not bind `this`, the component instance is passed as the first argument (vm). This pattern is useful when accessing component props within the `data` function.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_1",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "data: (vm) => ({ a: vm.myProp })"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering a Custom Element",
    "codeDescription": "Demonstrates how to define a custom element using `defineCustomElement` and register it with the browser using `customElements.define`.  It shows the fundamental steps involved in creating and registering a Vue-powered web component.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_2",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Element Configuration Example",
    "codeDescription": "Illustrates how to configure a custom element using the `configureApp` option. Demonstrates passing custom options to `defineCustomElement` for Vue application configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#_snippet_1",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Element from './MyElement.ce.vue'\n\ndefineCustomElement(Element, {\n  configureApp(app) {\n    // ...\n  }\n})"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Example - Composition API - Javascript",
    "codeDescription": "Illustrates the use of a computed property in the Composition API to filter a list of users based on their active status. This is a good practice to avoid using `v-if` with `v-for` directly on the element.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_12",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "const activeUsers = computed(() => {\n  return users.filter((user) => user.isActive)\n})"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Form with aria-describedby",
    "codeDescription": "This Vue.js code demonstrates using aria-describedby to associate instructions with an input field. The aria-describedby attribute provides additional information or instructions related to the input, improving accessibility.",
    "codeLanguage": "vue-html",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_13",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<fieldset>\n  <legend>Using aria-describedby</legend>\n  <label id=\"dob\" for=\"dob\">Date of Birth: </label>\n  <input type=\"date\" name=\"dob\" id=\"dob\" aria-describedby=\"dob-instructions\" />\n  <p id=\"dob-instructions\">MM/DD/YYYY</p>\n</fieldset>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "SSR App Rendering (Node.js)",
    "codeDescription": "This JavaScript snippet demonstrates the basic rendering of a Vue app to a string on the server using Node.js. It imports the necessary functions from 'vue' and 'vue/server-renderer', creates a simple Vue app instance with a button, and renders it to HTML. The rendered HTML is then logged to the console.",
    "codeLanguage": "JavaScript",
    "codeTokens": 186,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_0",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// this runs in Node.js on the server.\nimport { createSSRApp } from 'vue'\n// Vue's server-rendering API is exposed under `vue/server-renderer`.\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Vue with ES Module CDN (Composition API)",
    "codeDescription": "This snippet initializes a Vue application using the ES module build from a CDN, utilizing the Composition API. It defines a reactive 'message' using 'ref' and makes it available to the template.  Requires a browser that supports ES modules.",
    "codeLanguage": "HTML",
    "codeTokens": 141,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_16",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    setup() {\n      const message = ref('Hello Vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide per-instance state using Options API",
    "codeDescription": "This code demonstrates how to provide per-instance state in Vue.js' Options API.  The `provide` option should be a function that returns an object containing the provided values. This is necessary to access `this` and provide data defined in the `data()` option. Note that this does not make the injection reactive unless further steps are taken.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_4",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    // use function syntax so that we can access `this`\n    return {\n      message: this.message\n    }\n  }\n}"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use component-scoped styling - Good Example 2 - HTML/CSS (CSS Modules)",
    "codeDescription": "Demonstrates the correct way of styling components using CSS Modules in Single-File Components. This uses unique class names for each component and avoids style conflicts.",
    "codeLanguage": "vue-html",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_17",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">×</button>\n</template>\n\n<!-- Using CSS modules -->\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.buttonClose {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Fallthrough Attributes in Multi-Root Component Vue HTML",
    "codeDescription": "This example demonstrates how to explicitly bind `$attrs` to a specific element in a multi-root component to resolve the fallthrough attribute warning.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_9",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Combining Suspense with Transition, KeepAlive and RouterView",
    "codeDescription": "This HTML snippet shows how to combine `<Suspense>` with `<Transition>`, `<KeepAlive>`, and `<RouterView>` components in Vue.js, ensuring they all work together correctly. The `<RouterView>` uses a slot prop to access the current component, which is then wrapped by `<Transition>`, `<KeepAlive>`, and `<Suspense>`.",
    "codeLanguage": "vue-html",
    "codeTokens": 181,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_3",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<RouterView v-slot=\"{ Component }\">\n  <template v-if=\"Component\">\n    <Transition mode=\"out-in\">\n      <KeepAlive>\n        <Suspense>\n          <!-- main content -->\n          <component :is=\"Component\"></component>\n\n          <!-- loading state -->\n          <template #fallback>\n            Loading...\n          </template>\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </template>\n</RouterView>"
      }
    ],
    "relevance": 0.8,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic Transition CSS",
    "codeDescription": "CSS styles for a basic fade transition. Defines the active and to/from states using `opacity` and `transition` properties. The `v-enter-active` and `v-leave-active` classes specify the duration and easing for the transition.",
    "codeLanguage": "css",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_1",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "css",
        "code": "/* we will explain what these classes do next! */\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Explicit Types with @vue-generic Directive",
    "codeDescription": "This code snippet demonstrates how to pass explicit types to a Vue component using the `@vue-generic` directive. This is useful when the type cannot be inferred automatically. In the example, `ApiSelect` components are used with different data types (`Actor` and `Genre`) that are imported from the '@/api' module.",
    "codeLanguage": "vue",
    "codeTokens": 162,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_31",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <!-- @vue-generic {import('@/api').Actor} -->\n  <ApiSelect v-model=\"peopleIds\" endpoint=\"/api/actors\" id-prop=\"actorId\" />\n\n  <!-- @vue-generic {import('@/api').Genre} -->\n  <ApiSelect v-model=\"genreIds\" endpoint=\"/api/genres\" id-prop=\"genreId\" />\n</template>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using mounted Hook (Options API)",
    "codeDescription": "This code snippet shows how to use the `mounted` lifecycle hook in the Options API to execute code after the component has been mounted. It is typically used to perform DOM manipulations after initial rendering.",
    "codeLanguage": "js",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_5",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  mounted() {\n    // component is now mounted.\n  }\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing beforeUnmount Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `beforeUnmount` lifecycle hook, which is called right before a Vue.js component instance is to be unmounted. When this hook is called, the component instance is still fully functional. This hook is not called during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_6",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  beforeUnmount?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Author Data (Options API)",
    "codeDescription": "This code snippet initializes the author data with a name and an array of books using the Options API in Vue.js.  It defines the `data` property within the component's configuration object, returning an object that includes the author's name and a list of books.  This is used as the initial state for the component.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_0",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue SFC Example (Composition API)",
    "codeDescription": "This is an example of a Vue Single-File Component using the Composition API. It showcases the `script setup` syntax for a more concise component definition with reactive data and a template section rendering that data, along with component-scoped CSS.",
    "codeLanguage": "vue",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_1",
    "pageTitle": "Vue Single-File Components (SFC)",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Transition Component with CSS Animations in HTML",
    "codeDescription": "This Vue.js component wraps a paragraph element with a v-if directive within a <Transition> component.  The `show` data property controls the visibility of the paragraph, triggering the transition when it changes. This example uses the default transition class naming convention.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_6",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"bounce\">\n  <p v-if=\"show\" style=\"text-align: center;\">\n    Hello here is some bouncy text!\n  </p>\n</Transition>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition Between Dynamic Components - Vue HTML",
    "codeDescription": "This snippet demonstrates how to use the `<Transition>` component to animate transitions between dynamic components in Vue. The `mode=\"out-in\"` ensures that the exiting component is fully transitioned out before the entering component is transitioned in.  The `activeComponent` prop determines which component is rendered.",
    "codeLanguage": "html",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_23",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "html",
        "code": "<Transition name=\"fade\" mode=\"out-in\">\n  <component :is=\"activeComponent\"></component>\n</Transition>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Attribute Binding Escaping in Vue.js",
    "codeDescription": "This example demonstrates how Vue automatically escapes dynamic attribute bindings to prevent HTML injection. The user-provided string containing an `onclick` attribute is escaped, preventing the execution of JavaScript.",
    "codeLanguage": "HTML",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_4",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<h1 :title=\"userProvidedString\">\n  hello\n</h1>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Built-in Components by Name in Vue",
    "codeDescription": "Demonstrates how to register and use built-in components like `Transition` and `TransitionGroup` with the `<component>` tag. The `is` prop is bound to the component name, which necessitates registration in the `components` option.",
    "codeLanguage": "vue",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_4",
    "pageTitle": "Vue.js Built-in Special Elements Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport { Transition, TransitionGroup } from 'vue'\n\nexport default {\n  components: {\n    Transition,\n    TransitionGroup\n  }\n}\n</script>\n\n<template>\n  <component :is=\"isGroup ? 'TransitionGroup' : 'Transition'\">\n    ...\n  </component>\n</template>"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Deep Selectors Compiled - CSS",
    "codeDescription": "Shows the compiled output of the deep selector example, demonstrating how the `:deep()` pseudo-class is transformed to target elements without the scoping attribute.",
    "codeLanguage": "css",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_3",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "css",
        "code": ".a[data-v-f3f3eg9] .b {\n  /* ... */\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Readonly Computed Property in Vue.js",
    "codeDescription": "This example shows how to define a read-only computed property in a Vue.js component. The computed property `aDouble` returns the value of `this.a` multiplied by 2. Computed properties are cached and only re-evaluated when their dependencies change.",
    "codeLanguage": "javascript",
    "codeTokens": 224,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_4",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return { a: 1 }\n  },\n  computed: {\n    // readonly\n    aDouble() {\n      return this.a * 2\n    },\n    // writable\n    aPlus: {\n      get() {\n        return this.a + 1\n      },\n      set(v) {\n        this.a = v - 1\n      }\n    }\n  },\n  created() {\n    console.log(this.aDouble) // => 2\n    console.log(this.aPlus) // => 2\n\n    this.aPlus = 3\n    console.log(this.a) // => 2\n    console.log(this.aDouble) // => 4\n  }\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Custom Directive with Script Setup (Composition API) Vue",
    "codeDescription": "Defines a custom directive `vHighlight` within a `<script setup>` block. This directive adds the class `is-highlight` to the element it is bound to when the element is mounted.",
    "codeLanguage": "vue",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_0",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "const vHighlight = {\n  mounted: el => {\n    el.classList.add('is-highlight')\n  }\n}"
      }
    ],
    "relevance": 0.795,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide Option: Basic Usage (Vue.js)",
    "codeDescription": "Demonstrates the basic usage of the `provide` option in Vue.js to provide values that can be injected by descendant components. It uses both a string key and a Symbol key for providing values.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_0",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const s = Symbol()\n\nexport default {\n  provide: {\n    foo: 'foo',\n    [s]: 'bar'\n  }\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Component Transition - Vue HTML",
    "codeDescription": "This example uses the `<Transition>` component with a dynamic component (`<component :is=\"view\">`). It also specifies a `name` for CSS class generation, sets the `mode` to `out-in` for a specific transition order, and uses `appear` to animate on initial render.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_3",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"fade\" mode=\"out-in\" appear>\n  <component :is=\"view\"></component>\n</Transition>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing SSR Context in Vue Component",
    "codeDescription": "This snippet demonstrates how to access the SSR context within a Vue component using the `useSSRContext` composable. It checks if the code is running during server-side rendering (SSR) using `import.meta.env.SSR` and then retrieves the context object. This allows components to attach information to the context, such as head metadata.",
    "codeLanguage": "vue",
    "codeTokens": 161,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_1",
    "pageTitle": "Vue.js Server-Side Rendering API",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useSSRContext } from 'vue'\n\n// make sure to only call it during SSR\n// https://vitejs.dev/guide/ssr.html#conditional-logic\nif (import.meta.env.SSR) {\n  const ctx = useSSRContext()\n  // ...attach properties to the context\n}\n</script>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Object Syntax for Style Binding in Vue.js",
    "codeDescription": "This demonstrates using object syntax with style bindings to restrict which style properties users can control. By limiting the allowed properties, the risk of clickjacking can be reduced. Sanitizing URLs is also crucial.",
    "codeLanguage": "HTML",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_13",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Integrating Immer with Vue (JavaScript)",
    "codeDescription": "This JavaScript code provides a composable function `useImmer` that integrates Immer with Vue. It uses a shallow ref to hold the immutable state and the `produce` function from Immer to update the state immutably. This composable returns the state and an update function.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_14",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { produce } from 'immer'\nimport { shallowRef } from 'vue'\n\nexport function useImmer(baseState) {\n  const state = shallowRef(baseState)\n  const update = (updater) => {\n    state.value = produce(state.value, updater)\n  }\n\n  return [state, update]\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Options Type Definition (TypeScript)",
    "codeDescription": "This TypeScript interface defines the type for the `$options` property, which exposes the resolved component options used for instantiating the current component instance. It's the merge result of global mixins, component `extends` base, and component mixins.",
    "codeLanguage": "typescript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_3",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $options: ComponentOptions\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Self-closing Vue Components in SFC and JSX",
    "codeDescription": "This vue-html snippet illustrates the correct way to use self-closing tags for Vue components that have no content within Single-File Components (SFCs), string templates, and JSX. It uses the self-closing tag syntax `/>` for components like `<MyComponent/>` in these contexts.",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_2",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- In Single-File Components, string templates, and JSX -->\n<MyComponent/>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Count Initialization (Composition API)",
    "codeDescription": "Defines a reactive variable `count` using Vue's Composition API's `ref` function. This variable is initialized to 0 and can be used to track the number of times an event is triggered. This snippet is part of a larger example showcasing event handling with inline handlers.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_0",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Vue App (Options API)",
    "codeDescription": "This snippet demonstrates how to initialize a Vue application using the Options API. It creates a new Vue app instance, defines a reactive `count` data property, and mounts the app to an HTML element with the ID 'app'.\n\nDependencies: vue\nInput: None\nOutput: A Vue application instance mounted to the DOM.",
    "codeLanguage": "JavaScript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_0",
    "pageTitle": "Vue.js Introduction",
    "codeList": [
      {
        "language": "js",
        "code": "import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reusing Components Vue-HTML",
    "codeDescription": "Demonstrates the reusability of components by displaying the ButtonCounter component multiple times.  Each instance of the component maintains its own independent state.",
    "codeLanguage": "vue-html",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_6",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Input Binding for Number Animation (Vue)",
    "codeDescription": "This Vue HTML snippet includes an input field bound to the `number` data property and displays the animated number (`tweened.number`) formatted to zero decimal places.  It utilizes `v-model.number` to ensure input is treated as a number.",
    "codeLanguage": "vue-html",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_9",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "vue-html",
        "code": "Type a number: <input v-model.number=\"number\" />\n<p>{{ tweened.number.toFixed(0) }}</p>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Component Setup with Error Highlighting",
    "codeDescription": "This Vue.js component uses the Composition API to manage error highlighting based on the URL hash. It imports necessary modules from Vue and a data file containing error information, then utilizes `ref` to create a reactive variable `highlight` and `onMounted` to set the `highlight` value based on the URL hash after the component is mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/error-reference/index.md#_snippet_0",
    "pageTitle": "Vue.js Production Error Code Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, onMounted } from 'vue'\nimport { data } from './errors.data.ts'\nimport ErrorsTable from './ErrorsTable.vue'\n\nconst highlight = ref()\nonMounted(() => {\n  highlight.value = location.hash.slice(1)\n})"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject Option: Optional Injection (Vue.js)",
    "codeDescription": "Demonstrates how to make an injected dependency optional by providing a default value using the object syntax for the `inject` option in Vue.js.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_5",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Child = {\n  inject: {\n    foo: { default: 'foo' }\n  }\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Props in setup()",
    "codeDescription": "Illustrates how to access props within the `setup()` function in a Vue.js component. It highlights that props are reactive and updated when new props are passed in, and recommends accessing props as `props.xxx` to maintain reactivity.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_1",
    "pageTitle": "Vue.js Composition API setup() Hook",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Eager Watcher in Composition API (Vue.js)",
    "codeDescription": "This code demonstrates how to create an eager watcher in Vue.js using the Composition API.  The `immediate: true` option ensures that the callback is executed immediately.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_9",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  source,\n  (newValue, oldValue) => {\n    // executed immediately, then again when `source` changes\n  },\n  { immediate: true }\n)"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Watch Option Interface Definition TypeScript",
    "codeDescription": "Defines the TypeScript interface for the `watch` option in Vue.js component options, including different types for watch callbacks and associated options like immediate, deep, and flush.",
    "codeLanguage": "typescript",
    "codeTokens": 216,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_7",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  watch?: {\n    [key: string]: WatchOptionItem | WatchOptionItem[]\n  }\n}\n\ntype WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype ObjectWatchOptionItem = {\n  handler: WatchCallback | string\n  immediate?: boolean // default: false\n  deep?: boolean // default: false\n  flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref Unwrapping in Templates (Not Top-Level Property)",
    "codeDescription": "Illustrates that ref unwrapping does not apply if the ref is not a top-level property in the template render context. `object.id` is not unwrapped and remains a ref object, requiring explicit unwrapping or destructuring.",
    "codeLanguage": "vue-html",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_26",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{ object.id + 1 }}"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reducing Reactivity Overhead with shallowRef",
    "codeDescription": "Demonstrates how to use `shallowRef()` to opt-out of deep reactivity for large immutable structures. Updates to nested properties won't trigger reactivity unless the root state is replaced.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_7",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const shallowArray = shallowRef([\n  /* big list of deep objects */\n])\n\n// this won't trigger updates...\nshallowArray.value.push(newObject)\n// this does:\nshallowArray.value = [...shallowArray.value, newObject]\n\n// this won't trigger updates...\nshallowArray.value[0].foo = 1\n// this does:\nshallowArray.value = [\n  {\n    ...shallowArray.value[0],\n    foo: 1\n  },\n  ...shallowArray.value.slice(1)\n]"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "useModel() Type Definition - TypeScript",
    "codeDescription": "Defines the type definitions for the `useModel()` function and related types `DefineModelOptions` and `ModelRef`. `useModel()` is a helper function underlying `defineModel()` and is available in Vue 3.4+. It allows for creating a two-way binding ref.",
    "codeLanguage": "typescript",
    "codeTokens": 189,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_2",
    "pageTitle": "Vue Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function useModel(\n    props: Record<string, any>,\n    key: string,\n    options?: DefineModelOptions\n  ): ModelRef\n\n  type DefineModelOptions<T = any> = {\n    get?: (v: T) => any\n    set?: (v: T) => any\n  }\n\n  type ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [\n    ModelRef<T, M, G, S>,\n    Record<M, true | undefined>\n  ]"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Transition with Event Listener - Vue HTML",
    "codeDescription": "This example demonstrates how to listen to transition events, specifically the `@after-enter` event. When the transition completes after entering, the `onTransitionComplete` method will be called.",
    "codeLanguage": "vue-html",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_4",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition @after-enter=\"onTransitionComplete\">\n  <div v-show=\"ok\">toggled content</div>\n</Transition>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Custom Directive (Object Directive)",
    "codeDescription": "Demonstrates registering a global custom directive using app.directive() with an object-based directive definition. It creates a Vue application instance and registers a directive named 'myDirective' with a configuration object containing custom directive hooks. This enables custom DOM manipulation and logic during the component lifecycle.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_6",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Basic Script Setup Syntax Vue",
    "codeDescription": "Demonstrates the basic syntax for using `<script setup>` in a Vue Single-File Component (SFC).  The `setup` attribute is added to the `<script>` block to enable the syntax, where code inside is compiled as the content of the component's `setup()` function.",
    "codeLanguage": "vue",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_0",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconsole.log('hello script setup')\n</script>"
      }
    ],
    "relevance": 0.79,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Checkbox Value Assignment",
    "codeDescription": "Illustrates assigning string values of 'a' to the `picked` property when a radio button is checked and boolean values of true or false to the `toggle` property when a checkbox is checked. Also demonstrates assigning string values to a `selected` property when selecting the first option in a select element.",
    "codeLanguage": "vue-html",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#_snippet_23",
    "pageTitle": "Vue.js Form Input Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- `picked` is a string \"a\" when checked -->\n<input type=\"radio\" v-model=\"picked\" value=\"a\" />\n\n<!-- `toggle` is either true or false -->\n<input type=\"checkbox\" v-model=\"toggle\" />\n\n<!-- `selected` is a string \"abc\" when the first option is selected -->\n<select v-model=\"selected\">\n  <option value=\"abc\">ABC</option>\n</select>"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Event Handler Definition (Composition API)",
    "codeDescription": "Defines a `warn` method that receives both a `message` string and an `event` object. The method prevents the default behavior of the event if an event object is provided, and then displays an alert with the provided message. It uses Vue's Composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_10",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "javascript",
        "code": "function warn(message, event) {\n  // now we have access to the native event\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Import Transition Component in Render Function - JavaScript",
    "codeDescription": "This code snippet demonstrates how to import the `Transition` component from Vue.js for use within a render function. It's necessary to explicitly import built-in components when using render functions.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_0",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h, Transition } from 'vue'\n\nh(Transition, {\n  /* props */\n})"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Posts Array in Composition API",
    "codeDescription": "This snippet demonstrates how to define an array of posts using `ref` in a Vue component using the Composition API.",
    "codeLanguage": "js",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_14",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "js",
        "code": "const posts = ref([\n  { id: 1, title: 'My journey with Vue' },\n  { id: 2, title: 'Blogging with Vue' },\n  { id: 3, title: 'Why Vue is so fun' }\n])"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Element Usage in HTML",
    "codeDescription": "Example of how the custom element defined with Vue is used inside HTML. This shows the HTML tag that will be used to render the Vue component as a custom element.",
    "codeLanguage": "Vue HTML",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_5",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "Vue HTML",
        "code": "<my-vue-element></my-vue-element>"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Destructuring Props with toRefs()",
    "codeDescription": "Shows how to destructure props while retaining reactivity using `toRefs()` and `toRef()` utility APIs.  `toRefs` converts the props object into an object of refs, while `toRef` converts a single prop into a ref.",
    "codeLanguage": "javascript",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#_snippet_2",
    "pageTitle": "Vue.js Composition API setup() Hook",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Emit Type Definition (TypeScript)",
    "codeDescription": "This TypeScript interface defines the `$emit` method for triggering custom events on the current component instance. It takes an event name and any number of additional arguments to be passed to the listener's callback function.",
    "codeLanguage": "typescript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_12",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $emit(event: string, ...args: any[]): void\n}"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scaffold Vue Project with bun",
    "codeDescription": "This command utilizes bun to execute the create-vue scaffolding tool. It creates a new Vue project, utilizing bun as the package manager, offering an alternative to npm, yarn, or pnpm.",
    "codeLanguage": "sh",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_4",
    "pageTitle": "Vue Tooling Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ bun create vue@latest"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Stopping a Watcher in Vue.js",
    "codeDescription": "Shows how to stop a watcher created with `watchEffect()` using the handle function returned by `watchEffect()`. Calling the handle function prevents the effect from running again.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_10",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const stop = watchEffect(() => {})\n\n// when the watcher is no longer needed:\nstop()"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Click Event with Ctrl Modifier in Vue.js",
    "codeDescription": "This example illustrates binding the `onClick` method to a button's click event when the Ctrl key is pressed (and potentially other modifiers). It also demonstrates binding the `onCtrlClick` method to the click event, but only when the Ctrl key is pressed and no other modifier keys are active, using the `.exact` modifier.",
    "codeLanguage": "vue-html",
    "codeTokens": 160,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_16",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Built-in Components - Options API - JavaScript",
    "codeDescription": "This snippet demonstrates importing and rendering built-in components like `Transition` using the Options API and the `h()` function. These components need to be explicitly imported to be used.",
    "codeLanguage": "JavaScript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_32",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, KeepAlive, Teleport, Transition, TransitionGroup } from 'vue'\n\nexport default {\n  render () {\n    return h(Transition, { mode: 'out-in' }, /* ... */)\n  }\n}"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Updating List using push() - Composition API",
    "codeDescription": "This JavaScript code demonstrates how to update a list in Vue.js Composition API by using the `push()` method to add a new item (`newTodo`) to the `todos` array.  `todos` is assumed to be a `ref` object, hence the `.value` access.",
    "codeLanguage": "js",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_1",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "js",
        "code": "todos.value.push(newTodo)"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Methods to Mutate ref - Composition API - JavaScript",
    "codeDescription": "Illustrates declaring a function within the `setup()` function to mutate a `ref` and exposing the function as a method.  The `.value` property is needed within the JavaScript function to modify the ref. The function then needs to be returned to be used within the template.\nDependencies: Vue.js",
    "codeLanguage": "JavaScript",
    "codeTokens": 147,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_7",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    function increment() {\n      // .value is needed in JavaScript\n      count.value++\n    }\n\n    // don't forget to expose the function as well.\n    return {\n      count,\n      increment\n    }\n  }\n}"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering User-Provided HTML with innerHTML in Render Function",
    "codeDescription": "This example shows how to render user-provided HTML using the `innerHTML` property within a render function. It's crucial to ensure the HTML is safe before rendering it this way, as unsanitized HTML can lead to XSS attacks.",
    "codeLanguage": "JavaScript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_8",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "h('div', {\n  innerHTML: this.userProvidedHtml\n})"
      }
    ],
    "relevance": 0.785,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-if and v-for with <template> (Correct)",
    "codeDescription": "This code snippet shows the correct usage of `v-if` and `v-for` by placing the `v-for` on a wrapping `<template>` tag. This allows the `v-if` condition to access variables from the `v-for` scope.",
    "codeLanguage": "html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_18",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<template v-for=\"todo in todos\">\n  <li v-if=\"!todo.isComplete\">\n    {{ todo.name }}\n  </li>\n</template>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "effectScope() Example in Vue.js",
    "codeDescription": "Shows how to create and use an `effectScope()` to manage reactive effects like `computed` and `watch`. It includes creating a scope, running effects within the scope, and stopping the scope to dispose of all effects.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_9",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scope = effectScope()\n\nscope.run(() => {\n  const doubled = computed(() => counter.value * 2)\n\n  watch(doubled, () => console.log(doubled.value))\n\n  watchEffect(() => console.log('Count: ', doubled.value))\n})\n\n// to dispose all effects in the scope\nscope.stop()"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-memo Directive in Vue.js",
    "codeDescription": "Explains how v-memo memoizes a sub-tree of the template based on a dependency array.  If the values in the array haven't changed since the last render, updates to the sub-tree are skipped, improving performance, especially in large v-for lists.  Correct dependency specification is critical.",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_10",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-memo=\"[valueA, valueB]\">\n  ...\n</div>"
      },
      {
        "language": "vue-html",
        "code": "<div v-for=\"item in list\" :key=\"item.id\" v-memo=\"[item.id === selected]\">\n  <p>ID: {{ item.id }} - selected: {{ item.id === selected }}</p>\n  <p>...more child nodes</p>\n</div>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Style Binding in Vue.js Templates",
    "codeDescription": "This code snippet demonstrates how to use dynamic style bindings in Vue.js templates. User-provided styles can create a security risk by allowing malicious users to perform clickjacking or inject custom styles. Sanitize styles or restrict user input.",
    "codeLanguage": "HTML",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_11",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<a\n  :href=\"sanitizedUrl\"\n  :style=\"userProvidedStyles\"\n>\n  click me\n</a>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Augmenting TSX Props in Vue.js",
    "codeDescription": "Shows how to augment allowed TSX props using `ComponentCustomProps` to enable the usage of non-declared props on TSX elements. This is particularly useful when working with third-party components or libraries that might not have complete type definitions.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_5",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare module 'vue' {\n  interface ComponentCustomProps {\n    hello?: string\n  }\n}\n\nexport {}"
      },
      {
        "language": "typescript",
        "code": "// now works even if hello is not a declared prop\n<MyComponent hello=\"world\" />"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Generic Component Template Refs with ComponentExposed in Vue.js",
    "codeDescription": "This code demonstrates how to type template refs for generic components using `ComponentExposed` from the `vue-component-type-helpers` library. It is required because `InstanceType` doesn't work for generic components. It imports `useTemplateRef` from vue, `MyGenericModal` component, and `ComponentExposed` from `vue-component-type-helpers`.",
    "codeLanguage": "vue",
    "codeTokens": 171,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_33",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport MyGenericModal from './MyGenericModal.vue'\nimport type { ComponentExposed } from 'vue-component-type-helpers'\n\nconst modal = useTemplateRef<ComponentExposed<typeof MyGenericModal>>('modal')\n\nconst openModal = () => {\n  modal.value?.open('newValue')\n}\n</script>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Components with JSX",
    "codeDescription": "This code snippet demonstrates how to render Vue components using JSX. It imports `Foo` and `Bar` components and renders them within a `div` element.",
    "codeLanguage": "JSX",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_19",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JSX",
        "code": "function render() {\n  return (\n    <div>\n      <Foo />\n      <Bar />\n    </div>\n  )\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Chained Global Component Registration in Vue.js",
    "codeDescription": "Illustrates how to chain the `.component()` method to register multiple components globally in a concise manner. This approach allows for registering several components in a single statement.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_2",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "app\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Functional Component Render Function - JavaScript",
    "codeDescription": "Demonstrates how to define a simple functional component using a render function. These are ideal for stateless, UI-focused components.",
    "codeLanguage": "js",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_3",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "function Hello() {\n  return 'hello world!'\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Incorrect Self-Closing Tag Example in Vue (In-DOM)",
    "codeDescription": "Illustrates the problem that occurs when using a self-closing tag for a component in in-DOM templates. The browser incorrectly interprets the subsequent element as content within the component, leading to unexpected rendering.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_33",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<my-component /> <!-- we intend to close the tag here... -->\n<span>hello</span>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Writable Computed Property with Previous Value (Options API)",
    "codeDescription": "This code snippet demonstrates a writable computed property where the getter accesses the previous value and the setter updates the state. It's implemented using the Options API in Vue.js.  The getter returns the current count if it's less than or equal to 3, otherwise it returns the previous value. The setter updates the count by multiplying the new value by 2.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_15",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Setting isCustomElement Compiler Option in Vue.js",
    "codeDescription": "This example demonstrates setting the `isCustomElement` compiler option to recognize native custom elements. The function should return `true` if the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_17",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// treat all tags starting with 'ion-' as custom elements\napp.config.compilerOptions.isCustomElement = (tag) => {\n  return tag.startsWith('ion-')\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Dynamic v-bind Argument",
    "codeDescription": "Demonstrates how to use a JavaScript expression to dynamically determine the attribute bound by v-bind. The attribute name is determined by the value of `attributeName`. A shorthand notation is also shown. Requires a Vue component instance with a data property `attributeName`.",
    "codeLanguage": "vue-html",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_13",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a v-bind:[attributeName]=\"url\"> ... </a>\n\n<!-- shorthand -->\n<a :[attributeName]=\"url\"> ... </a>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inefficient Computed Property with New Object Creation",
    "codeDescription": "Shows a scenario where a computed property creates a new object on each compute, leading to unnecessary effect triggers because Vue.js considers the new value always different from the old one.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_5",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const computedObj = computed(() => {\n  return {\n    isEven: count.value % 2 === 0\n  }\n})"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Angular-style Signals in Vue",
    "codeDescription": "This code snippet demonstrates how to create Angular-style signals in Vue using `shallowRef`. It exports a `signal` function that returns a function which acts as a getter and also has `set` and `update` methods for modifying the reactive value.",
    "codeLanguage": "JavaScript",
    "codeTokens": 144,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_17",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { shallowRef } from 'vue'\n\nexport function signal(initialValue) {\n  const r = shallowRef(initialValue)\n  const s = () => r.value\n  s.set = (value) => {\n    r.value = value\n  }\n  s.update = (updater) => {\n    r.value = updater(r.value)\n  }\n  return s\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Prop Name Casing in defineProps (Composition API)",
    "codeDescription": "Example of prop name casing using defineProps in Composition API. The 'greetingMessage' is declared as a camelCase prop.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_8",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  greetingMessage: String\n})"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Slots to Components - JSX",
    "codeDescription": "This code shows how to pass slots to a component using JSX. It demonstrates passing both a single default slot and named slots as functions within an object.",
    "codeLanguage": "JSX",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_27",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JSX",
        "code": "// default\n<MyComponent>{() => 'hello'}</MyComponent>\n\n// named\n<MyComponent>{{\n  default: () => 'default slot',\n  foo: () => <div>foo</div>,\n  bar: () => [<span>one</span>, <span>two</span>]\n}}</MyComponent>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Add Test Script to Package.json",
    "codeDescription": "This code snippet adds a test script to the `package.json` file, allowing you to run Vitest tests using the command `npm test`.",
    "codeLanguage": "json",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#_snippet_11",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  // ...\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Normalizing Values with toValue in Vue.js Composables",
    "codeDescription": "This code snippet illustrates the use of `toValue()` within a composable function to normalize input arguments. `toValue()` converts refs and getters into their corresponding values, ensuring consistent handling of different input types. This approach promotes flexibility and allows composables to accept various forms of input data.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#_snippet_11",
    "pageTitle": "Vue Composables: Reusing Stateful Logic",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  // If maybeRefOrGetter is a ref or a getter,\n  // its normalized value will be returned.\n  // Otherwise, it is returned as-is.\n  const value = toValue(maybeRefOrGetter)\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Refs with Options API",
    "codeDescription": "Demonstrates how to access template refs using the Options API.  It accesses the referenced DOM element through `this.$refs` in the `mounted` lifecycle hook, focusing the input element.",
    "codeLanguage": "vue",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_4",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Conditional Class in Array (Vue)",
    "codeDescription": "Uses a ternary expression within an array binding for the `class` attribute.  This allows conditionally applying a class based on a truthy value.",
    "codeLanguage": "vue-html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_13",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing mounted Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `mounted` lifecycle hook, which is called after a Vue.js component has been mounted. The component is considered mounted when all synchronous child components have been mounted and its DOM tree has been created and inserted into the parent container. This hook is not called during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_3",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  mounted?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.78,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Create Custom Element Type Helper in TypeScript",
    "codeDescription": "Creates a TypeScript type helper, `DefineCustomElement`, for registering custom element type definitions in Vue. It defines the `$props` and `$emit` properties for template type checking.  The `$props` type combines the element's props with global HTML props and Vue's special props. The `$emit` type is used to specifically define event types.",
    "codeLanguage": "typescript",
    "codeTokens": 402,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_16",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "typescript",
        "code": "// file: some-lib/src/DefineCustomElement.ts\n\n// We can re-use this type helper per each element we need to define.\ntype DefineCustomElement<\n  ElementType extends HTMLElement,\n  Events extends EventMap = {},\n  SelectedAttributes extends keyof ElementType = keyof ElementType\n> = new () => ElementType & {\n  // Use $props to define the properties exposed to template type checking. Vue\n  // specifically reads prop definitions from the `$props` type. Note that we\n  // combine the element's props with the global HTML props and Vue's special\n  // props.\n  /** @deprecated Do not use the $props property on a Custom Element ref, \n    this is for template prop types only. */\n  $props: HTMLAttributes &\n    Partial<Pick<ElementType, SelectedAttributes>> &\n    PublicProps\n\n  // Use $emit to specifically define event types. Vue specifically reads event\n  // types from the `$emit` type. Note that `$emit` expects a particular format\n  // that we map `Events` to.\n  /** @deprecated Do not use the $emit property on a Custom Element ref, \n    this is for template prop types only. */\n  $emit: VueEmit<Events>\n}\n\ntype EventMap = {\n  [event: string]: Event\n}\n\n// This maps an EventMap to the format that Vue's $emit type expects.\ntype VueEmit<T extends EventMap> = EmitFn<{  [K in keyof T]: (event: T[K]) => void\n}>"
      }
    ],
    "relevance": 0.778,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "isActive and hasError data properties (Options API)",
    "codeDescription": "Defines data properties within Vue's Options API to manage the 'active' and 'hasError' states. These properties are used to conditionally apply CSS classes to a DOM element.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_2",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    isActive: true,\n    hasError: false\n  }\n}"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Event Modifiers - Render Function - JavaScript",
    "codeDescription": "Shows how to use event modifiers like `.capture`, `.once` and `.passive` within render functions. Modifiers are concatenated to the event name in camelCase.",
    "codeLanguage": "js",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_14",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h('input', {\n  onClickCapture() {\n    /* listener in capture mode */\n  },\n  onKeyupOnce() {\n    /* triggers only once */\n  },\n  onMouseoverOnceCapture() {\n    /* once + capture */\n  }\n})"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "CSS Transitions for Move Animations in Lists",
    "codeDescription": "This CSS snippet extends the previous example to include move transitions, making the list items move smoothly when their order changes. It also addresses layout issues by positioning leaving items absolutely.",
    "codeLanguage": "css",
    "codeTokens": 141,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#_snippet_2",
    "pageTitle": "Vue.js TransitionGroup Component",
    "codeList": [
      {
        "language": "css",
        "code": ".list-move, /* apply transition to moving elements */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n/* ensure leaving items are taken out of layout flow so that moving\n   animations can be calculated correctly. */\n.list-leave-active {\n  position: absolute;\n}"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Usage of normal <script> alongside <script setup> in Vue",
    "codeDescription": "This code demonstrates the use of a normal `<script>` tag alongside `<script setup>`. A normal `<script>` is required for declaring options that cannot be expressed in `<script setup>`, declaring named exports, and running side effects that should only execute once.",
    "codeLanguage": "vue",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_26",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\n// normal <script>, executed in module scope (only once)\nrunSideEffectOnce()\n\n// declare additional options\nexport default {\n  inheritAttrs: false,\n  customOptions: {}\n}\n</script>\n\n<script setup>\n// executed in setup() scope (for each instance)\n</script>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Function Refs",
    "codeDescription": "Demonstrates the usage of function refs, where the `ref` attribute is bound to a function. This function is called on each component update, providing the element reference as the first argument, allowing for flexible storage of the reference.",
    "codeLanguage": "html",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_14",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "html",
        "code": "<input :ref=\"(el) => { /* assign el to a property or ref */ }\">"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Directive Argument HTML",
    "codeDescription": "Demonstrates the usage of a dynamic argument in a custom directive.  The argument passed to the directive will be dynamically updated based on the `arg` property in the component's state.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_11",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-example:[arg]=\"value\"></div>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Global Selectors in Scoped CSS - Vue",
    "codeDescription": "Illustrates how to use the `:global` pseudo-class to apply a CSS rule globally, bypassing the scoping mechanism. This is useful for applying styles to elements outside the component's scope.",
    "codeLanguage": "vue",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_5",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<style scoped>\n:global(.red) {\n  color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Updating List using filter() - Options API",
    "codeDescription": "This JavaScript code demonstrates how to update a list in Vue.js Options API by replacing the original array with a new filtered array. The `filter()` method is used to create the new array, and `this.todos` assumes that `todos` is defined in the `data` property of the Vue component.",
    "codeLanguage": "js",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_4",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "js",
        "code": "this.todos = this.todos.filter(/* ... */)"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing Read-Only Data in Vue (Composition API)",
    "codeDescription": "This snippet demonstrates providing read-only reactive data using the `readonly` function in Vue.js Composition API.  It provides a `count` ref wrapped in `readonly` to prevent mutation by the injecting component.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_16",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, provide, readonly } from 'vue'\n\nconst count = ref(0)\nprovide('read-only-count', readonly(count))\n</script>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Include Regex",
    "codeDescription": "Shows how to use the `include` prop with a regular expression to define which components should be cached by `<KeepAlive>`. The regular expression is bound using `v-bind`.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_3",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Exporting Vue Custom Elements",
    "codeDescription": "This JavaScript snippet demonstrates how to export individual Vue custom elements and a registration function for convenient use in other applications. It utilizes `defineCustomElement` from Vue to convert Vue components into custom elements and then exports them along with a function to register them with the browser's `customElements` API.",
    "codeLanguage": "javascript",
    "codeTokens": 170,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_11",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "javascript",
        "code": "// elements.js\n\nimport { defineCustomElement } from 'vue'\nimport Foo from './MyFoo.ce.vue'\nimport Bar from './MyBar.ce.vue'\n\nconst MyFoo = defineCustomElement(Foo)\nconst MyBar = defineCustomElement(Bar)\n\n// export individual elements\nexport { MyFoo, MyBar }\n\nexport function register() {\n  customElements.define('my-foo', MyFoo)\n  customElements.define('my-bar', MyBar)\n}"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Slot Props Interface in TypeScript",
    "codeDescription": "Defines the TypeScript interface `SlotProps` for the properties that can be passed to a `<slot>` element. It includes properties for scoped slots and a reserved property for the slot name.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_6",
    "pageTitle": "Vue.js Built-in Special Elements Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface SlotProps {\n  /**\n   * Any props passed to <slot> to passed as arguments\n   * for scoped slots\n   */\n  [key: string]: any\n  /**\n   * Reserved for specifying slot name.\n   */\n  name?: string\n}"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template Ref in Composition API in Vue",
    "codeDescription": "This code demonstrates how to use the `ref` attribute in the Composition API with `<script setup>` in Vue.js to create a template reference. The `useTemplateRef` helper is imported and used to bind the ref to the DOM element. The reference will be stored in a ref with matching name.",
    "codeLanguage": "Vue",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_3",
    "pageTitle": "Vue.js Built-in Special Attributes Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useTemplateRef } from 'vue'\n\nconst pRef = useTemplateRef('p')\n</script>\n\n<template>\n  <p ref=\"p\">hello</p>\n</template>"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method for Filtering (Options API)",
    "codeDescription": "Demonstrates how to use a method to filter an array in Vue.js using the Options API. The `even` method filters an array of numbers and returns a new array containing only the even numbers. This is useful when computed properties are not suitable, for instance, within nested `v-for` loops.",
    "codeLanguage": "javascript",
    "codeTokens": 148,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_29",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}"
      }
    ],
    "relevance": 0.775,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering content with v-if and v-else",
    "codeDescription": "This snippet shows how to use `v-if` and `v-else` directives together to render different content based on a condition. A button toggles the value of `awesome`, which controls which h1 element is displayed.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_2",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive with Transition - Vue HTML",
    "codeDescription": "This example demonstrates the combined usage of `<Transition>` and `<KeepAlive>`. The `<KeepAlive>` component caches the dynamic component, and the `<Transition>` component applies transition effects when the component is toggled.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_8",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition>\n  <KeepAlive>\n    <component :is=\"view\"></component>\n  </KeepAlive>\n</Transition>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding to Reactive classObject (Vue)",
    "codeDescription": "Binds the `class` attribute to a reactive `classObject`, dynamically applying classes based on the object's properties. This provides a cleaner way to manage class bindings in the template.",
    "codeLanguage": "vue-html",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_6",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"classObject\"></div>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Augmenting CSS Properties in Vue.js",
    "codeDescription": "Demonstrates how to augment the `CSSProperties` interface to allow custom CSS properties to be used in style bindings. This enables the use of CSS variables with type checking in Vue templates.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#_snippet_6",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare module 'vue' {\n  interface CSSProperties {\n    [key: `--${string}`]: string\n  }\n}"
      },
      {
        "language": "typescript",
        "code": "<div style={ { '--bg-color': 'blue' } }>"
      },
      {
        "language": "typescript",
        "code": "<div :style=\"{ '--bg-color': 'blue' }\"></div>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Pausing and Resuming a Watcher - JavaScript",
    "codeDescription": "Shows how to pause and resume a watcher created with the `watch` function in Vue.js. This feature is available in Vue 3.5+. The pause method temporarily suspends the watcher, while resume reactivates it.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#_snippet_23",
    "pageTitle": "Vue.js Reactivity API: Core",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { stop, pause, resume } = watch(() => {})\n\n// temporarily pause the watcher\npause()\n\n// resume later\nresume()\n\n// stop\nstop()"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering User-Provided HTML with innerHTML in Render Function (JSX)",
    "codeDescription": "This example shows how to render user-provided HTML using the `innerHTML` property within a render function using JSX. Be extremely careful when rendering user-provided HTML and ensure it is properly sanitized to prevent XSS.",
    "codeLanguage": "JSX",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_9",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "JSX",
        "code": "<div innerHTML={this.userProvidedHtml}></div>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring Compile-Time Flags in Vite",
    "codeDescription": "This code snippet demonstrates how to configure compile-time flags in a Vite project using the `define` config option. It enables detailed warnings for hydration mismatches in production builds. This is achieved by setting the `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flag to `'true'`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_0",
    "pageTitle": "Vue.js Compile-Time Flags Configuration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  define: {\n    // enable hydration mismatch details in production build\n    __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'true'\n  }\n})"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Scoped Slots - Parent Component - JavaScript",
    "codeDescription": "This code demonstrates rendering a scoped slot in the parent component using the Composition API and the `h()` function. It passes a slot function to the child component that receives data from the child.",
    "codeLanguage": "JavaScript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_28",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// parent component\nexport default {\n  setup() {\n    return () => h(MyComp, null, {\n      default: ({ text }) => h('p', text)\n    })\n  }\n}"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Showing content with v-show",
    "codeDescription": "This snippet demonstrates the use of the `v-show` directive to conditionally display an element by toggling its `display` CSS property. The element is always rendered, but its visibility is controlled by the `ok` variable.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#_snippet_5",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1 v-show=\"ok\">Hello!</h1>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding Event Listener with v-on Directive in Vue",
    "codeDescription": "This code demonstrates how to use the `v-on` directive to bind a click event to a button element. When the button is clicked, the `increment` method is called. The component's `count` property is displayed within the button's text.",
    "codeLanguage": "vue-html",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_0",
    "pageTitle": "Vue.js Event Listener Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button v-on:click=\"increment\">{{ count }}</button>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Object Syntax in Array Binding (Vue)",
    "codeDescription": "Combines object and array syntax for `class` binding.  This allows conditional application of classes using the object syntax within an array.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_14",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Retrieving Registered Component",
    "codeDescription": "Shows how to retrieve a globally registered component using app.component(). It gets the registered component 'MyComponent' and assigns it to a constant named 'MyComponent'.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_5",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// retrieve a registered component\nconst MyComponent = app.component('MyComponent')"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Iterating Through Object with Key and Value in Vue",
    "codeDescription": "This demonstrates iterating through an object's properties with `v-for`, accessing both the value and the key of each property.",
    "codeLanguage": "html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_13",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"(value, key) in myObject\">\n  {{ key }}: {{ value }}\n</li>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using webpack Treeshaking with defineComponent",
    "codeDescription": "This code snippet demonstrates how to mark a `defineComponent` call as side-effect-free to enable webpack treeshaking. Adding the `/*#__PURE__*/` annotation before the function call tells webpack that it's safe to remove this component if it's not used in the application, preventing unnecessary code from being included in the final bundle.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_5",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default /*#__PURE__*/ defineComponent(/* ... */)"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Built-in Components - Composition API - JavaScript",
    "codeDescription": "This snippet demonstrates importing and rendering built-in components like `Transition` using the Composition API and the `h()` function. These components need to be explicitly imported to be used.",
    "codeLanguage": "JavaScript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_31",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, KeepAlive, Teleport, Transition, TransitionGroup } from 'vue'\n\nexport default {\n  setup () {\n    return () => h(Transition, { mode: 'out-in' }, /* ... */)\n  }\n}"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Parent Scope and Index in v-for (Options API)",
    "codeDescription": "This code snippet initializes a parent message and an array of items using the Options API, providing data for rendering within a v-for loop that accesses both the item and its index.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_4",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "useId() Type Definition - TypeScript",
    "codeDescription": "Displays the type definition for the `useId()` function, which is used to generate unique application-wide IDs. This function doesn't take any arguments and returns a string which represents the unique ID.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#_snippet_6",
    "pageTitle": "Vue Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function useId(): string"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering a Range with v-for in Vue",
    "codeDescription": "This snippet shows how to use `v-for` to render a range of numbers. It iterates from 1 to 10 (inclusive) and displays each number within a `<span>` element.",
    "codeLanguage": "html",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_15",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<span v-for=\"n in 10\">{{ n }}</span>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Global Component Registration with SFC in Vue.js",
    "codeDescription": "Shows how to register a Single-File Component (SFC) globally using the `.component()` method. The component is imported from a `.vue` file and registered with a specified name.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#_snippet_1",
    "pageTitle": "Component Registration in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Solid-style Signals in Vue",
    "codeDescription": "This code snippet demonstrates how to create Solid-style signals in Vue using `shallowRef` and `triggerRef`. It exports a `createSignal` function that returns a getter and a setter for a reactive value. The setter includes an option to disable equality checks and trigger updates manually.",
    "codeLanguage": "JavaScript",
    "codeTokens": 162,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_16",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { shallowRef, triggerRef } from 'vue'\n\nexport function createSignal(value, options) {\n  const r = shallowRef(value)\n  const get = () => r.value\n  const set = (v) => {\n    r.value = typeof v === 'function' ? v(r.value) : v\n    if (options?.equals === false) triggerRef(r)\n  }\n  return [get, set]\n}"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using nextTick with Options API in Vue",
    "codeDescription": "This code snippet demonstrates how to use `nextTick` within a Vue component using the Options API. It increments a `count` data property and uses `nextTick` to wait for the DOM to update before asserting the updated value. The `await nextTick()` ensures the DOM has been updated before proceeding, demonstrating its usage with async/await in the Options API context.",
    "codeLanguage": "vue",
    "codeTokens": 215,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_2",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport { nextTick } from 'vue'\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    async increment() {\n      this.count++\n\n      // DOM not yet updated\n      console.log(document.getElementById('counter').textContent) // 0\n\n      await nextTick()\n      // DOM is now updated\n      console.log(document.getElementById('counter').textContent) // 1\n    }\n  }\n}\n</script>\n\n<template>\n  <button id=\"counter\" @click=\"increment\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.77,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-text Directive in Vue.js",
    "codeDescription": "This snippet demonstrates the usage of the `v-text` directive in Vue.js to update the text content of an element. It sets the `textContent` property of the element, overwriting any existing content. It's equivalent to using mustache interpolation.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_0",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span v-text=\"msg\"></span>\n<!-- same as -->\n<span>{{msg}}</span>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Augmenting Custom Options in Vue.js with TypeScript",
    "codeDescription": "This snippet shows how to augment the `ComponentCustomOptions` interface in Vue.js to support custom component options provided by plugins, such as `beforeRouteEnter` from `vue-router`.  It allows you to properly type the arguments of these custom options, ensuring type safety when using plugins that extend component options.",
    "codeLanguage": "typescript",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#_snippet_7",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  beforeRouteEnter(to, from, next) {\n    // ...\n  }\n})\n"
      },
      {
        "language": "typescript",
        "code": "import { Route } from 'vue-router'\n\ndeclare module 'vue' {\n  interface ComponentCustomOptions {\n    beforeRouteEnter?(to: Route, from: Route, next: () => void): void\n  }\n}"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use the filteredTodos in v-for",
    "codeDescription": "This diff snippet shows how to replace the original `todos` list with the computed `filteredTodos` property in the `v-for` directive. This will render only the todos that satisfy the filtering logic defined in the `filteredTodos` computed property.",
    "codeLanguage": "diff",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_5",
    "pageTitle": "Vue.js Computed Properties in Todo List",
    "codeList": [
      {
        "language": "diff",
        "code": "- <li v-for=\"todo in todos\">\n+ <li v-for=\"todo in filteredTodos\">"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendered HTML with Slots Vue.js",
    "codeDescription": "This snippet shows the final rendered HTML after using the `<FancyButton>` component with the slot content \"Click me!\".  The content has been inserted into the location of the slot, and the element has the `fancy-btn` class.",
    "codeLanguage": "html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_2",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "html",
        "code": "<button class=\"fancy-btn\">Click me!</button>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Posts Array in Options API",
    "codeDescription": "This snippet demonstrates how to define an array of posts in the data property of a Vue component using the Options API.",
    "codeLanguage": "js",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_13",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  // ...\n  data() {\n    return {\n      posts: [\n        { id: 1, title: 'My journey with Vue' },\n        { id: 2, title: 'Blogging with Vue' },\n        { id: 3, title: 'Why Vue is so fun' }\n      ]\n    }\n  }\n}"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Define Component with Props and Setup",
    "codeDescription": "Illustrates using `defineComponent()` with the `setup()` function to enable type inference for props in Vue.js when using the Composition API. This example demonstrates how to define props and access them within the `setup()` function, with TypeScript providing type checking for the props.",
    "codeLanguage": "typescript",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#_snippet_1",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using mounted in createApp (Options API)",
    "codeDescription": "This snippet demonstrates using the `mounted` lifecycle hook within a `createApp` instance in the Options API to execute code after the component has been fully mounted within the application.",
    "codeLanguage": "js",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_6",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "createApp({\n  mounted() {\n    // component is now mounted.\n  }\n})"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "CSS Animation Definitions",
    "codeDescription": "This CSS defines the animation applied to the element during the enter and leave transitions.  It uses the `animation` property to apply a keyframe animation named `bounce-in` with a duration of 0.5 seconds. The `reverse` keyword is used for the leave animation to play the animation in reverse.",
    "codeLanguage": "css",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#_snippet_7",
    "pageTitle": "Vue.js Transition Component",
    "codeList": [
      {
        "language": "css",
        "code": ".bounce-enter-active {\n  animation: bounce-in 0.5s;\n}\n.bounce-leave-active {\n  animation: bounce-in 0.5s reverse;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.25);\n  }\n  100% {\n    transform: scale(1);\n  }\n}"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes in Template Vue HTML",
    "codeDescription": "This shows how to access fallthrough attributes in a component's template using `$attrs`. This allows you to manually bind the attributes to specific elements.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_6",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>Fallthrough attributes: {{ $attrs }}</span>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue onServerPrefetch() Example",
    "codeDescription": "Demonstrates the usage of onServerPrefetch within a Vue component. It fetches data on the server using `fetchOnServer` and assigns it to a ref. If the component is dynamically rendered on the client, it fetches data using `fetchOnClient` in the `onMounted` hook.",
    "codeLanguage": "vue",
    "codeTokens": 219,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#_snippet_4",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n  // component is rendered as part of the initial request\n  // pre-fetch data on server as it is faster than on the client\n  data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n  if (!data.value) {\n    // if data is null on mount, it means the component\n    // is dynamically rendered on the client. Perform a\n    // client-side fetch instead.\n    data.value = await fetchOnClient(/* ... */)\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Props Type Definition (TypeScript)",
    "codeDescription": "This TypeScript interface defines the type for the `$props` property on a Vue component instance.  It holds the resolved props declared using the `props` option. The component instance proxies access to properties on this props object.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#_snippet_1",
    "pageTitle": "Vue.js Component Instance Properties and Methods",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $props: object\n}"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mutating ref in Event Handlers - Composition API - HTML",
    "codeDescription": "Demonstrates mutating a `ref` directly in an event handler within a Vue template. This showcases how to directly modify the ref's value in response to user interactions.\nDependencies: Vue.js",
    "codeLanguage": "Vue",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#_snippet_6",
    "pageTitle": "Vue.js Reactivity Fundamentals",
    "codeList": [
      {
        "language": "Vue",
        "code": "<button @click=\"count++\">\n  {{ count }}\n</button>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Function Shorthand Directive Definition JavaScript",
    "codeDescription": "Defines a custom directive using the function shorthand, which combines the `mounted` and `updated` hooks into a single function.  This example sets the color style of the element to the value passed to the directive.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_13",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js v-on Modifier Example",
    "codeDescription": "Demonstrates the use of the `.prevent` modifier on the `v-on` directive. This modifier calls `event.preventDefault()` on the triggered event, preventing the default form submission behavior.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_17",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form @submit.prevent=\"onSubmit\">...</form>"
      }
    ],
    "relevance": 0.765,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Expressions in Vue Templates",
    "codeDescription": "This snippet demonstrates the usage of JavaScript expressions within Vue templates. It showcases basic arithmetic operations, ternary operators, string manipulation, and template literals. Expressions are evaluated in the context of the component instance, allowing dynamic rendering of data.",
    "codeLanguage": "vue-html",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_9",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Providing with Symbol Key (Options API)",
    "codeDescription": "This snippet demonstrates providing data using a Symbol injection key within the Options API.  It defines the provide option as a function that returns an object, using the Symbol key as a property name.  This ensures type safety and avoids naming conflicts.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_21",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in provider component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  provide() {\n    return {\n      [myInjectionKey]: {\n        /* data to provide */\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async setup() Hook",
    "codeDescription": "This JavaScript snippet demonstrates how to define an async setup() hook in a Vue.js component. The component fetches data asynchronously and returns it to be used in the template.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_0",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  async setup() {\n    const res = await fetch(...)\n    const posts = await res.json()\n    return {\n      posts\n    }\n  }\n}"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Dynamic Style Binding (Vue)",
    "codeDescription": "This Vue HTML snippet uses event binding (@mousemove) to call the `onMousemove` method and updates the background color of the div based on the `x` value, creating a state-driven animation effect.",
    "codeLanguage": "vue-html",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_6",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div\n  @mousemove=\"onMousemove\"\n  :style=\"{ backgroundColor: `hsl(${x}, 80%, 50%)` }\"\n  class=\"movearea\"\n>\n  <p>Move your mouse across this div...</p>\n  <p>x: {{ x }}</p>\n</div>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Applying Custom Directives - JavaScript",
    "codeDescription": "This code demonstrates how to apply custom directives to a vnode using the `withDirectives` helper function and the `h()` function. It showcases creating a custom directive and applying it with arguments and modifiers.",
    "codeLanguage": "JavaScript",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_35",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, withDirectives } from 'vue'\n\n// a custom directive\nconst pin = {\n  mounted() { /* ... */ },\n  updated() { /* ... */ }\n}\n\n// <div v-pin:top.animate=\"200\"></div>\nconst vnode = withDirectives(h('div'), [\n  [pin, 200, 'top', { animate: true }]\n])"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing unmounted Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `unmounted` lifecycle hook, which is called after a Vue.js component has been unmounted. Use this hook to clean up manually created side effects such as timers, DOM event listeners, or server connections. This hook is not called during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_7",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  unmounted?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Ref on Component (Options API)",
    "codeDescription": "Illustrates how to use `ref` on a child component using the Options API. In the `mounted` hook, `this.$refs.child` is used to access the child component instance.",
    "codeLanguage": "vue",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_8",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport Child from './Child.vue'\n\nexport default {\n  components: {\n    Child\n  },\n  mounted() {\n    // this.$refs.child will hold an instance of <Child />\n  }\n}\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed Property Stability Example in Vue.js",
    "codeDescription": "Demonstrates how a computed property in Vue.js 3.4+ triggers effects only when its computed value changes. The example uses a ref to track a count and a computed property to determine if the count is even.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_4",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Data Example - Composition API - Javascript",
    "codeDescription": "Illustrates a data structure using ref representing a list of todos, used to exemplify the importance of using keys in v-for directives. This snippet is provided for context in Composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_7",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "const todos = ref([\n  {\n    id: 1,\n    text: 'Learn to use v-for'\n  },\n  {\n    id: 2,\n    text: 'Learn to use key'\n  }\n])"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use detailed prop definitions - Good Example - Javascript - Composition API",
    "codeDescription": "Demonstrates a good practice of defining props with detailed configurations using the Composition API. It includes type validation and a custom validator to ensure prop values are correct.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_5",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps({\n  status: String\n})"
      },
      {
        "language": "javascript",
        "code": "// Even better!\n\nconst props = defineProps({\n  status: {\n    type: String,\n    required: true,\n\n    validator: (value) => {\n      return ['syncing', 'synced', 'version-conflict', 'error'].includes(\n        value\n      )\n    }\n  }\n})"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type signature for provide() in TypeScript",
    "codeDescription": "Shows the TypeScript type signature for the `provide()` function in Vue.js Composition API. It takes a key (string or InjectionKey<T>) and a value of type T as arguments and returns void.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#_snippet_2",
    "pageTitle": "Vue.js Composition API: Dependency Injection",
    "codeList": [
      {
        "language": "typescript",
        "code": "function provide<T>(key: InjectionKey<T> | string, value: T): void"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing $ref macro from vue/macros",
    "codeDescription": "This snippet shows how to explicitly import the `$ref` macro from the `vue/macros` module. This is optional, as the macros are globally available when Reactivity Transform is enabled. However, explicit import provides better code clarity.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_2",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { $ref } from 'vue/macros'\n\nlet count = $ref(0)"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Multiple Application Instances in JavaScript",
    "codeDescription": "This code shows how to create and mount multiple Vue application instances on the same page. Each instance is created using `createApp` and mounted to a different container element, allowing them to operate independently.",
    "codeLanguage": "JavaScript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_8",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using v-else Directive with v-if in Vue.js",
    "codeDescription": "This snippet illustrates the usage of the `v-else` directive in conjunction with `v-if` in Vue.js for conditional rendering.  The `v-else` block is rendered if the `v-if` condition is falsy. The previous sibling element must have a `v-if` or `v-else-if` directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_2",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-if=\"Math.random() > 0.5\">\n  Now you see me\n</div>\n<div v-else>\n  Now you don't\n</div>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Fallback Content for a Slot",
    "codeDescription": "This code snippet demonstrates how to define fallback content for a slot. If the parent component does not provide any slot content, the fallback content within the `<slot>` element will be displayed.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_4",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<slot>Fallback content</slot>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Compiled output of $() destructuring",
    "codeDescription": "This snippet illustrates the compiled output of the previous JavaScript code using the `$()` macro for destructuring.  `toRef` is used to convert the properties from the `useMouse()` return object into refs.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_4",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { toRef } from 'vue'\nimport { useMouse } from '@vueuse/core'\n\nconst __temp = useMouse(),\n  x = toRef(__temp, 'x'),\n  y = toRef(__temp, 'y')\n\nconsole.log(x.value, y.value)"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring webpack with vue-loader in JavaScript",
    "codeDescription": "This code snippet demonstrates how to configure webpack to use vue-loader for processing `.vue` files. It includes enabling the `reactivityTransform` option.  Requires `vue-loader@>=17.0.0`. It should be placed inside `webpack.config.js` file.",
    "codeLanguage": "JavaScript",
    "codeTokens": 123,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_17",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          reactivityTransform: true\n        }\n      }\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Destructuring Scoped Slot Props (Vue)",
    "codeDescription": "This example demonstrates how to use destructuring in `v-slot` to directly access specific props passed from the child component to the scoped slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_20",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-slot=\"{ text, count }\">\n  {{ text }} {{ count }}\n</MyComponent>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injection Default Value (Composition API)",
    "codeDescription": "This shows how to provide a default value for an injected property using Vue.js Composition API.  If the injection key is not provided in the parent chain, the default value will be used.  The second argument to `inject` is the default value.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_11",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "// `value` will be \"default value\"\n// if no data matching \"message\" was provided\nconst value = inject('message', 'default value')"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Import onMounted and Handle Hash Redirects Vue",
    "codeDescription": "This script imports the `onMounted` function from Vue and checks if the code is running in a browser environment. If so, it checks the URL hash and redirects to a different page if the hash matches certain outdated values related to v-model usage. This ensures that users with old links are directed to the correct content.",
    "codeLanguage": "Vue",
    "codeTokens": 197,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#_snippet_0",
    "pageTitle": "Vue.js Component Events",
    "codeList": [
      {
        "language": "Vue",
        "code": "<script setup>\nimport { onMounted } from 'vue'\n\nif (typeof window !== 'undefined') {\n  const hash = window.location.hash\n\n  // The docs for v-model used to be part of this page. Attempt to redirect outdated links.\n  if ([\n    '#usage-with-v-model',\n    '#v-model-arguments',\n    '#multiple-v-model-bindings',\n    '#handling-v-model-modifiers'\n  ].includes(hash)) {\n    onMounted(() => {\n      window.location = './v-model.html' + hash\n    })\n  }\n}\n</script>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Scoped Slots in FancyList Component",
    "codeDescription": "This code snippet shows how the `FancyList` component renders the scoped slot multiple times for each item in the list. It uses `v-for` to iterate over the `items` array and passes the current item data as slot props to the named slot 'item' using `v-bind`.",
    "codeLanguage": "vue-html",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_27",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"item in items\">\n    <slot name=\"item\" v-bind=\"item\"></slot>\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.76,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-for with 'of' Delimiter in Vue Template",
    "codeDescription": "This code snippet demonstrates using `of` as the delimiter in the `v-for` directive, providing a syntax closer to JavaScript iterators.",
    "codeLanguage": "html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_9",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<div v-for=\"item of items\"></div>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Vue Application (Imported Component)",
    "codeDescription": "Illustrates creating a Vue application with an imported root component using createApp.  It imports both createApp from 'vue' and a component named 'App' from './App.vue'.  The 'App' component is then passed as the first argument to createApp, creating the application instance.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_1",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Apply CSS Class based on Data Binding (Vue)",
    "codeDescription": "This Vue HTML snippet applies the 'shake' CSS class based on the `disabled` data property. When `disabled` is true, the `shake` class is added to the div, triggering the CSS animation.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_2",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"{ shake: disabled }\">\n  <button @click=\"warnDisabled\">Click me</button>\n  <span v-if=\"disabled\">This feature is disabled!</span>\n</div>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Functional Component Definition - Options API - JavaScript",
    "codeDescription": "This code shows how to define a functional component, where the first argument will be `props` and the second argument is the `context` containing attrs, emit, and slots.",
    "codeLanguage": "JavaScript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_40",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "function MyComponent(props, context) {\n  // ...\n}"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Single-File Component Structure - Vue HTML",
    "codeDescription": "Demonstrates the recommended structure for a Vue.js single-file component: `<script>`, `<template>`, then `<style>`. This ensures consistency and readability.",
    "codeLanguage": "vue-html",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_5",
    "pageTitle": "Vue.js Style Guide - Priority C Rules: Recommended",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>"
      },
      {
        "language": "vue-html",
        "code": "<!-- ComponentA.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-if Equivalent Render Function - JavaScript (Options API)",
    "codeDescription": "Shows the equivalent of the `v-if` directive using a render function with Options API. Uses a ternary operator to conditionally render different vnodes.",
    "codeLanguage": "js",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_6",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "h('div', [this.ok ? h('div', 'yes') : h('span', 'no')])"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Definition of getCurrentScope() in TypeScript",
    "codeDescription": "Defines the TypeScript type signature for the `getCurrentScope()` function. It returns the current active EffectScope or undefined if there is none.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_12",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function getCurrentScope(): EffectScope | undefined"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Event Handlers in Vue",
    "codeDescription": "This example illustrates typing event handlers in Vue components. Without type annotation, the `event` argument implicitly has a type of `any`. It's recommended to explicitly annotate the event handler's argument for type safety and to avoid potential TS errors when `strict` or `noImplicitAny` are enabled.",
    "codeLanguage": "vue",
    "codeTokens": 133,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_23",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nfunction handleChange(event) {\n  // `event` implicitly has `any` type\n  console.log(event.target.value)\n}\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Two-Way Data Binding with v-model in Vue.js",
    "codeDescription": "This snippet demonstrates how to create a two-way data binding on an input element using the `v-model` directive in Vue.js. `v-model` simplifies the process by automatically synchronizing the input's value with the bound state, eliminating the need for an explicit event handler.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#_snippet_3",
    "pageTitle": "Vue.js Form Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model=\"text\">"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Injecting Plugin Options (Options API) - Vue.js",
    "codeDescription": "Shows how to inject the provided i18n options into a component using the Options API's `inject` property. It specifies 'i18n' in the `inject` array, making the injected options available as `this.i18n` within the component instance, allowing access to the translation data.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#_snippet_8",
    "pageTitle": "Vue.js Plugins Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['i18n'],\n  created() {\n    console.log(this.i18n.greetings.hello)\n  }\n}"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Slot Content in Parent Component (SFC)",
    "codeDescription": "This code snippet demonstrates how to pass slot content from a parent component to a child component using Vue.js single-file components (SFC). The content between the opening and closing tags of the child component will be rendered in the child's slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#_snippet_0",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ChildComp>\n  This is some slot content!\n</ChildComp>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Boolean Attribute Binding with v-bind in Vue",
    "codeDescription": "This code snippet demonstrates how to bind boolean attributes using `v-bind` in Vue. The `disabled` attribute of the `<button>` element is bound to the `isButtonDisabled` property. The attribute will be included if `isButtonDisabled` is truthy; otherwise, it will be omitted. This offers dynamic control over boolean attributes based on component data.",
    "codeLanguage": "vue-html",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_5",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button :disabled=\"isButtonDisabled\">Button</button>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Directive Usage with v-if in Vue",
    "codeDescription": "This code demonstrates the usage of the `v-if` directive in Vue.  The `<p>` element will be rendered or removed from the DOM based on the truthiness of the `seen` property.  This provides a way to conditionally render elements based on component data.",
    "codeLanguage": "vue-html",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_10",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p v-if=\"seen\">Now you see me</p>"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Object for Dynamic Attribute Binding (Composition API)",
    "codeDescription": "This JavaScript snippet defines an object, `objectOfAttrs`, intended for dynamic attribute binding in Vue's Composition API.  It contains attributes like `id`, `class`, and `style` that can be dynamically applied to an HTML element using `v-bind`. This is used in conjunction with the `v-bind` directive without an argument.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_7",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const objectOfAttrs = {\n  id: 'container',\n  class: 'wrapper',\n  style: 'background-color:green'\n}"
      }
    ],
    "relevance": 0.755,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Styling Vue Components with Scoped CSS - Good Example",
    "codeDescription": "This code demonstrates the recommended approach of using class selectors within a `<style scoped>` block in a Vue component. This is more performant because Vue only needs to add attributes to elements with the specified class, instead of every element.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#_snippet_1",
    "pageTitle": "Vue.js Priority D Rules: Use with Caution",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n\n<style scoped>\n.btn-close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Component with TSX and Generics",
    "codeDescription": "This code snippet shows how to define a Vue component using `defineComponent` with TypeScript, TSX, and generics.  It defines a generic type `T` for the `msg` and `list` props. The component utilizes the Composition API and returns a render function using JSX.  Manual runtime props declaration is needed.",
    "codeLanguage": "typescript",
    "codeTokens": 184,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_4",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "typescript",
        "code": "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Passing Props to a Scoped Slot (Vue)",
    "codeDescription": "This example shows how to pass data from a child component to a slot using attributes on the `<slot>` element. These attributes become available as props within the slot's scope in the parent component.",
    "codeLanguage": "vue-html",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_17",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- <MyComponent> template -->\n<div>\n  <slot :text=\"greetingMessage\" :count=\"1\"></slot>\n</div>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Piping Vue App to Node.js Writable",
    "codeDescription": "This snippet showcases piping a Vue application's server-side rendered output directly to a Node.js Writable stream (e.g., an HTTP response). It uses `pipeToNodeWritable` from `vue/server-renderer`. `app` should be a Vue application instance, and `res` a Node.js Writable stream.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#_snippet_3",
    "pageTitle": "Vue.js Server-Side Rendering API",
    "codeList": [
      {
        "language": "javascript",
        "code": "// inside a Node.js http handler\npipeToNodeWritable(app, {}, res)"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Side Effect Cleanup with Callback Argument (Composition API) - JavaScript",
    "codeDescription": "This example demonstrates passing the cleanup function as the 3rd argument in `watch` and as the 1st argument in `watchEffect`.  This is an alternative approach compatible with older versions of Vue (before 3.5).",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_16",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(id, (newId, oldId, onCleanup) => {\n  // ...\n  onCleanup(() => {\n    // cleanup logic\n  })\n})\n\nwatchEffect((onCleanup) => {\n  // ...\n  onCleanup(() => {\n    // cleanup logic\n  })\n})"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Nested Suspense Component Usage",
    "codeDescription": "This HTML snippet demonstrates how to use nested `<Suspense>` components in Vue.js. It shows a scenario where an inner `<Suspense>` is used to handle async components nested within another async component.",
    "codeLanguage": "vue-html",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_4",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <component :is=\"DynamicAsyncInner\" />\n  </component>\n</Suspense>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emits Option Array Syntax Example JavaScript",
    "codeDescription": "Demonstrates how to use the `emits` option in Vue.js component with array syntax to declare custom events.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#_snippet_10",
    "pageTitle": "Vue.js Component Options: State, Props, Computed, and Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  emits: ['check'],\n  created() {\n    this.$emit('check')\n  }\n}"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Custom Warning Handler in Vue.js",
    "codeDescription": "This snippet shows how to assign a custom handler for runtime warnings from Vue. The handler receives the warning message, the source component instance, and a component trace string. It's useful for filtering out specific warnings during debug sessions in development mode.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_16",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.warnHandler = (msg, instance, trace) => {\n  // `trace` is the component hierarchy trace\n}"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Object Literals Directive Usage HTML",
    "codeDescription": "Illustrates how to pass an object literal as the value to a custom directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_14",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Form with Visually Hidden Label",
    "codeDescription": "This Vue.js code shows how to visually hide a label while maintaining accessibility using CSS classes.  This is appropriate when the input's purpose is clear from the surrounding context, like a search button.",
    "codeLanguage": "vue-html",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_14",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form role=\"search\">\n  <label for=\"search\" class=\"hidden-visually\">Search: </label>\n  <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\n  <button type=\"submit\">Search</button>\n</form>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Fetching Latest Vue Version with Vue and JavaScript",
    "codeDescription": "Fetches the latest Vue version from the GitHub API and updates a reactive reference.  It uses the Vue Composition API's `ref` and `onMounted` functions. It fetches data from the GitHub API, parses the JSON response, and assigns the version name to the `version` ref.",
    "codeLanguage": "vue",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/about/releases.md#_snippet_0",
    "pageTitle": "Vue Releases and Versioning",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst version = ref()\n\nonMounted(async () => {\n  const res = await fetch('https://api.github.com/repos/vuejs/core/releases/latest')\n  version.value = (await res.json()).name\n})\n</script>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Updating List using push() - Options API",
    "codeDescription": "This JavaScript code demonstrates how to update a list in Vue.js Options API by using the `push()` method to add a new item (`newTodo`) to the `todos` array.  `this.todos` assumes that `todos` is defined in the `data` property of the Vue component.",
    "codeLanguage": "js",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#_snippet_2",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "js",
        "code": "this.todos.push(newTodo)"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Async Component with Custom Hydration Strategy",
    "codeDescription": "This snippet demonstrates how to define and use a custom hydration strategy for an async component, providing fine-grained control over the hydration process.",
    "codeLanguage": "typescript",
    "codeTokens": 187,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#_snippet_10",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  // forEachElement is a helper to iterate through all the root elements\n  // in the component's non-hydrated DOM, since the root can be a fragment\n  // instead of a single element\n  forEachElement(el => {\n    // ...\n  })\n  // call `hydrate` when ready\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Dynamic Text in Vue.js Template",
    "codeDescription": "This snippet demonstrates how to render dynamic text in a Vue.js template using mustache syntax. It displays the value of the `message` property from the component's data option.",
    "codeLanguage": "vue-html",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_7",
    "pageTitle": "Vue.js Declarative Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>{{ message }}</h1>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Creating Template Refs - Composition API (pre 3.5) - JavaScript",
    "codeDescription": "This code snippet shows how to create a template ref using `ref()` in the Composition API, before Vue 3.5. The ref object itself is passed as a prop to the vnode.",
    "codeLanguage": "JavaScript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_37",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, ref } from 'vue'\n\nexport default {\n  setup() {\n    const divEl = ref()\n\n    // <div ref=\"divEl\">\n    return () => h('div', { ref: divEl })\n  }\n}"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Avoid v-if with v-for - Good Example 2 - HTML",
    "codeDescription": "Demonstrates an alternative correct way of using a `template` tag with `v-for` to wrap the element with the conditional rendering using `v-if`. This prevents the error of evaluating `v-if` before `v-for`.",
    "codeLanguage": "vue-html",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_14",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <template v-for=\"user in users\" :key=\"user.id\">\n    <li v-if=\"user.isActive\">\n      {{ user.name }}\n    </li>\n  </template>\n</ul>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Composable with Global and Local State - JavaScript",
    "codeDescription": "This JavaScript module demonstrates a composable function (`useCount`) that returns both global and local reactive state using Vue's `ref` API.  `globalCount` is shared across all components using the composable, while `localCount` is unique to each component instance.",
    "codeLanguage": "JavaScript",
    "codeTokens": 134,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_10",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Shorthand Syntax for v-on Directive in Vue",
    "codeDescription": "This code shows the shorthand syntax for the `v-on` directive using the `@` symbol. It achieves the same functionality as `v-on:click`, binding the `increment` method to the button's click event.",
    "codeLanguage": "vue-html",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#_snippet_1",
    "pageTitle": "Vue.js Event Listener Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"increment\">{{ count }}</button>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining Fallback Content for Slots Vue.js",
    "codeDescription": "This code snippet shows how to define fallback content for a slot in the `<SubmitButton>` component. If the parent component doesn't provide any slot content, the default content \"Submit\" will be rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_5",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button type=\"submit\">\n  <slot>\n    Submit <!-- fallback content -->\n  </slot>\n</button>"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props in Options API in Vue.js",
    "codeDescription": "Declares a prop named 'msg' of type String in a Vue.js component using the Options API. The `props` option is an object where each key represents a prop name and the value specifies its type. The prop can then be accessed via `this.msg` within the component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_1",
    "pageTitle": "Vue.js Props: Passing Data from Parent to Child Components",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in child component\nexport default {\n  props: {\n    msg: String\n  },\n  setup(props) {\n    // access props.msg\n  }\n}"
      }
    ],
    "relevance": 0.75,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering a Vue Component",
    "codeDescription": "This snippet renders the PartnerAll component within the template. This will instantiate and display the PartnerAll component in the web page.",
    "codeLanguage": "vue",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_1",
    "pageTitle": "Vue.js Component Integration",
    "codeList": [
      {
        "language": "vue",
        "code": "<PartnerAll />"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Import Statements in Vue Script Setup",
    "codeDescription": "This example shows how to use import statements inside `<script setup>`. You can use aliases defined in your build tool configuration.",
    "codeLanguage": "vue",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_28",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nimport { componentA } from './Components'\nimport { componentB } from '@/Components'\nimport { componentC } from '~/Components'\n</script>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Template with Tracked and Untracked Elements - HTML",
    "codeDescription": "This HTML snippet illustrates which elements within a Vue template are tracked for dynamic updates based on their attributes and content. Elements with dynamic bindings (like `:id` and `{{ bar }}`) are tracked, while static elements are not. The outermost `div` represents the root block.",
    "codeLanguage": "HTML",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_6",
    "pageTitle": "Vue Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div> <!-- root block -->\n  <div>...</div>         <!-- not tracked -->\n  <div :id=\"id\"></div>   <!-- tracked -->\n  <div>                  <!-- not tracked -->\n    <div>{{ bar }}</div> <!-- tracked -->\n  </div>\n</div>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Vue with ES Module CDN (Options API)",
    "codeDescription": "This snippet shows how to initialize a Vue application using the ES module build from a CDN. It defines a simple component with data binding and mounts it to the DOM element with the ID 'app'. Requires a browser that supports ES modules.",
    "codeLanguage": "HTML",
    "codeTokens": 133,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_15",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "JavaScript Analogy for Named Slots",
    "codeDescription": "This JavaScript code provides an analogy to explain how named slots work. It simulates passing slot fragments as properties to a `BaseLayout` function, which then renders them in different places within the layout.",
    "codeLanguage": "js",
    "codeTokens": 146,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_14",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "js",
        "code": "// passing multiple slot fragments with different names\nBaseLayout({\n  header: `...`,\n  default: `...`,\n  footer: `...`\n})\n\n// <BaseLayout> renders them in different places\nfunction BaseLayout(slots) {\n  return `<div class=\"container\">\n      <header>${slots.header}</header>\n      <main>${slots.default}</main>\n      <footer>>${slots.footer}</footer>\n    </div>`\n}"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Teleports SSR Context Example JavaScript",
    "codeDescription": "This JavaScript code shows how teleports are exposed under the `teleports` property of the SSR context object when using `renderToString`.  The `ctx.teleports` object contains the teleported content, which needs to be manually injected into the final page HTML. The context is passed into `renderToString` function.",
    "codeLanguage": "JavaScript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_10",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Preserving HTML Comments in Vue.js Templates",
    "codeDescription": "This snippet shows how to set the `comments` compiler option to `true` to force Vue to preserve HTML comments even in production. By default, Vue removes comments in production. This option is used when Vue is used with other libraries that rely on HTML comments.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_20",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.compilerOptions.comments = true"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Returning Ref from Setup Function",
    "codeDescription": "Shows how to return a template ref from the `setup()` function when not using `<script setup>`. It initializes the `input` ref to `null`, and includes the `input` ref in the object returned by the `setup` function, making it accessible in the template.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#_snippet_3",
    "pageTitle": "Vue.js Template Refs",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  setup() {\n    const input = ref(null)\n    // ...\n    return {\n      input\n    }\n  }\n}"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Component by Registered Name in Vue (Options API)",
    "codeDescription": "Demonstrates rendering a dynamic component using the `is` prop of the `<component>` element. The `view` data property determines which component (Foo or Bar) is rendered based on its registered name in the components option.",
    "codeLanguage": "vue",
    "codeTokens": 128,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_1",
    "pageTitle": "Vue.js Built-in Special Elements Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n  components: { Foo, Bar },\n  data() {\n    return {\n      view: 'Foo'\n    }\n  }\n}\n</script>\n\n<template>\n  <component :is=\"view\" />\n</template>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Vue Version in JavaScript",
    "codeDescription": "This code snippet shows how to import and access the current version of Vue. It imports the `version` export from the `vue` package and logs it to the console. This can be useful for debugging or feature detection based on the Vue version.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#_snippet_0",
    "pageTitle": "Vue.js Global API: General",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { version } from 'vue'\n\nconsole.log(version)"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Checking if Object is Reactive in Vue.js (isReactive)",
    "codeDescription": "The `isReactive` function checks if a given value is a proxy created by `reactive()` or `shallowReactive()`.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#_snippet_6",
    "pageTitle": "Vue.js Reactivity API Utilities Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function isReactive(value: unknown): boolean"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering Dynamic Text in Vue.js Template",
    "codeDescription": "This snippet demonstrates how to render dynamic text in a Vue.js template using mustache syntax. It displays the value of the `message` ref and the `counter.count` property.",
    "codeLanguage": "vue-html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#_snippet_3",
    "pageTitle": "Vue.js Declarative Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>{{ message }}</h1>\n<p>Count is: {{ counter.count }}</p>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing Vue Application (Inline Component)",
    "codeDescription": "Demonstrates creating a Vue application instance with an inline root component definition using the createApp function.  It imports createApp from 'vue' and defines a basic component options object directly within the createApp call. The resulting app instance is assigned to the 'app' constant.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_0",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Multiple Teleports on the Same Target",
    "codeDescription": "This snippet shows how multiple <Teleport> components can mount their content to the same target element. The order will be a simple append, with later mounts located after earlier ones, but all within the target element.",
    "codeLanguage": "vue-html",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_5",
    "pageTitle": "Vue.js Teleport Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Teleport to=\"#modals\">\n  <div>A</div>\n</Teleport>\n<Teleport to=\"#modals\">\n  <div>B</div>\n</Teleport>"
      }
    ],
    "relevance": 0.745,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing External Files in Vue SFC",
    "codeDescription": "This snippet demonstrates how to import content from external files into Vue Single-File Components using the `src` attribute in the template, script, and style blocks. Relative paths need to start with `./`.",
    "codeLanguage": "vue",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_3",
    "pageTitle": "Vue SFC Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<template src=\"./template.html\"></template>\n<style src=\"./style.css\"></style>\n<script src=\"./script.js\"></script>"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive isActive and hasError (Composition API)",
    "codeDescription": "Defines reactive variables using Vue's Composition API to control the 'active' and 'text-danger' classes. These variables are used to dynamically update the class list of an element.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_1",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const isActive = ref(true)\nconst hasError = ref(false)"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Nested Suspense with suspensible prop",
    "codeDescription": "This HTML snippet demonstrates the use of nested `<Suspense>` components in Vue.js with the `suspensible` prop. It shows how the parent `<Suspense>` can handle async dependencies for the nested component.",
    "codeLanguage": "vue-html",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_5",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <Suspense suspensible> <!-- this -->\n      <component :is=\"DynamicAsyncInner\" />\n    </Suspense>\n  </component>\n</Suspense>"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Slots Type Definition - Vue.js",
    "codeDescription": "Explains the structure for defining type-safe slots in Vue.js components. The `slots` option is used to assist type inference in render functions when working with slots programmatically.  The actual types for the slots are defined using type casting along with the `SlotsType` type helper. This functionality is available in Vue 3.3 and later.",
    "codeLanguage": "typescript",
    "codeTokens": 194,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_3",
    "pageTitle": "Vue.js Component Options: Rendering",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { SlotsType } from 'vue'\n\ndefineComponent({\n  slots: Object as SlotsType<{\n    default: { foo: string; bar: number }\n    item: { data: number }\n  }>,\n  setup(props, { slots }) {\n    expectType<\n      undefined | ((scope: { foo: string; bar: number }) => any)\n    >(slots.default)\n    expectType<undefined | ((scope: { data: number }) => any)>(\n      slots.item\n    )\n  }\n})"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Prop Use in in-DOM Template (camelCase)",
    "codeDescription": "Shows bad practice of using camelCase when using props in in-DOM templates. For in-DOM templates kebab-case should be used.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_24",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "// for in-DOM templates\n<welcome-message greetingText=\"hi\"></welcome-message>"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Emitting Events in Options API setup function",
    "codeDescription": "Shows how to emit custom events using `ctx.emit` within the setup function when using the Options API.",
    "codeLanguage": "js",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#_snippet_25",
    "pageTitle": "Vue.js Component Basics",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  emits: ['enlarge-text'],\n  setup(props, ctx) {\n    ctx.emit('enlarge-text')\n  }\n}"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using onMounted in createApp (Composition API)",
    "codeDescription": "This code illustrates how to use the `onMounted` lifecycle hook within a `createApp` instance using the Composition API. It shows how to ensure code executes after the component has been fully mounted within the application.",
    "codeLanguage": "js",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#_snippet_4",
    "pageTitle": "Vue.js Lifecycle and Template Refs",
    "codeList": [
      {
        "language": "js",
        "code": "import { onMounted } from 'vue'\n\ncreateApp({\n  setup() {\n    onMounted(() => {\n      // component is now mounted.\n    })\n  }\n})"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Class Names (Composition API)",
    "codeDescription": "Defines reactive variables using Vue's Composition API to store CSS class names as strings. These variables can be used in array syntax to dynamically apply classes.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_10",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const activeClass = ref('active')\nconst errorClass = ref('text-danger')"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Complex Computed Property (composition API)",
    "codeDescription": "Shows bad practice of creating complex computed properties instead of breaking them into simpler ones using composition API.",
    "codeLanguage": "js",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_38",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "const price = computed(() => {\n  const basePrice = manufactureCost.value / (1 - profitMargin.value)\n  return basePrice - basePrice * (discountPercent.value || 0)\n})"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring Whitespace Handling in Vue.js Templates",
    "codeDescription": "This snippet illustrates setting the `whitespace` compiler option to `'preserve'` to disable whitespace condensation in templates. By default, Vue condenses whitespace for more efficient output. Setting this option to `'preserve'` will disable the removal and condensing of whitespace characters.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_18",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.compilerOptions.whitespace = 'preserve'"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inefficient List Rendering in Vue.js (Props Stability)",
    "codeDescription": "This Vue.js template snippet demonstrates an inefficient way to render a list.  Every `ListItem` updates whenever `activeId` changes, even if the `item.id` is not equal to `activeId`. This leads to unnecessary re-renders.  The list items depend on the ID and the active ID.",
    "codeLanguage": "vue-html",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#_snippet_2",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active-id=\"activeId\" />"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Debugger Event Type (TypeScript)",
    "codeDescription": "This TypeScript code defines the structure of the `DebuggerEvent` object passed to the component debugging hooks. It includes information about the reactive effect, target object, operation type (track or trigger), key, and related values.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#_snippet_11",
    "pageTitle": "Vue Reactivity in Depth",
    "codeList": [
      {
        "language": "typescript",
        "code": "type DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type:\n    | TrackOpTypes /* 'get' | 'has' | 'iterate' */\n    | TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Child Component in Template (SFC)",
    "codeDescription": "This snippet shows how to use a registered child component within the template of a parent component in a Vue.js SFC. The child component is rendered using its tag name.  It requires the child component to be previously imported and registered in the parent component.",
    "codeLanguage": "HTML",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#_snippet_2",
    "pageTitle": "Vue.js Component Usage and Registration",
    "codeList": [
      {
        "language": "HTML",
        "code": "<ChildComp />"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Reactive Style Properties (Composition API)",
    "codeDescription": "Defines reactive variables using Vue's Composition API to store style properties like 'activeColor' and 'fontSize'. These variables can be used to dynamically style an element.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_20",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const activeColor = ref('red')\nconst fontSize = ref(30)"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing NPM Dependencies in Vue SFC",
    "codeDescription": "This snippet demonstrates importing resources from npm dependencies inside a Vue Single-File Component's style block, using the `src` attribute. Note: webpack module resolution rules apply here.",
    "codeLanguage": "vue",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#_snippet_4",
    "pageTitle": "Vue SFC Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- import a file from the installed \"todomvc-app-css\" npm package -->\n<style src=\"todomvc-app-css/index.css\" />"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Component with Fallthrough Attribute Vue HTML",
    "codeDescription": "This demonstrates how a parent component uses the `<MyButton>` component and passes a `class` attribute. Since `<MyButton>` doesn't declare `class` as a prop, it is a fallthrough attribute.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_1",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyButton class=\"large\" />"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Style Object data property (Options API)",
    "codeDescription": "Defines a data property within Vue's Options API that holds an object representing inline styles. This allows for dynamic style application based on the properties within the object.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#_snippet_25",
    "pageTitle": "Vue.js Class and Style Bindings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Typing Named Functional Component Vue.js TypeScript",
    "codeDescription": "This code snippet demonstrates how to type a named functional component in Vue.js using TypeScript. It defines the props and emits for the component, along with the component's rendering logic that includes an onClick event that emits a message.",
    "codeLanguage": "TypeScript",
    "codeTokens": 193,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_42",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import type { SetupContext } from 'vue'\ntype FComponentProps = {\n  message: string\n}\n\ntype Events = {\n  sendMessage(message: string): void\n}\n\nfunction FComponent(\n  props: FComponentProps,\n  context: SetupContext<Events>\n) {\n  return (\n    <button onClick={() => context.emit('sendMessage', props.message)}>\n        {props.message} {' '}\n    </button>\n  )\n}\n\nFComponent.props = {\n  message: {\n    type: String,\n    required: true\n  }\n}\n\nFComponent.emits = {\n  sendMessage: (value: unknown) => typeof value === 'string'\n}"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendered HTML with Fallback Content Vue.js",
    "codeDescription": "This snippet shows the rendered HTML when the `<SubmitButton>` component is used without providing slot content.  The fallback content \"Submit\" is rendered within the `<button>` element.",
    "codeLanguage": "html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_7",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "html",
        "code": "<button type=\"submit\">Submit</button>"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Running a Vue Project with pnpm",
    "codeDescription": "These commands navigate to the project directory and then install dependencies and start the development server using pnpm. The template syntax `{{'<your-project-name>'}}` will need to be replaced with the actual project name.",
    "codeLanguage": "sh",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_5",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ cd {{'<your-project-name>'}}\n$ pnpm install\n$ pnpm run dev"
      }
    ],
    "relevance": 0.74,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Boolean and Number Props Casting Example",
    "codeDescription": "This shows how Vue casts props defined as Boolean or Number types when set as attributes in the custom element.  Attributes are always strings, so Vue automatically converts them to the specified type.",
    "codeLanguage": "JavaScript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_6",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "props: {\n    selected: Boolean,\n    index: Number\n  }"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "KeepAlive Include Array",
    "codeDescription": "Illustrates how to use the `include` prop with an array to specify which components should be cached by `<KeepAlive>`. The array is bound using `v-bind`.",
    "codeLanguage": "vue-html",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#_snippet_4",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Compiler Options Definition - Vue.js",
    "codeDescription": "Illustrates the structure of the `compilerOptions` object within a Vue component. These options allow for customizing the runtime template compilation behavior, like custom element handling, whitespace management, custom delimiters, and comment handling. These options are only relevant with a full build of Vue.js, which includes the template compiler.",
    "codeLanguage": "typescript",
    "codeTokens": 152,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_2",
    "pageTitle": "Vue.js Component Options: Rendering",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  compilerOptions?: {\n    isCustomElement?: (tag: string) => boolean\n    whitespace?: 'condense' | 'preserve' // default: 'condense'\n    delimiters?: [string, string] // default: ['{{', '}}']\n    comments?: boolean // default: false\n  }\n}"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Use detailed prop definitions - Good Example - Javascript - Options API",
    "codeDescription": "Demonstrates a good practice of defining props with detailed configurations in the Options API. It includes type validation and a custom validator to ensure prop values are correct.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#_snippet_3",
    "pageTitle": "Vue.js Style Guide - Priority A Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "props: {\n  status: String\n}"
      },
      {
        "language": "javascript",
        "code": "// Even better!\nprops: {\n  status: {\n    type: String,\n    required: true,\n\n    validator: value => {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].includes(value)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing a Vue Component",
    "codeDescription": "This script imports a Vue component named PartnerAll from a relative path. This allows the component to be used within the current Vue component or page.",
    "codeLanguage": "vue",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/partners/all.md#_snippet_0",
    "pageTitle": "Vue.js Component Integration",
    "codeList": [
      {
        "language": "vue",
        "code": "import PartnerAll from './components/PartnerAll.vue'"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Compiled Reactive Props Destructure JavaScript",
    "codeDescription": "Shows the compiled equivalent of the reactive props destructure example, demonstrating how the compiler transforms accesses to destructured props to `props.foo`.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_13",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})\n"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes in Options API Javascript",
    "codeDescription": "This code shows how to access fallthrough attributes in the Options API using `this.$attrs`. This property is available in the component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#_snippet_12",
    "pageTitle": "Vue.js Fallthrough Attributes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  created() {\n    console.log(this.$attrs)\n  }\n}"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Initializing renderTracked Lifecycle Hook in Vue.js",
    "codeDescription": "Defines the `renderTracked` lifecycle hook, which is called when a reactive dependency has been tracked by the component's render effect. This hook is development-mode-only and not called during server-side rendering. It provides debugging information about the reactive effect.",
    "codeLanguage": "typescript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#_snippet_9",
    "pageTitle": "Vue.js Component Lifecycle Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  renderTracked?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type: TrackOpTypes /* 'get' | 'has' | 'iterate' */\n  key: any\n}"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Client-Side Hydration (Browser)",
    "codeDescription": "This JavaScript snippet shows how to hydrate a server-rendered Vue app on the client-side. It imports `createSSRApp` from 'vue', creates a Vue app instance (identical to the server-side app), and mounts it to the DOM element with the ID 'app'. This process attaches event listeners and makes the app interactive.",
    "codeLanguage": "JavaScript",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#_snippet_2",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// this runs in the browser.\nimport { createSSRApp } from 'vue'\n\nconst app = createSSRApp({\n  // ...same app as on server\n})\n\n// mounting an SSR app on the client assumes\n// the HTML was pre-rendered and will perform\n// hydration instead of mounting new DOM nodes.\napp.mount('#app')"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-if and v-for on the Same Element (Incorrect)",
    "codeDescription": "This code snippet shows the incorrect usage of `v-if` and `v-for` on the same element.  The `v-if` condition cannot access variables from the `v-for` scope directly.",
    "codeLanguage": "html",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_17",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<!--\nThis will throw an error because property \"todo\"\nis not defined on instance.\n-->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n  {{ todo.name }}\n</li>"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing SFC in Custom Element Mode",
    "codeDescription": "This example shows how to import a Vue Single-File Component (SFC) in custom element mode by using the `.ce.vue` extension.  This inlines the component's styles and exposes them in the component's `styles` option for use with `defineCustomElement`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#_snippet_10",
    "pageTitle": "Vue and Web Components Integration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { defineCustomElement } from 'vue'\nimport Example from './Example.ce.vue'\n\nconsole.log(Example.styles) // [\"/* inlined css */\"]\n\n// convert into custom element constructor\nconst ExampleElement = defineCustomElement(Example)\n\n// register\ncustomElements.define('my-example', ExampleElement)"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Self-closing Vue Components in in-DOM templates",
    "codeDescription": "This vue-html snippet shows how to properly use self-closing tags for Vue components that have no content when using in-DOM templates.  In in-DOM templates, components should not be self-closing and require a closing tag",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_3",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- In in-DOM templates -->\n<my-component></my-component>"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Props in SFC using Composition API in Vue.js",
    "codeDescription": "Declares a prop named 'msg' of type String in a Vue.js Single File Component using the Composition API. `defineProps()` is a compile-time macro that defines the props accepted by the component. The prop can then be accessed in the template or via the object returned by `defineProps()` within the script.",
    "codeLanguage": "vue",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-12/description.md#_snippet_0",
    "pageTitle": "Vue.js Props: Passing Data from Parent to Child Components",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- ChildComp.vue -->\n<script setup>\nconst props = defineProps({\n  msg: String\n})\n</script>"
      }
    ],
    "relevance": 0.735,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Prop Declaration (camelCase Composition API)",
    "codeDescription": "Illustrates the correct usage of camelCase for prop declaration inside a Vue component's composition API. Prop names should always be camelCase when declared in JavaScript.",
    "codeLanguage": "js",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_26",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "const props = defineProps({\n  greetingText: String\n})"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Retrieving Registered Directive",
    "codeDescription": "Demonstrates how to retrieve a globally registered directive using app.directive(). It retrieves the registered directive 'myDirective' and assigns it to a constant named 'myDirective'.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#_snippet_8",
    "pageTitle": "Vue.js Application API Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// retrieve a registered directive\nconst myDirective = app.directive('myDirective')"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-model with Arguments",
    "codeDescription": "Shows how to use `v-model` with arguments on a component.",
    "codeLanguage": "vue-html",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_11",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-model:title=\"bookTitle\" />"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vite configuration for Reactivity Transform",
    "codeDescription": "This JavaScript code shows how to configure Reactivity Transform in a Vite project using `@vitejs/plugin-vue`. The `reactivityTransform` option is set to `true` within the Vue plugin options.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#_snippet_15",
    "pageTitle": "Vue Reactivity Transform",
    "codeList": [
      {
        "language": "javascript",
        "code": "// vite.config.js\nexport default {\n  plugins: [\n    vue({\n      reactivityTransform: true\n    })\n  ]\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Importing Vue SFC",
    "codeDescription": "This example shows how to import a Vue Single-File Component into another component using standard JavaScript module syntax. This requires a build setup with a compiler that can handle `.vue` files.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#_snippet_2",
    "pageTitle": "Vue Single-File Components (SFC)",
    "codeList": [
      {
        "language": "javascript",
        "code": "import MyComponent from './MyComponent.vue'\n\nexport default {\n  components: {\n    MyComponent\n  }\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Data Option Example (Options API)",
    "codeDescription": "Illustrates how to define the data option containing post object with 'id' and 'title' properties.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_10",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      post: {\n        id: 1,\n        title: 'My Journey with Vue'\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Iterating Through Object Properties with v-for in Vue",
    "codeDescription": "This demonstrates iterating through the properties (values) of an object using `v-for`. The `value` alias represents the value of each property.",
    "codeLanguage": "html",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_12",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "html",
        "code": "<ul>\n  <li v-for=\"value in myObject\">\n    {{ value }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Computed property (Composition API, SFC)",
    "codeDescription": "This JavaScript snippet demonstrates how to create a computed ref `filteredTodos` within a Vue.js component using the Composition API and single-file component (SFC) syntax. It uses `ref` to create reactive variables `hideCompleted` and `todos`, and `computed` to create `filteredTodos` which depends on these reactive values.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#_snippet_3",
    "pageTitle": "Vue.js Computed Properties in Todo List",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, computed } from 'vue'\n\nconst hideCompleted = ref(false)\nconst todos = ref([\n  /* ... */\n])\n\nconst filteredTodos = computed(() => {\n  // return filtered todos based on\n  // `todos.value` & `hideCompleted.value`\n})"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Provide value using Options API in Vue.js",
    "codeDescription": "This code snippet demonstrates how to provide a value using the `provide` option in Vue.js' Options API. The `provide` option is an object where keys are injection keys, and values are the values to be provided.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#_snippet_3",
    "pageTitle": "Vue.js Provide / Inject",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  provide: {\n    message: 'hello!'\n  }\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Type Inference with reactive() in Vue",
    "codeDescription": "This code demonstrates how `reactive()` implicitly infers the type from its argument. In this example, `book` is inferred to be of type `{ title: string }`.",
    "codeLanguage": "typescript",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#_snippet_19",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Suspense Component Usage",
    "codeDescription": "This HTML snippet demonstrates the basic usage of the `<Suspense>` component in Vue.js. It defines a default slot containing a component with potentially async dependencies and a fallback slot for the loading state.",
    "codeLanguage": "vue-html",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#_snippet_2",
    "pageTitle": "Vue.js Suspense Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Suspense>\n  <!-- component with nested async dependencies -->\n  <Dashboard />\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Defining a Basic Vue Component in JavaScript",
    "codeDescription": "This code snippet demonstrates the creation of a minimal Vue component using JavaScript. The component object includes a render function that returns a simple \"Hello world!\" string. This is a valid Vue component that can be used within a Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/glossary/index.md#_snippet_0",
    "pageTitle": "Vue.js Glossary",
    "codeList": [
      {
        "language": "javascript",
        "code": "const HelloWorldComponent = {\n  render() {\n    return 'Hello world!'\n  }\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring Compile-Time Flags in Webpack",
    "codeDescription": "This code snippet demonstrates how to configure compile-time flags in a Webpack project using the `DefinePlugin`. It sets the values for `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flags. This allows for fine-grained control over which features are included in the final bundle.",
    "codeLanguage": "JavaScript",
    "codeTokens": 160,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_2",
    "pageTitle": "Vue.js Compile-Time Flags Configuration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// webpack.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Parent Scope and Index in v-for (Composition API)",
    "codeDescription": "This code snippet initializes a parent message and an array of items using the Composition API, preparing them for rendering within a v-for loop that accesses both the item and its index.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#_snippet_3",
    "pageTitle": "Vue.js List Rendering with v-for",
    "codeList": [
      {
        "language": "javascript",
        "code": "const parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Component Options with defineOptions in Vue",
    "codeDescription": "This code snippet shows how to declare component options directly inside `<script setup>` using the `defineOptions` macro. This eliminates the need for a separate `<script>` block for defining options like `inheritAttrs` or custom options.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#_snippet_23",
    "pageTitle": "Vue.js SFC Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineOptions({\n  inheritAttrs: false,\n  customOptions: {\n    /* ... */\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Inject Option: Factory Function for Defaults (Vue.js)",
    "codeDescription": "Illustrates the usage of a factory function for non-primitive default values when using the `inject` option in Vue.js. This avoids value sharing between multiple component instances, which is important for objects and arrays.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#_snippet_7",
    "pageTitle": "Vue.js Component Options: Composition",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Child = {\n  inject: {\n    foo: {\n      from: 'bar',\n      default: () => [1, 2, 3]\n    }\n  }\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Props Definition without Empty Lines - Composition API - JavaScript",
    "codeDescription": "Demonstrates how to define component props using the Composition API in Vue.js without spaces. This example uses `defineProps` and `computed` to define properties and computed values.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_2",
    "pageTitle": "Vue.js Style Guide - Priority C Rules: Recommended",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n})\nconst formattedValue = computed(() => {\n  // ...\n})\nconst inputClasses = computed(() => {\n  // ...\n})"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Input Binding for Number Animation (Vue, Options API)",
    "codeDescription": "This Vue HTML snippet includes an input field bound to the `number` data property and displays the animated number (`tweened`) formatted to zero decimal places.  It utilizes `v-model.number` to ensure input is treated as a number, compatible with the Options API example.",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/animation.md#_snippet_11",
    "pageTitle": "Vue.js Animation Techniques",
    "codeList": [
      {
        "language": "vue-html",
        "code": "Type a number: <input v-model.number=\"number\" />\n<p>{{ tweened.toFixed(0) }}</p>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Splitting Modules - Component Definition (Options API)",
    "codeDescription": "This snippet defines a Vue component in a separate JavaScript file using the Options API. It exports the component's options object, including data and template. Requires the main HTML file to import this component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#_snippet_20",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// my-component.js\nexport default {\n  data() {\n    return { count: 0 }\n  },\n  template: `<div>Count is: {{ count }}</div>`\n}"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js Dynamic v-on Event Handler",
    "codeDescription": "Illustrates how to bind a handler to a dynamic event name using v-on. The event name is determined by the value of `eventName`. A shorthand is also demonstrated. Requires a Vue component instance with a data property `eventName` and a method `doSomething`.",
    "codeLanguage": "vue-html",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#_snippet_14",
    "pageTitle": "Vue.js Template Syntax Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a v-on:[eventName]=\"doSomething\"> ... </a>\n\n<!-- shorthand -->\n<a @[eventName]=\"doSomething\"> ... </a>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Calling Store Method from Template - Vue",
    "codeDescription": "This Vue template demonstrates calling the `increment` method on the shared store when a button is clicked.  This approach centralizes the mutation logic within the store, enhancing maintainability.",
    "codeLanguage": "Vue",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#_snippet_9",
    "pageTitle": "Vue.js State Management",
    "codeList": [
      {
        "language": "Vue",
        "code": "<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Function Ref in Vue",
    "codeDescription": "This code shows an alternative usage of the `ref` attribute, accepting a function value. This function provides full control over where to store the reference to the element.",
    "codeLanguage": "Vue",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#_snippet_4",
    "pageTitle": "Vue.js Built-in Special Attributes Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ChildComponent :ref=\"(el) => child = el\" />"
      }
    ],
    "relevance": 0.73,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue v-on Directive: Longhand (Preferred)",
    "codeDescription": "Demonstrates the alternative preferred practice of using only the longhand notation (`v-on:`) for the `v-on` directive. Consistency is maintained, leading to improved readability.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_51",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  v-on:input=\"onInput\"\n  v-on:focus=\"onFocus\"\n>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "HTML Container for Vue Application",
    "codeDescription": "This HTML snippet defines a container element with the ID 'app'. The Vue application will be mounted to this element, and the application's root component will be rendered inside it.",
    "codeLanguage": "HTML",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#_snippet_3",
    "pageTitle": "Creating Vue Applications",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div id=\"app\"></div>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Shallow Readonly Usage",
    "codeDescription": "Illustrates how to use `shallowReadonly` to create an object where only root-level properties are readonly, not nested objects.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_5",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// mutating state's own properties will fail\nstate.foo++\n\n// ...but works on nested objects\nisReadonly(state.nested) // false\n\n// works\nstate.nested.bar++"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "CSS for Visually Hiding Elements",
    "codeDescription": "This CSS snippet provides a class that visually hides elements while keeping them accessible to assistive technologies. This technique is useful for labels or other content that is not needed visually but provides context for screen readers.",
    "codeLanguage": "css",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_15",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "css",
        "code": ".hidden-visually {\n  position: absolute;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0;\n  padding: 0;\n  height: 1px;\n  width: 1px;\n  clip: rect(0 0 0 0);\n  clip-path: inset(100%);\n}"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue v-slot Directive: Mixed Shorthand (Discouraged)",
    "codeDescription": "Demonstrates the discouraged practice of mixing shorthand and longhand notations for the `v-slot` directive. Consistency is crucial for readability and maintainability.",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_47",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template #footer>\n  <p>Here's some contact info</p>\n</template>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "HTML Content Escaping in Vue.js Templates",
    "codeDescription": "This example showcases how Vue automatically escapes HTML content within templates to prevent script injection. The user-provided string containing a script tag is converted into its HTML entity equivalents, rendering it harmless.",
    "codeLanguage": "HTML",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#_snippet_1",
    "pageTitle": "Vue.js Security Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<h1>{{ userProvidedString }}</h1>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Run the development server",
    "codeDescription": "This command starts the local development server for the VueJS documentation website, allowing developers to preview changes in real-time. It requires dependencies to be installed beforehand.",
    "codeLanguage": "bash",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/README.md#_snippet_1",
    "pageTitle": "VueJS Documentation Website Setup",
    "codeList": [
      {
        "language": "bash",
        "code": "pnpm run dev"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configuring Compile-Time Flags in Vue CLI",
    "codeDescription": "This code snippet shows how to configure compile-time flags in a Vue CLI project using `chainWebpack`. It sets the values for `__VUE_OPTIONS_API__`, `__VUE_PROD_DEVTOOLS__`, and `__VUE_PROD_HYDRATION_MISMATCH_DETAILS__` flags. This allows customizing the features included in the build.",
    "codeLanguage": "JavaScript",
    "codeTokens": 175,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#_snippet_1",
    "pageTitle": "Vue.js Compile-Time Flags Configuration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.plugin('define').tap((definitions) => {\n      Object.assign(definitions[0], {\n        __VUE_OPTIONS_API__: 'true',\n        __VUE_PROD_DEVTOOLS__: 'false',\n        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n      })\n      return definitions\n    })\n  }\n}"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Functional Component Props and Emits - JavaScript",
    "codeDescription": "This code demonstrates how to define `props` and `emits` for a functional component by adding them as properties to the function.  `inheritAttrs` can be set to `false` to disable attribute inheritance.",
    "codeLanguage": "JavaScript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_41",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "MyComponent.props = ['value']\nMyComponent.emits = ['click']\nMyComponent.inheritAttrs = false"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Import and Render Vue Component",
    "codeDescription": "This snippet imports the 'TeamPage.vue' component and renders it within the application. The component is used to display the team page content. It relies on the 'TeamPage.vue' file existing in the './team' directory.",
    "codeLanguage": "vue",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/about/team.md#_snippet_0",
    "pageTitle": "Vue.js Meet the Team Page",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport TeamPage from './team/TeamPage.vue'\n</script>\n\n<TeamPage />"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Mutating Prop (Options API)",
    "codeDescription": "This snippet demonstrates the incorrect way to attempt mutating a prop directly within a component using Options API. The attempt to reassign the value of the prop `foo` within the `created` lifecycle hook will trigger a warning from Vue.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#_snippet_13",
    "pageTitle": "Vue.js Component Props Declaration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['foo'],\n  created() {\n    // ❌ warning, props are readonly!\n    this.foo = 'bar'\n  }\n}"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "HTML Attribute Value: No Quotes (Discouraged)",
    "codeDescription": "Demonstrates the discouraged practice of omitting quotes for HTML attribute values, which can lead to reduced readability and potential issues with spaces in attribute values. This example uses the `type` attribute of an input element without quotes.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_41",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input type=text>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Eager Watcher in Options API (Vue.js)",
    "codeDescription": "This code shows how to create an eager watcher in Vue.js using the Options API. The `immediate: true` option ensures that the callback is executed immediately when the component is created.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_8",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // ...\n  watch: {\n    question: {\n      handler(newQuestion) {\n        // this will be run immediately on component creation.\n      },\n      // force eager callback execution\n      immediate: true\n    }\n  }\n  // ...\n}"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scoped CSS Compiled - Vue",
    "codeDescription": "Shows the compiled output of the scoped CSS example, demonstrating how PostCSS adds a unique `data-v` attribute to both the CSS selectors and the HTML elements, ensuring style encapsulation.",
    "codeLanguage": "vue",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#_snippet_1",
    "pageTitle": "Vue.js SFC CSS Features",
    "codeList": [
      {
        "language": "vue",
        "code": "<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>"
      }
    ],
    "relevance": 0.725,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendering HTML Elements Dynamically in Vue",
    "codeDescription": "Demonstrates rendering different HTML elements dynamically using the `is` prop of the `<component>` element. The example switches between an `<a>` tag (if `href` is truthy) and a `<span>` tag.",
    "codeLanguage": "vue-html",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-elements.md#_snippet_3",
    "pageTitle": "Vue.js Built-in Special Elements Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<component :is=\"href ? 'a' : 'span'\"></component>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Native Input v-model Expanded",
    "codeDescription": "Demonstrates the expanded form of v-model on a native input, showing the explicit value binding and input event handling.",
    "codeLanguage": "vue-html",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#_snippet_7",
    "pageTitle": "Component v-model in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  :value=\"searchText\"\n  @input=\"searchText = $event.target.value\"\n/>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Deferred Teleport Usage",
    "codeDescription": "Demonstrates using the `defer` prop in `<Teleport>` to postpone target resolution until other application parts have mounted. This targets a container rendered by Vue later in the component tree.",
    "codeLanguage": "vue-html",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_6",
    "pageTitle": "Vue.js Teleport Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Teleport defer to=\"#late-div\">...</Teleport>\n\n<!-- somewhere later in the template -->\n<div id=\"late-div\"></div>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Previous Value in Computed Property (Composition API)",
    "codeDescription": "This code snippet demonstrates how to access the previous value of a computed property using Vue.js Composition API.  The computed function receives the previous value as its first argument.  It returns the current count if it's less than or equal to 3, otherwise, it returns the previous value.",
    "codeLanguage": "vue",
    "codeTokens": 180,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_14",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\n// This computed will return the value of count when it's less or equal to 3.\n// When count is >=4, the last value that fulfilled our condition will be returned\n// instead until count is less or equal to 3\nconst alwaysSmall = computed((previous) => {\n  if (count.value <= 3) {\n    return count.value\n  }\n\n  return previous\n})\n</script>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Scaffold Vue Project with Yarn Modern",
    "codeDescription": "This command uses Yarn to execute the create-vue scaffolding tool for Yarn Modern (v2+). It initializes a new Vue project using Yarn as the package manager. Yarn Modern has different execution patterns compared to older Yarn versions, so this command is tailored for it.",
    "codeLanguage": "sh",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#_snippet_2",
    "pageTitle": "Vue Tooling Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "# For Yarn Modern (v2+)\n$ yarn create vue@latest"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Complex Expression in Template",
    "codeDescription": "Illustrates the bad practice of including complex expressions directly within a Vue.js template. Complex expressions should be refactored into computed properties or methods for better readability and maintainability.",
    "codeLanguage": "vue-html",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_33",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{\\n  fullName.split(' ').map((word) => {\\n    return word[0].toUpperCase() + word.slice(1)\\n  }).join(' ')\\n}}"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Component Registration (PascalCase)",
    "codeDescription": "Illustrates correct usage of PascalCase for component registration using `app.component` in Vue.js. This aligns with JavaScript class naming conventions.",
    "codeLanguage": "js",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_16",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "app.component('MyComponent', {\n  // ...\n})"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Binding ID Attribute with v-bind",
    "codeDescription": "This snippet demonstrates how to bind the `id` attribute of a `div` element to a dynamic value using the `v-bind` directive in Vue.js. The `dynamicId` property from the component's state will be used to update the `id` attribute.",
    "codeLanguage": "vue-html",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#_snippet_0",
    "pageTitle": "Vue.js Attribute Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-bind:id=\"dynamicId\"></div>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Once Watcher in Composition API (Vue.js)",
    "codeDescription": "This code demonstrates creating a watcher that triggers only once using the Composition API in Vue.js with the `once: true` option.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#_snippet_11",
    "pageTitle": "Vue.js Watchers Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  source,\n  (newValue, oldValue) => {\n    // when `source` changes, triggers only once\n  },\n  { once: true }\n)"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Multi-Attribute Component (single line)",
    "codeDescription": "Illustrates the bad practice of defining a component with multiple attributes on a single line. Elements with multiple attributes should span multiple lines for better readability.",
    "codeLanguage": "vue-html",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_30",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Rendered HTML with Overridden Slot Content Vue.js",
    "codeDescription": "This snippet shows the rendered HTML when the `<SubmitButton>` component's fallback content is overridden by the slot content \"Save\".  The provided content \"Save\" is rendered within the `<button>` element.",
    "codeLanguage": "html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#_snippet_9",
    "pageTitle": "Vue.js Component Slots",
    "codeList": [
      {
        "language": "html",
        "code": "<button type=\"submit\">Save</button>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Declaring Render Functions in Composition API - JavaScript",
    "codeDescription": "Shows how to declare a render function within the `setup()` hook when using the Composition API. The render function returns a vnode, string, or an array of vnodes.",
    "codeLanguage": "js",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_1",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "import { ref, h } from 'vue'\n\nexport default {\n  props: {\n    /* ... */\n  },\n  setup(props) {\n    const count = ref(1)\n\n    // return the render function\n    return () => h('div', props.msg + count.value)\n  }\n}"
      },
      {
        "language": "js",
        "code": "export default {\n  setup() {\n    return () => 'hello world!'\n  }\n}"
      },
      {
        "language": "js",
        "code": "import { h } from 'vue'\n\nexport default {\n  setup() {\n    // use an array to return multiple root nodes\n    return () => [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Custom Ref Implementation",
    "codeDescription": "Illustrates how to create a debounced ref using `customRef`, which allows explicit control over dependency tracking and update triggering, updating the value only after a certain timeout.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#_snippet_2",
    "pageTitle": "Vue.js Reactivity API: Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { customRef } from 'vue'\n\nexport function useDebouncedRef(value, delay = 200) {\n  let timeout\n  return customRef((track, trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newValue) {\n        clearTimeout(timeout)\n        timeout = setTimeout(() => {\n          value = newValue\n          trigger()\n        }, delay)\n      }\n    }\n  })\n}"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Bad Single-File Component Structure - Vue HTML",
    "codeDescription": "Illustrates a non-recommended structure for a Vue.js single-file component, where `<style>` is placed before `<script>` and/or `<template>`. This is inconsistent and not recommended.",
    "codeLanguage": "vue-html",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#_snippet_4",
    "pageTitle": "Vue.js Style Guide - Priority C Rules: Recommended",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<style>/* ... */</style>\n<script>/* ... */</script>\n<template>...</template>"
      },
      {
        "language": "vue-html",
        "code": "<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Teleport with Target Selector - Vue HTML",
    "codeDescription": "This example shows how to use the `to` prop of the `<Teleport>` component to specify the target container where the teleported content will be rendered. The target can be a CSS selector string or an actual DOM element. These examples demonstrate different types of CSS selectors.",
    "codeLanguage": "vue-html",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#_snippet_11",
    "pageTitle": "Vue.js Built-in Components API",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Teleport to=\"#some-id\" />\n<Teleport to=\".some-class\" />\n<Teleport to=\"[data-teleport]\" />"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Registering Components",
    "codeDescription": "This JavaScript code shows how to register components within a Vue.js component's `components` option. It demonstrates both shorthand registration and registering under a different name.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#_snippet_5",
    "pageTitle": "Vue.js Component Options: Misc",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n  components: {\n    // shorthand\n    Foo,\n    // register under a different name\n    RenamedBar: Bar\n  }\n}"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "withModifiers Helper - Render Function - JavaScript",
    "codeDescription": "Demonstrates how to use the `withModifiers` helper function to apply event modifiers like `.self` within render functions.",
    "codeLanguage": "js",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#_snippet_16",
    "pageTitle": "Vue.js Render Functions and JSX",
    "codeList": [
      {
        "language": "js",
        "code": "import { withModifiers } from 'vue'\n\nh('div', {\n  onClick: withModifiers(() => {}, ['self'])\n})"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Increment Count with Inline Handler",
    "codeDescription": "This snippet demonstrates how to use an inline handler within a Vue template to increment the `count` variable.  The `@click` directive binds the click event of the button to the inline expression `count++`. The `{{ count }}` syntax displays the current value of the `count` variable.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#_snippet_2",
    "pageTitle": "Vue.js Event Handling",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"count++\">Add 1</button>\n<p>Count is: {{ count }}</p>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue Template for Counter",
    "codeDescription": "This snippet defines the HTML template for a simple counter component in Vue. It includes a button that increments the `count` property when clicked.  The `count` property is displayed within the button.\n\nDependencies: None\nInput: None\nOutput: HTML markup for the counter component.",
    "codeLanguage": "Vue.js",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#_snippet_2",
    "pageTitle": "Vue.js Introduction",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div id=\"app\">\n  <button @click=\"count++\">\n    Count is: {{ count }}\n  </button>\n</div>"
      }
    ],
    "relevance": 0.72,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "v-pre Directive in Vue.js",
    "codeDescription": "Explains how v-pre prevents Vue.js from compiling an element and its children, preserving the raw template syntax. This is useful for displaying code examples or preventing Vue from interpreting specific sections of the template.",
    "codeLanguage": "vue-html",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#_snippet_8",
    "pageTitle": "Vue.js Built-in Directives",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span v-pre>{{ this will not be compiled }}</span>"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Using Custom Directive vFocus in Template (Options API) HTML",
    "codeDescription": "Shows how to use the locally registered `v-focus` directive in a Vue template using the Options API.  The directive will automatically focus the input element.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#_snippet_8",
    "pageTitle": "Vue.js Custom Directives Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-focus />"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Configure Vite Alias for Vue",
    "codeDescription": "This code snippet shows how to configure an alias in Vite to resolve the `vue` import to the `vue/dist/vue.esm-bundler.js` file. This configuration is necessary when using Vue in HTML mode with Vite, ensuring correct in-browser template compilation.",
    "codeLanguage": "JavaScript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-1/description.md#_snippet_1",
    "pageTitle": "Vue.js Getting Started Tutorial",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// vite.config.js\nexport default {\n  resolve: {\n    alias: {\n      vue: 'vue/dist/vue.esm-bundler.js'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Vue.js ARIA Hidden Example",
    "codeDescription": "This Vue.js code demonstrates the usage of `aria-hidden=\"true\"` to hide an element from assistive technologies like screen readers. This is useful for decorative or duplicated content that doesn't need to be read aloud.",
    "codeLanguage": "vue-html",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#_snippet_16",
    "pageTitle": "Vue.js Accessibility Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p>This is not hidden from screen readers.</p>\n<p aria-hidden=\"true\">This is hidden from screen readers.</p>"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Component Template String Definition - Vue.js",
    "codeDescription": "Defines the structure of the `template` option within a Vue component, specifying that it accepts a string value representing the component's template. The template is used to generate the component's DOM structure at runtime, if a compiler is available. It is important to trust the source of the template to avoid security vulnerabilities.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#_snippet_0",
    "pageTitle": "Vue.js Component Options: Rendering",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  template?: string\n}"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Accessing Previous Value in Computed Property (Options API)",
    "codeDescription": "This code snippet demonstrates how to access the previous value of a computed property's getter function in Vue.js Options API. The first argument of the getter provides the previous value. It returns the current count if it's less than or equal to 3, otherwise, it returns the previous value.",
    "codeLanguage": "javascript",
    "codeTokens": 184,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_13",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(_, previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Disabling Teleport Conditionally",
    "codeDescription": "This snippet shows how to conditionally disable the <Teleport> component using the disabled prop.  The disabled prop is bound to a boolean value, allowing for dynamic control over whether the teleport is active.  This can be useful for rendering components differently based on the environment (e.g., desktop vs. mobile).",
    "codeLanguage": "vue-html",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#_snippet_4",
    "pageTitle": "Vue.js Teleport Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Teleport :disabled=\"isMobile\">\n  ...\n</Teleport>"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Method Invocation in Template",
    "codeDescription": "This snippet shows how to invoke a method directly within a Vue.js template.  The template calls the `calculateBooksMessage()` method, and the returned value is displayed.  This approach is similar to using a computed property but does not provide caching.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#_snippet_6",
    "pageTitle": "Vue.js Computed Properties",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p>{{ calculateBooksMessage() }}</p>"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "Good Simple Computed Properties (options API)",
    "codeDescription": "Illustrates the recommended practice of breaking down a complex computed property into smaller, simpler computed properties for improved readability, testability, and adaptability.",
    "codeLanguage": "js",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#_snippet_39",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "js",
        "code": "computed: {\n  basePrice() {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n\n  discount() {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n\n  finalPrice() {\n    return this.basePrice - this.discount\n  }\n}"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  },
  {
    "codeTitle": "createElementVNode Usage in JavaScript",
    "codeDescription": "This JavaScript code snippet showcases how `createElementVNode` is used with patch flags to optimize DOM updates. The third argument, `2`, is the CLASS patch flag which tells the runtime renderer only the class needs to be updated during patching. The code assumes the existence of `_normalizeClass` and `_ctx.active` for generating the class value.",
    "codeLanguage": "JavaScript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#_snippet_1",
    "pageTitle": "Vue Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "createElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)"
      }
    ],
    "relevance": 0.715,
    "model": "gemini-2.0-flash"
  }
]